// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable

using System;
using System.Runtime.InteropServices;
using System.Drawing;

namespace SDL3;

public unsafe partial class SDL3
{
	[LibraryImport(LibName, EntryPoint = "SDL_TryLockSpinlock")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_TryLockSpinlock(SDL_SpinLock* @lock);

	[LibraryImport(LibName, EntryPoint = "SDL_LockSpinlock")]
	public static partial void SDL_LockSpinlock(SDL_SpinLock* @lock);

	[LibraryImport(LibName, EntryPoint = "SDL_UnlockSpinlock")]
	public static partial void SDL_UnlockSpinlock(SDL_SpinLock* @lock);

	[LibraryImport(LibName, EntryPoint = "SDL_MemoryBarrierReleaseFunction")]
	public static partial void SDL_MemoryBarrierReleaseFunction();

	[LibraryImport(LibName, EntryPoint = "SDL_MemoryBarrierAcquireFunction")]
	public static partial void SDL_MemoryBarrierAcquireFunction();

	[LibraryImport(LibName, EntryPoint = "SDL_CompareAndSwapAtomicInt")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CompareAndSwapAtomicInt(SDL_AtomicInt* a, int oldval, int newval);

	[LibraryImport(LibName, EntryPoint = "SDL_SetAtomicInt")]
	public static partial int SDL_SetAtomicInt(SDL_AtomicInt* a, int v);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAtomicInt")]
	public static partial int SDL_GetAtomicInt(SDL_AtomicInt* a);

	[LibraryImport(LibName, EntryPoint = "SDL_AddAtomicInt")]
	public static partial int SDL_AddAtomicInt(SDL_AtomicInt* a, int v);

	[LibraryImport(LibName, EntryPoint = "SDL_CompareAndSwapAtomicU32")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CompareAndSwapAtomicU32(SDL_AtomicU32* a, uint oldval, uint newval);

	[LibraryImport(LibName, EntryPoint = "SDL_SetAtomicU32")]
	public static partial uint SDL_SetAtomicU32(SDL_AtomicU32* a, uint v);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAtomicU32")]
	public static partial uint SDL_GetAtomicU32(SDL_AtomicU32* a);

	[LibraryImport(LibName, EntryPoint = "SDL_CompareAndSwapAtomicPointer")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CompareAndSwapAtomicPointer(nint a, nint oldval, nint newval);

	[LibraryImport(LibName, EntryPoint = "SDL_SetAtomicPointer")]
	public static partial nint SDL_SetAtomicPointer(nint a, nint v);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAtomicPointer")]
	public static partial nint SDL_GetAtomicPointer(nint a);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumAudioDrivers")]
	public static partial int SDL_GetNumAudioDrivers();

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioDriver")]
	public static partial byte* SDL_GetAudioDriverPtr(int index);

	public static string? SDL_GetAudioDriver(int index)
	{
		return ConvertToManaged(SDL_GetAudioDriverPtr(index));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetCurrentAudioDriver")]
	public static partial byte* SDL_GetCurrentAudioDriverPtr();

	public static string? SDL_GetCurrentAudioDriver()
	{
		return ConvertToManaged(SDL_GetCurrentAudioDriverPtr());
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioPlaybackDevices")]
	public static partial SDL_AudioDeviceID* SDL_GetAudioPlaybackDevices(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioRecordingDevices")]
	public static partial SDL_AudioDeviceID* SDL_GetAudioRecordingDevices(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioDeviceName")]
	public static partial byte* SDL_GetAudioDeviceNamePtr(SDL_AudioDeviceID devid);

	public static string? SDL_GetAudioDeviceName(SDL_AudioDeviceID devid)
	{
		return ConvertToManaged(SDL_GetAudioDeviceNamePtr(devid));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioDeviceFormat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetAudioDeviceFormat(SDL_AudioDeviceID devid, SDL_AudioSpec* spec, int* sample_frames);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioDeviceChannelMap")]
	public static partial int* SDL_GetAudioDeviceChannelMap(SDL_AudioDeviceID devid, out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenAudioDevice")]
	public static partial SDL_AudioDeviceID SDL_OpenAudioDevice(SDL_AudioDeviceID devid, SDL_AudioSpec* spec);

	[LibraryImport(LibName, EntryPoint = "SDL_PauseAudioDevice")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_PauseAudioDevice(SDL_AudioDeviceID dev);

	[LibraryImport(LibName, EntryPoint = "SDL_ResumeAudioDevice")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ResumeAudioDevice(SDL_AudioDeviceID dev);

	[LibraryImport(LibName, EntryPoint = "SDL_AudioDevicePaused")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_AudioDevicePaused(SDL_AudioDeviceID dev);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioDeviceGain")]
	public static partial float SDL_GetAudioDeviceGain(SDL_AudioDeviceID devid);

	[LibraryImport(LibName, EntryPoint = "SDL_SetAudioDeviceGain")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetAudioDeviceGain(SDL_AudioDeviceID devid, float gain);

	[LibraryImport(LibName, EntryPoint = "SDL_CloseAudioDevice")]
	public static partial void SDL_CloseAudioDevice(SDL_AudioDeviceID devid);

	[LibraryImport(LibName, EntryPoint = "SDL_BindAudioStreams")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_BindAudioStreams(SDL_AudioDeviceID devid, SDL_AudioStream streams, int num_streams);

	[LibraryImport(LibName, EntryPoint = "SDL_BindAudioStream")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_BindAudioStream(SDL_AudioDeviceID devid, SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_UnbindAudioStreams")]
	public static partial void SDL_UnbindAudioStreams(SDL_AudioStream streams, int num_streams);

	[LibraryImport(LibName, EntryPoint = "SDL_UnbindAudioStream")]
	public static partial void SDL_UnbindAudioStream(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioStreamDevice")]
	public static partial SDL_AudioDeviceID SDL_GetAudioStreamDevice(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateAudioStream")]
	public static partial SDL_AudioStream SDL_CreateAudioStream(SDL_AudioSpec* src_spec, SDL_AudioSpec* dst_spec);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioStreamProperties")]
	public static partial SDL_PropertiesID SDL_GetAudioStreamProperties(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioStreamFormat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetAudioStreamFormat(SDL_AudioStream stream, SDL_AudioSpec* src_spec, SDL_AudioSpec* dst_spec);

	[LibraryImport(LibName, EntryPoint = "SDL_SetAudioStreamFormat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetAudioStreamFormat(SDL_AudioStream stream, SDL_AudioSpec* src_spec, SDL_AudioSpec* dst_spec);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioStreamFrequencyRatio")]
	public static partial float SDL_GetAudioStreamFrequencyRatio(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_SetAudioStreamFrequencyRatio")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetAudioStreamFrequencyRatio(SDL_AudioStream stream, float ratio);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioStreamGain")]
	public static partial float SDL_GetAudioStreamGain(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_SetAudioStreamGain")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetAudioStreamGain(SDL_AudioStream stream, float gain);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioStreamInputChannelMap")]
	public static partial int* SDL_GetAudioStreamInputChannelMap(SDL_AudioStream stream, out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioStreamOutputChannelMap")]
	public static partial int* SDL_GetAudioStreamOutputChannelMap(SDL_AudioStream stream, out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_SetAudioStreamInputChannelMap")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetAudioStreamInputChannelMap(SDL_AudioStream stream, int* chmap, int count);

	[LibraryImport(LibName, EntryPoint = "SDL_SetAudioStreamOutputChannelMap")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetAudioStreamOutputChannelMap(SDL_AudioStream stream, int* chmap, int count);

	[LibraryImport(LibName, EntryPoint = "SDL_PutAudioStreamData")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_PutAudioStreamData(SDL_AudioStream stream, nint buf, int len);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioStreamData")]
	public static partial int SDL_GetAudioStreamData(SDL_AudioStream stream, nint buf, int len);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioStreamAvailable")]
	public static partial int SDL_GetAudioStreamAvailable(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioStreamQueued")]
	public static partial int SDL_GetAudioStreamQueued(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_FlushAudioStream")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_FlushAudioStream(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_ClearAudioStream")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ClearAudioStream(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_PauseAudioStreamDevice")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_PauseAudioStreamDevice(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_ResumeAudioStreamDevice")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ResumeAudioStreamDevice(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_LockAudioStream")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_LockAudioStream(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_UnlockAudioStream")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_UnlockAudioStream(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_SetAudioStreamGetCallback")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetAudioStreamGetCallback(SDL_AudioStream stream, delegate* unmanaged<nint, SDL_AudioStream, int, int, void> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_SetAudioStreamPutCallback")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetAudioStreamPutCallback(SDL_AudioStream stream, delegate* unmanaged<nint, SDL_AudioStream, int, int, void> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyAudioStream")]
	public static partial void SDL_DestroyAudioStream(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenAudioDeviceStream")]
	public static partial SDL_AudioStream SDL_OpenAudioDeviceStream(SDL_AudioDeviceID devid, SDL_AudioSpec* spec, delegate* unmanaged<nint, SDL_AudioStream, int, int, void> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_SetAudioPostmixCallback")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetAudioPostmixCallback(SDL_AudioDeviceID devid, delegate* unmanaged<nint, SDL_AudioSpec*, float*, int, void> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadWAV_IO")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_LoadWAV_IO(SDL_IOStream src, [MarshalAs(UnmanagedType.U1)] bool closeio, SDL_AudioSpec* spec, byte** audio_buf, uint* audio_len);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadWAV")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_LoadWAV(byte* path, SDL_AudioSpec* spec, byte** audio_buf, uint* audio_len);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadWAV")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_LoadWAV(ReadOnlySpan<byte> path, SDL_AudioSpec* spec, byte** audio_buf, uint* audio_len);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadWAV")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_LoadWAV([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path, SDL_AudioSpec* spec, byte** audio_buf, uint* audio_len);

	[LibraryImport(LibName, EntryPoint = "SDL_MixAudio")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_MixAudio(byte* dst, byte* src, SDL_AudioFormat format, uint len, float volume);

	[LibraryImport(LibName, EntryPoint = "SDL_ConvertAudioSamples")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ConvertAudioSamples(SDL_AudioSpec* src_spec, byte* src_data, int src_len, SDL_AudioSpec* dst_spec, byte** dst_data, int* dst_len);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioFormatName")]
	public static partial byte* SDL_GetAudioFormatNamePtr(SDL_AudioFormat format);

	public static string? SDL_GetAudioFormatName(SDL_AudioFormat format)
	{
		return ConvertToManaged(SDL_GetAudioFormatNamePtr(format));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetSilenceValueForFormat")]
	public static partial int SDL_GetSilenceValueForFormat(SDL_AudioFormat format);

	[LibraryImport(LibName, EntryPoint = "SDL_ComposeCustomBlendMode")]
	public static partial SDL_BlendMode SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor, SDL_BlendFactor dstColorFactor, SDL_BlendOperation colorOperation, SDL_BlendFactor srcAlphaFactor, SDL_BlendFactor dstAlphaFactor, SDL_BlendOperation alphaOperation);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumCameraDrivers")]
	public static partial int SDL_GetNumCameraDrivers();

	[LibraryImport(LibName, EntryPoint = "SDL_GetCameraDriver")]
	public static partial byte* SDL_GetCameraDriverPtr(int index);

	public static string? SDL_GetCameraDriver(int index)
	{
		return ConvertToManaged(SDL_GetCameraDriverPtr(index));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetCurrentCameraDriver")]
	public static partial byte* SDL_GetCurrentCameraDriverPtr();

	public static string? SDL_GetCurrentCameraDriver()
	{
		return ConvertToManaged(SDL_GetCurrentCameraDriverPtr());
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetCameras")]
	public static partial SDL_CameraID* SDL_GetCameras(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetCameraSupportedFormats")]
	public static partial SDL_CameraSpec** SDL_GetCameraSupportedFormats(SDL_CameraID devid, out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetCameraName")]
	public static partial byte* SDL_GetCameraNamePtr(SDL_CameraID instance_id);

	public static string? SDL_GetCameraName(SDL_CameraID instance_id)
	{
		return ConvertToManaged(SDL_GetCameraNamePtr(instance_id));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetCameraPosition")]
	public static partial SDL_CameraPosition SDL_GetCameraPosition(SDL_CameraID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenCamera")]
	public static partial SDL_Camera SDL_OpenCamera(SDL_CameraID instance_id, SDL_CameraSpec* spec);

	[LibraryImport(LibName, EntryPoint = "SDL_GetCameraPermissionState")]
	public static partial int SDL_GetCameraPermissionState(SDL_Camera camera);

	[LibraryImport(LibName, EntryPoint = "SDL_GetCameraID")]
	public static partial SDL_CameraID SDL_GetCameraID(SDL_Camera camera);

	[LibraryImport(LibName, EntryPoint = "SDL_GetCameraProperties")]
	public static partial SDL_PropertiesID SDL_GetCameraProperties(SDL_Camera camera);

	[LibraryImport(LibName, EntryPoint = "SDL_GetCameraFormat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetCameraFormat(SDL_Camera camera, SDL_CameraSpec* spec);

	[LibraryImport(LibName, EntryPoint = "SDL_AcquireCameraFrame")]
	public static partial SDL_Surface* SDL_AcquireCameraFrame(SDL_Camera camera, ulong* timestampNS);

	[LibraryImport(LibName, EntryPoint = "SDL_ReleaseCameraFrame")]
	public static partial void SDL_ReleaseCameraFrame(SDL_Camera camera, SDL_Surface* frame);

	[LibraryImport(LibName, EntryPoint = "SDL_CloseCamera")]
	public static partial void SDL_CloseCamera(SDL_Camera camera);

	[LibraryImport(LibName, EntryPoint = "SDL_SetClipboardText")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetClipboardText(byte* text);

	[LibraryImport(LibName, EntryPoint = "SDL_SetClipboardText")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetClipboardText(ReadOnlySpan<byte> text);

	[LibraryImport(LibName, EntryPoint = "SDL_SetClipboardText")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetClipboardText([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> text);

	[LibraryImport(LibName, EntryPoint = "SDL_GetClipboardText")]
	public static partial byte* SDL_GetClipboardTextPtr();

	public static string? SDL_GetClipboardText()
	{
		byte* resultPtr = SDL_GetClipboardTextPtr();
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_HasClipboardText")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasClipboardText();

	[LibraryImport(LibName, EntryPoint = "SDL_SetPrimarySelectionText")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetPrimarySelectionText(byte* text);

	[LibraryImport(LibName, EntryPoint = "SDL_SetPrimarySelectionText")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetPrimarySelectionText(ReadOnlySpan<byte> text);

	[LibraryImport(LibName, EntryPoint = "SDL_SetPrimarySelectionText")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetPrimarySelectionText([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> text);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPrimarySelectionText")]
	public static partial byte* SDL_GetPrimarySelectionTextPtr();

	public static string? SDL_GetPrimarySelectionText()
	{
		byte* resultPtr = SDL_GetPrimarySelectionTextPtr();
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_HasPrimarySelectionText")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasPrimarySelectionText();

	[LibraryImport(LibName, EntryPoint = "SDL_SetClipboardData")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetClipboardData(delegate* unmanaged<nint, byte*, nuint*, nint> callback, delegate* unmanaged<nint, void> cleanup, nint userdata, byte** mime_types, nuint num_mime_types);

	[LibraryImport(LibName, EntryPoint = "SDL_ClearClipboardData")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ClearClipboardData();

	[LibraryImport(LibName, EntryPoint = "SDL_GetClipboardData")]
	public static partial nint SDL_GetClipboardData(byte* mime_type, nuint* size);

	[LibraryImport(LibName, EntryPoint = "SDL_GetClipboardData")]
	public static partial nint SDL_GetClipboardData(ReadOnlySpan<byte> mime_type, nuint* size);

	[LibraryImport(LibName, EntryPoint = "SDL_GetClipboardData")]
	public static partial nint SDL_GetClipboardData([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> mime_type, nuint* size);

	[LibraryImport(LibName, EntryPoint = "SDL_HasClipboardData")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasClipboardData(byte* mime_type);

	[LibraryImport(LibName, EntryPoint = "SDL_HasClipboardData")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasClipboardData(ReadOnlySpan<byte> mime_type);

	[LibraryImport(LibName, EntryPoint = "SDL_HasClipboardData")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasClipboardData([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> mime_type);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumLogicalCPUCores")]
	public static partial int SDL_GetNumLogicalCPUCores();

	[LibraryImport(LibName, EntryPoint = "SDL_GetCPUCacheLineSize")]
	public static partial int SDL_GetCPUCacheLineSize();

	[LibraryImport(LibName, EntryPoint = "SDL_HasAltiVec")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasAltiVec();

	[LibraryImport(LibName, EntryPoint = "SDL_HasMMX")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasMMX();

	[LibraryImport(LibName, EntryPoint = "SDL_HasSSE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasSSE();

	[LibraryImport(LibName, EntryPoint = "SDL_HasSSE2")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasSSE2();

	[LibraryImport(LibName, EntryPoint = "SDL_HasSSE3")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasSSE3();

	[LibraryImport(LibName, EntryPoint = "SDL_HasSSE41")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasSSE41();

	[LibraryImport(LibName, EntryPoint = "SDL_HasSSE42")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasSSE42();

	[LibraryImport(LibName, EntryPoint = "SDL_HasAVX")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasAVX();

	[LibraryImport(LibName, EntryPoint = "SDL_HasAVX2")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasAVX2();

	[LibraryImport(LibName, EntryPoint = "SDL_HasAVX512F")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasAVX512F();

	[LibraryImport(LibName, EntryPoint = "SDL_HasARMSIMD")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasARMSIMD();

	[LibraryImport(LibName, EntryPoint = "SDL_HasNEON")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasNEON();

	[LibraryImport(LibName, EntryPoint = "SDL_HasLSX")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasLSX();

	[LibraryImport(LibName, EntryPoint = "SDL_HasLASX")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasLASX();

	[LibraryImport(LibName, EntryPoint = "SDL_GetSystemRAM")]
	public static partial int SDL_GetSystemRAM();

	[LibraryImport(LibName, EntryPoint = "SDL_GetSIMDAlignment")]
	public static partial nuint SDL_GetSIMDAlignment();

	[LibraryImport(LibName, EntryPoint = "SDL_ShowOpenFileDialog")]
	public static partial void SDL_ShowOpenFileDialog(delegate* unmanaged<nint, byte**, int, void> callback, nint userdata, SDL_Window window, SDL_DialogFileFilter* filters, int nfilters, byte* default_location, [MarshalAs(UnmanagedType.U1)] bool allow_many);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowOpenFileDialog")]
	public static partial void SDL_ShowOpenFileDialog(delegate* unmanaged<nint, byte**, int, void> callback, nint userdata, SDL_Window window, SDL_DialogFileFilter* filters, int nfilters, ReadOnlySpan<byte> default_location, [MarshalAs(UnmanagedType.U1)] bool allow_many);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowOpenFileDialog")]
	public static partial void SDL_ShowOpenFileDialog(delegate* unmanaged<nint, byte**, int, void> callback, nint userdata, SDL_Window window, SDL_DialogFileFilter* filters, int nfilters, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> default_location, [MarshalAs(UnmanagedType.U1)] bool allow_many);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowSaveFileDialog")]
	public static partial void SDL_ShowSaveFileDialog(delegate* unmanaged<nint, byte**, int, void> callback, nint userdata, SDL_Window window, SDL_DialogFileFilter* filters, int nfilters, byte* default_location);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowSaveFileDialog")]
	public static partial void SDL_ShowSaveFileDialog(delegate* unmanaged<nint, byte**, int, void> callback, nint userdata, SDL_Window window, SDL_DialogFileFilter* filters, int nfilters, ReadOnlySpan<byte> default_location);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowSaveFileDialog")]
	public static partial void SDL_ShowSaveFileDialog(delegate* unmanaged<nint, byte**, int, void> callback, nint userdata, SDL_Window window, SDL_DialogFileFilter* filters, int nfilters, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> default_location);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowOpenFolderDialog")]
	public static partial void SDL_ShowOpenFolderDialog(delegate* unmanaged<nint, byte**, int, void> callback, nint userdata, SDL_Window window, byte* default_location, [MarshalAs(UnmanagedType.U1)] bool allow_many);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowOpenFolderDialog")]
	public static partial void SDL_ShowOpenFolderDialog(delegate* unmanaged<nint, byte**, int, void> callback, nint userdata, SDL_Window window, ReadOnlySpan<byte> default_location, [MarshalAs(UnmanagedType.U1)] bool allow_many);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowOpenFolderDialog")]
	public static partial void SDL_ShowOpenFolderDialog(delegate* unmanaged<nint, byte**, int, void> callback, nint userdata, SDL_Window window, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> default_location, [MarshalAs(UnmanagedType.U1)] bool allow_many);

	[LibraryImport(LibName, EntryPoint = "SDL_SetError")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetError(byte* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_SetError")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetError(ReadOnlySpan<byte> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_SetError")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetError([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_OutOfMemory")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_OutOfMemory();

	[LibraryImport(LibName, EntryPoint = "SDL_GetError")]
	public static partial byte* SDL_GetErrorPtr();

	public static string? SDL_GetError()
	{
		return ConvertToManaged(SDL_GetErrorPtr());
	}

	[LibraryImport(LibName, EntryPoint = "SDL_ClearError")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ClearError();

	[LibraryImport(LibName, EntryPoint = "SDL_PumpEvents")]
	public static partial void SDL_PumpEvents();

	[LibraryImport(LibName, EntryPoint = "SDL_PeepEvents")]
	public static partial int SDL_PeepEvents(SDL_Event* events, int numevents, SDL_EventAction action, SDL_EventType minType, SDL_EventType maxType);

	[LibraryImport(LibName, EntryPoint = "SDL_HasEvent")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasEvent(SDL_EventType type);

	[LibraryImport(LibName, EntryPoint = "SDL_HasEvents")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasEvents(SDL_EventType minType, SDL_EventType maxType);

	[LibraryImport(LibName, EntryPoint = "SDL_FlushEvent")]
	public static partial void SDL_FlushEvent(SDL_EventType type);

	[LibraryImport(LibName, EntryPoint = "SDL_FlushEvents")]
	public static partial void SDL_FlushEvents(SDL_EventType minType, SDL_EventType maxType);

	[LibraryImport(LibName, EntryPoint = "SDL_PollEvent")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_PollEvent(SDL_Event* @event);

	[LibraryImport(LibName, EntryPoint = "SDL_WaitEvent")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WaitEvent(SDL_Event* @event);

	[LibraryImport(LibName, EntryPoint = "SDL_WaitEventTimeout")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WaitEventTimeout(SDL_Event* @event, int timeoutMS);

	[LibraryImport(LibName, EntryPoint = "SDL_PushEvent")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_PushEvent(SDL_Event* @event);

	[LibraryImport(LibName, EntryPoint = "SDL_SetEventFilter")]
	public static partial void SDL_SetEventFilter(delegate* unmanaged<nint, SDL_Event*, bool> filter, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_GetEventFilter")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetEventFilter(delegate* unmanaged<nint, SDL_Event*, bool> filter, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_AddEventWatch")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_AddEventWatch(delegate* unmanaged<nint, SDL_Event*, bool> filter, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_RemoveEventWatch")]
	public static partial void SDL_RemoveEventWatch(delegate* unmanaged<nint, SDL_Event*, bool> filter, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_FilterEvents")]
	public static partial void SDL_FilterEvents(delegate* unmanaged<nint, SDL_Event*, bool> filter, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_SetEventEnabled")]
	public static partial void SDL_SetEventEnabled(SDL_EventType type, [MarshalAs(UnmanagedType.U1)] bool enabled);

	[LibraryImport(LibName, EntryPoint = "SDL_EventEnabled")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_EventEnabled(SDL_EventType type);

	[LibraryImport(LibName, EntryPoint = "SDL_RegisterEvents")]
	public static partial uint SDL_RegisterEvents(int numevents);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowFromEvent")]
	public static partial SDL_Window SDL_GetWindowFromEvent(SDL_Event* @event);

	[LibraryImport(LibName, EntryPoint = "SDL_GetBasePath")]
	public static partial byte* SDL_GetBasePathPtr();

	public static string? SDL_GetBasePath()
	{
		return ConvertToManaged(SDL_GetBasePathPtr());
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetPrefPath")]
	public static partial byte* SDL_GetPrefPathPtr(byte* org, byte* app);

	public static string? SDL_GetPrefPath(byte* org, byte* app)
	{
		byte* resultPtr = SDL_GetPrefPathPtr(org, app);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetPrefPath")]
	public static partial byte* SDL_GetPrefPathPtr(ReadOnlySpan<byte> org, ReadOnlySpan<byte> app);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPrefPath")]
	public static partial byte* SDL_GetPrefPathPtr([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> org, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> app);

	[LibraryImport(LibName, EntryPoint = "SDL_GetUserFolder")]
	public static partial byte* SDL_GetUserFolderPtr(SDL_Folder folder);

	public static string? SDL_GetUserFolder(SDL_Folder folder)
	{
		return ConvertToManaged(SDL_GetUserFolderPtr(folder));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_CreateDirectory")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CreateDirectory(byte* path);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateDirectory")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CreateDirectory(ReadOnlySpan<byte> path);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateDirectory")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CreateDirectory([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path);

	[LibraryImport(LibName, EntryPoint = "SDL_EnumerateDirectory")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_EnumerateDirectory(byte* path, delegate* unmanaged<nint, byte*, byte*, int> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_EnumerateDirectory")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_EnumerateDirectory(ReadOnlySpan<byte> path, delegate* unmanaged<nint, byte*, byte*, int> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_EnumerateDirectory")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_EnumerateDirectory([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path, delegate* unmanaged<nint, byte*, byte*, int> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_RemovePath")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RemovePath(byte* path);

	[LibraryImport(LibName, EntryPoint = "SDL_RemovePath")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RemovePath(ReadOnlySpan<byte> path);

	[LibraryImport(LibName, EntryPoint = "SDL_RemovePath")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RemovePath([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path);

	[LibraryImport(LibName, EntryPoint = "SDL_RenamePath")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenamePath(byte* oldpath, byte* newpath);

	[LibraryImport(LibName, EntryPoint = "SDL_RenamePath")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenamePath(ReadOnlySpan<byte> oldpath, ReadOnlySpan<byte> newpath);

	[LibraryImport(LibName, EntryPoint = "SDL_RenamePath")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenamePath([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> oldpath, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> newpath);

	[LibraryImport(LibName, EntryPoint = "SDL_CopyFile")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CopyFile(byte* oldpath, byte* newpath);

	[LibraryImport(LibName, EntryPoint = "SDL_CopyFile")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CopyFile(ReadOnlySpan<byte> oldpath, ReadOnlySpan<byte> newpath);

	[LibraryImport(LibName, EntryPoint = "SDL_CopyFile")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CopyFile([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> oldpath, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> newpath);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPathInfo")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetPathInfo(byte* path, SDL_PathInfo* info);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPathInfo")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetPathInfo(ReadOnlySpan<byte> path, SDL_PathInfo* info);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPathInfo")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetPathInfo([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path, SDL_PathInfo* info);

	[LibraryImport(LibName, EntryPoint = "SDL_GlobDirectory")]
	public static partial byte** SDL_GlobDirectory(byte* path, byte* pattern, SDL_GlobFlags flags, int* count);

	[LibraryImport(LibName, EntryPoint = "SDL_GlobDirectory")]
	public static partial byte** SDL_GlobDirectory(ReadOnlySpan<byte> path, ReadOnlySpan<byte> pattern, SDL_GlobFlags flags, int* count);

	[LibraryImport(LibName, EntryPoint = "SDL_GlobDirectory")]
	public static partial byte** SDL_GlobDirectory([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> pattern, SDL_GlobFlags flags, int* count);

	[LibraryImport(LibName, EntryPoint = "SDL_AddGamepadMapping")]
	public static partial int SDL_AddGamepadMapping(byte* mapping);

	[LibraryImport(LibName, EntryPoint = "SDL_AddGamepadMapping")]
	public static partial int SDL_AddGamepadMapping(ReadOnlySpan<byte> mapping);

	[LibraryImport(LibName, EntryPoint = "SDL_AddGamepadMapping")]
	public static partial int SDL_AddGamepadMapping([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> mapping);

	[LibraryImport(LibName, EntryPoint = "SDL_AddGamepadMappingsFromIO")]
	public static partial int SDL_AddGamepadMappingsFromIO(SDL_IOStream src, [MarshalAs(UnmanagedType.U1)] bool closeio);

	[LibraryImport(LibName, EntryPoint = "SDL_AddGamepadMappingsFromFile")]
	public static partial int SDL_AddGamepadMappingsFromFile(byte* file);

	[LibraryImport(LibName, EntryPoint = "SDL_AddGamepadMappingsFromFile")]
	public static partial int SDL_AddGamepadMappingsFromFile(ReadOnlySpan<byte> file);

	[LibraryImport(LibName, EntryPoint = "SDL_AddGamepadMappingsFromFile")]
	public static partial int SDL_AddGamepadMappingsFromFile([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> file);

	[LibraryImport(LibName, EntryPoint = "SDL_ReloadGamepadMappings")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ReloadGamepadMappings();

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadMappings")]
	public static partial byte** SDL_GetGamepadMappings(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadMappingForGUID")]
	public static partial byte* SDL_GetGamepadMappingForGUIDPtr(Guid guid);

	public static string? SDL_GetGamepadMappingForGUID(Guid guid)
	{
		byte* resultPtr = SDL_GetGamepadMappingForGUIDPtr(guid);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadMapping")]
	public static partial byte* SDL_GetGamepadMappingPtr(SDL_Gamepad gamepad);

	public static string? SDL_GetGamepadMapping(SDL_Gamepad gamepad)
	{
		byte* resultPtr = SDL_GetGamepadMappingPtr(gamepad);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_SetGamepadMapping")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetGamepadMapping(SDL_JoystickID instance_id, byte* mapping);

	[LibraryImport(LibName, EntryPoint = "SDL_SetGamepadMapping")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetGamepadMapping(SDL_JoystickID instance_id, ReadOnlySpan<byte> mapping);

	[LibraryImport(LibName, EntryPoint = "SDL_SetGamepadMapping")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetGamepadMapping(SDL_JoystickID instance_id, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> mapping);

	[LibraryImport(LibName, EntryPoint = "SDL_HasGamepad")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasGamepad();

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepads")]
	public static partial SDL_JoystickID* SDL_GetGamepads(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_IsGamepad")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_IsGamepad(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadNameForID")]
	public static partial byte* SDL_GetGamepadNameForIDPtr(SDL_JoystickID instance_id);

	public static string? SDL_GetGamepadNameForID(SDL_JoystickID instance_id)
	{
		return ConvertToManaged(SDL_GetGamepadNameForIDPtr(instance_id));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadPathForID")]
	public static partial byte* SDL_GetGamepadPathForIDPtr(SDL_JoystickID instance_id);

	public static string? SDL_GetGamepadPathForID(SDL_JoystickID instance_id)
	{
		return ConvertToManaged(SDL_GetGamepadPathForIDPtr(instance_id));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadPlayerIndexForID")]
	public static partial int SDL_GetGamepadPlayerIndexForID(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadGUIDForID")]
	public static partial Guid SDL_GetGamepadGUIDForID(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadVendorForID")]
	public static partial ushort SDL_GetGamepadVendorForID(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadProductForID")]
	public static partial ushort SDL_GetGamepadProductForID(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadProductVersionForID")]
	public static partial ushort SDL_GetGamepadProductVersionForID(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadTypeForID")]
	public static partial SDL_GamepadType SDL_GetGamepadTypeForID(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRealGamepadTypeForID")]
	public static partial SDL_GamepadType SDL_GetRealGamepadTypeForID(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadMappingForID")]
	public static partial byte* SDL_GetGamepadMappingForIDPtr(SDL_JoystickID instance_id);

	public static string? SDL_GetGamepadMappingForID(SDL_JoystickID instance_id)
	{
		byte* resultPtr = SDL_GetGamepadMappingForIDPtr(instance_id);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_OpenGamepad")]
	public static partial SDL_Gamepad SDL_OpenGamepad(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadFromID")]
	public static partial SDL_Gamepad SDL_GetGamepadFromID(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadFromPlayerIndex")]
	public static partial SDL_Gamepad SDL_GetGamepadFromPlayerIndex(int player_index);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadProperties")]
	public static partial SDL_PropertiesID SDL_GetGamepadProperties(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadID")]
	public static partial SDL_JoystickID SDL_GetGamepadID(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadName")]
	public static partial byte* SDL_GetGamepadNamePtr(SDL_Gamepad gamepad);

	public static string? SDL_GetGamepadName(SDL_Gamepad gamepad)
	{
		return ConvertToManaged(SDL_GetGamepadNamePtr(gamepad));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadPath")]
	public static partial byte* SDL_GetGamepadPathPtr(SDL_Gamepad gamepad);

	public static string? SDL_GetGamepadPath(SDL_Gamepad gamepad)
	{
		return ConvertToManaged(SDL_GetGamepadPathPtr(gamepad));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadType")]
	public static partial SDL_GamepadType SDL_GetGamepadType(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRealGamepadType")]
	public static partial SDL_GamepadType SDL_GetRealGamepadType(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadPlayerIndex")]
	public static partial int SDL_GetGamepadPlayerIndex(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_SetGamepadPlayerIndex")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetGamepadPlayerIndex(SDL_Gamepad gamepad, int player_index);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadVendor")]
	public static partial ushort SDL_GetGamepadVendor(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadProduct")]
	public static partial ushort SDL_GetGamepadProduct(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadProductVersion")]
	public static partial ushort SDL_GetGamepadProductVersion(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadFirmwareVersion")]
	public static partial ushort SDL_GetGamepadFirmwareVersion(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadSerial")]
	public static partial byte* SDL_GetGamepadSerialPtr(SDL_Gamepad gamepad);

	public static string? SDL_GetGamepadSerial(SDL_Gamepad gamepad)
	{
		return ConvertToManaged(SDL_GetGamepadSerialPtr(gamepad));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadSteamHandle")]
	public static partial ulong SDL_GetGamepadSteamHandle(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadConnectionState")]
	public static partial SDL_JoystickConnectionState SDL_GetGamepadConnectionState(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadPowerInfo")]
	public static partial SDL_PowerState SDL_GetGamepadPowerInfo(SDL_Gamepad gamepad, int* percent);

	[LibraryImport(LibName, EntryPoint = "SDL_GamepadConnected")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GamepadConnected(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadJoystick")]
	public static partial SDL_Joystick SDL_GetGamepadJoystick(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_SetGamepadEventsEnabled")]
	public static partial void SDL_SetGamepadEventsEnabled([MarshalAs(UnmanagedType.U1)] bool enabled);

	[LibraryImport(LibName, EntryPoint = "SDL_GamepadEventsEnabled")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GamepadEventsEnabled();

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadBindings")]
	public static partial SDL_GamepadBinding** SDL_GetGamepadBindings(SDL_Gamepad gamepad, out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_UpdateGamepads")]
	public static partial void SDL_UpdateGamepads();

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadTypeFromString")]
	public static partial SDL_GamepadType SDL_GetGamepadTypeFromString(byte* str);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadTypeFromString")]
	public static partial SDL_GamepadType SDL_GetGamepadTypeFromString(ReadOnlySpan<byte> str);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadTypeFromString")]
	public static partial SDL_GamepadType SDL_GetGamepadTypeFromString([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadStringForType")]
	public static partial byte* SDL_GetGamepadStringForTypePtr(SDL_GamepadType type);

	public static string? SDL_GetGamepadStringForType(SDL_GamepadType type)
	{
		return ConvertToManaged(SDL_GetGamepadStringForTypePtr(type));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadAxisFromString")]
	public static partial SDL_GamepadAxis SDL_GetGamepadAxisFromString(byte* str);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadAxisFromString")]
	public static partial SDL_GamepadAxis SDL_GetGamepadAxisFromString(ReadOnlySpan<byte> str);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadAxisFromString")]
	public static partial SDL_GamepadAxis SDL_GetGamepadAxisFromString([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadStringForAxis")]
	public static partial byte* SDL_GetGamepadStringForAxisPtr(SDL_GamepadAxis axis);

	public static string? SDL_GetGamepadStringForAxis(SDL_GamepadAxis axis)
	{
		return ConvertToManaged(SDL_GetGamepadStringForAxisPtr(axis));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GamepadHasAxis")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GamepadHasAxis(SDL_Gamepad gamepad, SDL_GamepadAxis axis);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadAxis")]
	public static partial short SDL_GetGamepadAxis(SDL_Gamepad gamepad, SDL_GamepadAxis axis);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadButtonFromString")]
	public static partial SDL_GamepadButton SDL_GetGamepadButtonFromString(byte* str);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadButtonFromString")]
	public static partial SDL_GamepadButton SDL_GetGamepadButtonFromString(ReadOnlySpan<byte> str);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadButtonFromString")]
	public static partial SDL_GamepadButton SDL_GetGamepadButtonFromString([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadStringForButton")]
	public static partial byte* SDL_GetGamepadStringForButtonPtr(SDL_GamepadButton button);

	public static string? SDL_GetGamepadStringForButton(SDL_GamepadButton button)
	{
		return ConvertToManaged(SDL_GetGamepadStringForButtonPtr(button));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GamepadHasButton")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GamepadHasButton(SDL_Gamepad gamepad, SDL_GamepadButton button);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadButton")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetGamepadButton(SDL_Gamepad gamepad, SDL_GamepadButton button);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadButtonLabelForType")]
	public static partial SDL_GamepadButtonLabel SDL_GetGamepadButtonLabelForType(SDL_GamepadType type, SDL_GamepadButton button);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadButtonLabel")]
	public static partial SDL_GamepadButtonLabel SDL_GetGamepadButtonLabel(SDL_Gamepad gamepad, SDL_GamepadButton button);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumGamepadTouchpads")]
	public static partial int SDL_GetNumGamepadTouchpads(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumGamepadTouchpadFingers")]
	public static partial int SDL_GetNumGamepadTouchpadFingers(SDL_Gamepad gamepad, int touchpad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadTouchpadFinger")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetGamepadTouchpadFinger(SDL_Gamepad gamepad, int touchpad, int finger, bool* down, float* x, float* y, float* pressure);

	[LibraryImport(LibName, EntryPoint = "SDL_GamepadHasSensor")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GamepadHasSensor(SDL_Gamepad gamepad, SDL_SensorType type);

	[LibraryImport(LibName, EntryPoint = "SDL_SetGamepadSensorEnabled")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetGamepadSensorEnabled(SDL_Gamepad gamepad, SDL_SensorType type, [MarshalAs(UnmanagedType.U1)] bool enabled);

	[LibraryImport(LibName, EntryPoint = "SDL_GamepadSensorEnabled")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GamepadSensorEnabled(SDL_Gamepad gamepad, SDL_SensorType type);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadSensorDataRate")]
	public static partial float SDL_GetGamepadSensorDataRate(SDL_Gamepad gamepad, SDL_SensorType type);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadSensorData")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetGamepadSensorData(SDL_Gamepad gamepad, SDL_SensorType type, float* data, int num_values);

	[LibraryImport(LibName, EntryPoint = "SDL_RumbleGamepad")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RumbleGamepad(SDL_Gamepad gamepad, ushort low_frequency_rumble, ushort high_frequency_rumble, uint duration_ms);

	[LibraryImport(LibName, EntryPoint = "SDL_RumbleGamepadTriggers")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RumbleGamepadTriggers(SDL_Gamepad gamepad, ushort left_rumble, ushort right_rumble, uint duration_ms);

	[LibraryImport(LibName, EntryPoint = "SDL_SetGamepadLED")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetGamepadLED(SDL_Gamepad gamepad, byte red, byte green, byte blue);

	[LibraryImport(LibName, EntryPoint = "SDL_SendGamepadEffect")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SendGamepadEffect(SDL_Gamepad gamepad, nint data, int size);

	[LibraryImport(LibName, EntryPoint = "SDL_CloseGamepad")]
	public static partial void SDL_CloseGamepad(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForButton")]
	public static partial byte* SDL_GetGamepadAppleSFSymbolsNameForButtonPtr(SDL_Gamepad gamepad, SDL_GamepadButton button);

	public static string? SDL_GetGamepadAppleSFSymbolsNameForButton(SDL_Gamepad gamepad, SDL_GamepadButton button)
	{
		return ConvertToManaged(SDL_GetGamepadAppleSFSymbolsNameForButtonPtr(gamepad, button));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForAxis")]
	public static partial byte* SDL_GetGamepadAppleSFSymbolsNameForAxisPtr(SDL_Gamepad gamepad, SDL_GamepadAxis axis);

	public static string? SDL_GetGamepadAppleSFSymbolsNameForAxis(SDL_Gamepad gamepad, SDL_GamepadAxis axis)
	{
		return ConvertToManaged(SDL_GetGamepadAppleSFSymbolsNameForAxisPtr(gamepad, axis));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_StringToGUID")]
	public static partial Guid SDL_StringToGUID(byte* pchGUID);

	[LibraryImport(LibName, EntryPoint = "SDL_StringToGUID")]
	public static partial Guid SDL_StringToGUID(ReadOnlySpan<byte> pchGUID);

	[LibraryImport(LibName, EntryPoint = "SDL_StringToGUID")]
	public static partial Guid SDL_StringToGUID([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> pchGUID);

	[LibraryImport(LibName, EntryPoint = "SDL_GetHaptics")]
	public static partial SDL_HapticID* SDL_GetHaptics(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetHapticNameForID")]
	public static partial byte* SDL_GetHapticNameForIDPtr(SDL_HapticID instance_id);

	public static string? SDL_GetHapticNameForID(SDL_HapticID instance_id)
	{
		return ConvertToManaged(SDL_GetHapticNameForIDPtr(instance_id));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_OpenHaptic")]
	public static partial SDL_Haptic SDL_OpenHaptic(SDL_HapticID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetHapticFromID")]
	public static partial SDL_Haptic SDL_GetHapticFromID(SDL_HapticID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetHapticID")]
	public static partial SDL_HapticID SDL_GetHapticID(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_GetHapticName")]
	public static partial byte* SDL_GetHapticNamePtr(SDL_Haptic haptic);

	public static string? SDL_GetHapticName(SDL_Haptic haptic)
	{
		return ConvertToManaged(SDL_GetHapticNamePtr(haptic));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_IsMouseHaptic")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_IsMouseHaptic();

	[LibraryImport(LibName, EntryPoint = "SDL_OpenHapticFromMouse")]
	public static partial SDL_Haptic SDL_OpenHapticFromMouse();

	[LibraryImport(LibName, EntryPoint = "SDL_IsJoystickHaptic")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_IsJoystickHaptic(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenHapticFromJoystick")]
	public static partial SDL_Haptic SDL_OpenHapticFromJoystick(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_CloseHaptic")]
	public static partial void SDL_CloseHaptic(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_GetMaxHapticEffects")]
	public static partial int SDL_GetMaxHapticEffects(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_GetMaxHapticEffectsPlaying")]
	public static partial int SDL_GetMaxHapticEffectsPlaying(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_GetHapticFeatures")]
	public static partial uint SDL_GetHapticFeatures(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumHapticAxes")]
	public static partial int SDL_GetNumHapticAxes(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_HapticEffectSupported")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HapticEffectSupported(SDL_Haptic haptic, SDL_HapticEffect* effect);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateHapticEffect")]
	public static partial int SDL_CreateHapticEffect(SDL_Haptic haptic, SDL_HapticEffect* effect);

	[LibraryImport(LibName, EntryPoint = "SDL_UpdateHapticEffect")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_UpdateHapticEffect(SDL_Haptic haptic, int effect, SDL_HapticEffect* data);

	[LibraryImport(LibName, EntryPoint = "SDL_RunHapticEffect")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RunHapticEffect(SDL_Haptic haptic, int effect, uint iterations);

	[LibraryImport(LibName, EntryPoint = "SDL_StopHapticEffect")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_StopHapticEffect(SDL_Haptic haptic, int effect);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyHapticEffect")]
	public static partial void SDL_DestroyHapticEffect(SDL_Haptic haptic, int effect);

	[LibraryImport(LibName, EntryPoint = "SDL_GetHapticEffectStatus")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetHapticEffectStatus(SDL_Haptic haptic, int effect);

	[LibraryImport(LibName, EntryPoint = "SDL_SetHapticGain")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetHapticGain(SDL_Haptic haptic, int gain);

	[LibraryImport(LibName, EntryPoint = "SDL_SetHapticAutocenter")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetHapticAutocenter(SDL_Haptic haptic, int autocenter);

	[LibraryImport(LibName, EntryPoint = "SDL_PauseHaptic")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_PauseHaptic(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_ResumeHaptic")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ResumeHaptic(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_StopHapticEffects")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_StopHapticEffects(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_HapticRumbleSupported")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HapticRumbleSupported(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_InitHapticRumble")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_InitHapticRumble(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_PlayHapticRumble")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_PlayHapticRumble(SDL_Haptic haptic, float strength, uint length);

	[LibraryImport(LibName, EntryPoint = "SDL_StopHapticRumble")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_StopHapticRumble(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_hid_init")]
	public static partial int SDL_hid_init();

	[LibraryImport(LibName, EntryPoint = "SDL_hid_exit")]
	public static partial int SDL_hid_exit();

	[LibraryImport(LibName, EntryPoint = "SDL_hid_device_change_count")]
	public static partial uint SDL_hid_device_change_count();

	[LibraryImport(LibName, EntryPoint = "SDL_hid_enumerate")]
	public static partial SDL_hid_device_info* SDL_hid_enumerate(ushort vendor_id, ushort product_id);

	[LibraryImport(LibName, EntryPoint = "SDL_hid_free_enumeration")]
	public static partial void SDL_hid_free_enumeration(SDL_hid_device_info* devs);

	[LibraryImport(LibName, EntryPoint = "SDL_hid_open")]
	public static partial SDL_hid_device SDL_hid_open(ushort vendor_id, ushort product_id, char* serial_number);

	[LibraryImport(LibName, EntryPoint = "SDL_hid_open_path")]
	public static partial SDL_hid_device SDL_hid_open_path(byte* path);

	[LibraryImport(LibName, EntryPoint = "SDL_hid_open_path")]
	public static partial SDL_hid_device SDL_hid_open_path(ReadOnlySpan<byte> path);

	[LibraryImport(LibName, EntryPoint = "SDL_hid_open_path")]
	public static partial SDL_hid_device SDL_hid_open_path([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path);

	[LibraryImport(LibName, EntryPoint = "SDL_hid_write")]
	public static partial int SDL_hid_write(SDL_hid_device dev, byte* data, nuint length);

	[LibraryImport(LibName, EntryPoint = "SDL_hid_read_timeout")]
	public static partial int SDL_hid_read_timeout(SDL_hid_device dev, byte* data, nuint length, int milliseconds);

	[LibraryImport(LibName, EntryPoint = "SDL_hid_read")]
	public static partial int SDL_hid_read(SDL_hid_device dev, byte* data, nuint length);

	[LibraryImport(LibName, EntryPoint = "SDL_hid_set_nonblocking")]
	public static partial int SDL_hid_set_nonblocking(SDL_hid_device dev, int nonblock);

	[LibraryImport(LibName, EntryPoint = "SDL_hid_send_feature_report")]
	public static partial int SDL_hid_send_feature_report(SDL_hid_device dev, byte* data, nuint length);

	[LibraryImport(LibName, EntryPoint = "SDL_hid_get_feature_report")]
	public static partial int SDL_hid_get_feature_report(SDL_hid_device dev, byte* data, nuint length);

	[LibraryImport(LibName, EntryPoint = "SDL_hid_get_input_report")]
	public static partial int SDL_hid_get_input_report(SDL_hid_device dev, byte* data, nuint length);

	[LibraryImport(LibName, EntryPoint = "SDL_hid_close")]
	public static partial int SDL_hid_close(SDL_hid_device dev);

	[LibraryImport(LibName, EntryPoint = "SDL_hid_get_manufacturer_string")]
	public static partial int SDL_hid_get_manufacturer_string(SDL_hid_device dev, char* @string, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_hid_get_product_string")]
	public static partial int SDL_hid_get_product_string(SDL_hid_device dev, char* @string, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_hid_get_serial_number_string")]
	public static partial int SDL_hid_get_serial_number_string(SDL_hid_device dev, char* @string, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_hid_get_indexed_string")]
	public static partial int SDL_hid_get_indexed_string(SDL_hid_device dev, int string_index, char* @string, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_hid_get_device_info")]
	public static partial SDL_hid_device_info* SDL_hid_get_device_info(SDL_hid_device dev);

	[LibraryImport(LibName, EntryPoint = "SDL_hid_get_report_descriptor")]
	public static partial int SDL_hid_get_report_descriptor(SDL_hid_device dev, byte* buf, nuint buf_size);

	[LibraryImport(LibName, EntryPoint = "SDL_hid_ble_scan")]
	public static partial void SDL_hid_ble_scan([MarshalAs(UnmanagedType.U1)] bool active);

	[LibraryImport(LibName, EntryPoint = "SDL_SetHintWithPriority")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetHintWithPriority(byte* name, byte* value, SDL_HintPriority priority);

	[LibraryImport(LibName, EntryPoint = "SDL_SetHintWithPriority")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetHintWithPriority(ReadOnlySpan<byte> name, ReadOnlySpan<byte> value, SDL_HintPriority priority);

	[LibraryImport(LibName, EntryPoint = "SDL_SetHintWithPriority")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetHintWithPriority([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> value, SDL_HintPriority priority);

	[LibraryImport(LibName, EntryPoint = "SDL_SetHint")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetHint(byte* name, byte* value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetHint")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetHint(ReadOnlySpan<byte> name, ReadOnlySpan<byte> value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetHint")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetHint([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> value);

	[LibraryImport(LibName, EntryPoint = "SDL_ResetHint")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ResetHint(byte* name);

	[LibraryImport(LibName, EntryPoint = "SDL_ResetHint")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ResetHint(ReadOnlySpan<byte> name);

	[LibraryImport(LibName, EntryPoint = "SDL_ResetHint")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ResetHint([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name);

	[LibraryImport(LibName, EntryPoint = "SDL_ResetHints")]
	public static partial void SDL_ResetHints();

	[LibraryImport(LibName, EntryPoint = "SDL_GetHint")]
	public static partial byte* SDL_GetHintPtr(byte* name);

	public static string? SDL_GetHint(byte* name)
	{
		return ConvertToManaged(SDL_GetHintPtr(name));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetHint")]
	public static partial byte* SDL_GetHintPtr(ReadOnlySpan<byte> name);

	[LibraryImport(LibName, EntryPoint = "SDL_GetHint")]
	public static partial byte* SDL_GetHintPtr([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name);

	[LibraryImport(LibName, EntryPoint = "SDL_GetHintBoolean")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetHintBoolean(byte* name, [MarshalAs(UnmanagedType.U1)] bool default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_GetHintBoolean")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetHintBoolean(ReadOnlySpan<byte> name, [MarshalAs(UnmanagedType.U1)] bool default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_GetHintBoolean")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetHintBoolean([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, [MarshalAs(UnmanagedType.U1)] bool default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_AddHintCallback")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_AddHintCallback(byte* name, delegate* unmanaged<nint, byte*, byte*, byte*, void> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_AddHintCallback")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_AddHintCallback(ReadOnlySpan<byte> name, delegate* unmanaged<nint, byte*, byte*, byte*, void> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_AddHintCallback")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_AddHintCallback([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, delegate* unmanaged<nint, byte*, byte*, byte*, void> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_RemoveHintCallback")]
	public static partial void SDL_RemoveHintCallback(byte* name, delegate* unmanaged<nint, byte*, byte*, byte*, void> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_RemoveHintCallback")]
	public static partial void SDL_RemoveHintCallback(ReadOnlySpan<byte> name, delegate* unmanaged<nint, byte*, byte*, byte*, void> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_RemoveHintCallback")]
	public static partial void SDL_RemoveHintCallback([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, delegate* unmanaged<nint, byte*, byte*, byte*, void> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_Init")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_Init(SDL_InitFlags flags);

	[LibraryImport(LibName, EntryPoint = "SDL_InitSubSystem")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_InitSubSystem(SDL_InitFlags flags);

	[LibraryImport(LibName, EntryPoint = "SDL_QuitSubSystem")]
	public static partial void SDL_QuitSubSystem(SDL_InitFlags flags);

	[LibraryImport(LibName, EntryPoint = "SDL_WasInit")]
	public static partial SDL_InitFlags SDL_WasInit(SDL_InitFlags flags);

	[LibraryImport(LibName, EntryPoint = "SDL_Quit")]
	public static partial void SDL_Quit();

	[LibraryImport(LibName, EntryPoint = "SDL_SetAppMetadata")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetAppMetadata(byte* appname, byte* appversion, byte* appidentifier);

	[LibraryImport(LibName, EntryPoint = "SDL_SetAppMetadata")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetAppMetadata(ReadOnlySpan<byte> appname, ReadOnlySpan<byte> appversion, ReadOnlySpan<byte> appidentifier);

	[LibraryImport(LibName, EntryPoint = "SDL_SetAppMetadata")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetAppMetadata([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> appname, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> appversion, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> appidentifier);

	[LibraryImport(LibName, EntryPoint = "SDL_SetAppMetadataProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetAppMetadataProperty(byte* name, byte* value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetAppMetadataProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetAppMetadataProperty(ReadOnlySpan<byte> name, ReadOnlySpan<byte> value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetAppMetadataProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetAppMetadataProperty([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> value);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAppMetadataProperty")]
	public static partial byte* SDL_GetAppMetadataPropertyPtr(byte* name);

	public static string? SDL_GetAppMetadataProperty(byte* name)
	{
		return ConvertToManaged(SDL_GetAppMetadataPropertyPtr(name));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetAppMetadataProperty")]
	public static partial byte* SDL_GetAppMetadataPropertyPtr(ReadOnlySpan<byte> name);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAppMetadataProperty")]
	public static partial byte* SDL_GetAppMetadataPropertyPtr([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name);

	[LibraryImport(LibName, EntryPoint = "SDL_IOFromFile")]
	public static partial SDL_IOStream SDL_IOFromFile(byte* file, byte* mode);

	[LibraryImport(LibName, EntryPoint = "SDL_IOFromFile")]
	public static partial SDL_IOStream SDL_IOFromFile(ReadOnlySpan<byte> file, ReadOnlySpan<byte> mode);

	[LibraryImport(LibName, EntryPoint = "SDL_IOFromFile")]
	public static partial SDL_IOStream SDL_IOFromFile([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> file, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> mode);

	[LibraryImport(LibName, EntryPoint = "SDL_IOFromMem")]
	public static partial SDL_IOStream SDL_IOFromMem(nint mem, nuint size);

	[LibraryImport(LibName, EntryPoint = "SDL_IOFromConstMem")]
	public static partial SDL_IOStream SDL_IOFromConstMem(nint mem, nuint size);

	[LibraryImport(LibName, EntryPoint = "SDL_IOFromDynamicMem")]
	public static partial SDL_IOStream SDL_IOFromDynamicMem();

	[LibraryImport(LibName, EntryPoint = "SDL_OpenIO")]
	public static partial SDL_IOStream SDL_OpenIO(SDL_IOStreamInterface* iface, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_CloseIO")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CloseIO(SDL_IOStream context);

	[LibraryImport(LibName, EntryPoint = "SDL_GetIOProperties")]
	public static partial SDL_PropertiesID SDL_GetIOProperties(SDL_IOStream context);

	[LibraryImport(LibName, EntryPoint = "SDL_GetIOStatus")]
	public static partial SDL_IOStatus SDL_GetIOStatus(SDL_IOStream context);

	[LibraryImport(LibName, EntryPoint = "SDL_GetIOSize")]
	public static partial long SDL_GetIOSize(SDL_IOStream context);

	[LibraryImport(LibName, EntryPoint = "SDL_SeekIO")]
	public static partial long SDL_SeekIO(SDL_IOStream context, long offset, SDL_IOWhence whence);

	[LibraryImport(LibName, EntryPoint = "SDL_TellIO")]
	public static partial long SDL_TellIO(SDL_IOStream context);

	[LibraryImport(LibName, EntryPoint = "SDL_ReadIO")]
	public static partial nuint SDL_ReadIO(SDL_IOStream context, nint ptr, nuint size);

	[LibraryImport(LibName, EntryPoint = "SDL_WriteIO")]
	public static partial nuint SDL_WriteIO(SDL_IOStream context, nint ptr, nuint size);

	[LibraryImport(LibName, EntryPoint = "SDL_FlushIO")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_FlushIO(SDL_IOStream context);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadFile_IO")]
	public static partial nint SDL_LoadFile_IO(SDL_IOStream src, nuint* datasize, [MarshalAs(UnmanagedType.U1)] bool closeio);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadFile")]
	public static partial nint SDL_LoadFile(byte* file, nuint* datasize);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadFile")]
	public static partial nint SDL_LoadFile(ReadOnlySpan<byte> file, nuint* datasize);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadFile")]
	public static partial nint SDL_LoadFile([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> file, nuint* datasize);

	[LibraryImport(LibName, EntryPoint = "SDL_ReadU8")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ReadU8(SDL_IOStream src, byte* value);

	[LibraryImport(LibName, EntryPoint = "SDL_ReadS8")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ReadS8(SDL_IOStream src, sbyte* value);

	[LibraryImport(LibName, EntryPoint = "SDL_ReadU16LE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ReadU16LE(SDL_IOStream src, ushort* value);

	[LibraryImport(LibName, EntryPoint = "SDL_ReadS16LE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ReadS16LE(SDL_IOStream src, short* value);

	[LibraryImport(LibName, EntryPoint = "SDL_ReadU16BE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ReadU16BE(SDL_IOStream src, ushort* value);

	[LibraryImport(LibName, EntryPoint = "SDL_ReadS16BE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ReadS16BE(SDL_IOStream src, short* value);

	[LibraryImport(LibName, EntryPoint = "SDL_ReadU32LE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ReadU32LE(SDL_IOStream src, uint* value);

	[LibraryImport(LibName, EntryPoint = "SDL_ReadS32LE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ReadS32LE(SDL_IOStream src, int* value);

	[LibraryImport(LibName, EntryPoint = "SDL_ReadU32BE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ReadU32BE(SDL_IOStream src, uint* value);

	[LibraryImport(LibName, EntryPoint = "SDL_ReadS32BE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ReadS32BE(SDL_IOStream src, int* value);

	[LibraryImport(LibName, EntryPoint = "SDL_ReadU64LE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ReadU64LE(SDL_IOStream src, ulong* value);

	[LibraryImport(LibName, EntryPoint = "SDL_ReadS64LE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ReadS64LE(SDL_IOStream src, long* value);

	[LibraryImport(LibName, EntryPoint = "SDL_ReadU64BE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ReadU64BE(SDL_IOStream src, ulong* value);

	[LibraryImport(LibName, EntryPoint = "SDL_ReadS64BE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ReadS64BE(SDL_IOStream src, long* value);

	[LibraryImport(LibName, EntryPoint = "SDL_WriteU8")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WriteU8(SDL_IOStream dst, byte value);

	[LibraryImport(LibName, EntryPoint = "SDL_WriteS8")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WriteS8(SDL_IOStream dst, sbyte value);

	[LibraryImport(LibName, EntryPoint = "SDL_WriteU16LE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WriteU16LE(SDL_IOStream dst, ushort value);

	[LibraryImport(LibName, EntryPoint = "SDL_WriteS16LE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WriteS16LE(SDL_IOStream dst, short value);

	[LibraryImport(LibName, EntryPoint = "SDL_WriteU16BE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WriteU16BE(SDL_IOStream dst, ushort value);

	[LibraryImport(LibName, EntryPoint = "SDL_WriteS16BE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WriteS16BE(SDL_IOStream dst, short value);

	[LibraryImport(LibName, EntryPoint = "SDL_WriteU32LE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WriteU32LE(SDL_IOStream dst, uint value);

	[LibraryImport(LibName, EntryPoint = "SDL_WriteS32LE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WriteS32LE(SDL_IOStream dst, int value);

	[LibraryImport(LibName, EntryPoint = "SDL_WriteU32BE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WriteU32BE(SDL_IOStream dst, uint value);

	[LibraryImport(LibName, EntryPoint = "SDL_WriteS32BE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WriteS32BE(SDL_IOStream dst, int value);

	[LibraryImport(LibName, EntryPoint = "SDL_WriteU64LE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WriteU64LE(SDL_IOStream dst, ulong value);

	[LibraryImport(LibName, EntryPoint = "SDL_WriteS64LE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WriteS64LE(SDL_IOStream dst, long value);

	[LibraryImport(LibName, EntryPoint = "SDL_WriteU64BE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WriteU64BE(SDL_IOStream dst, ulong value);

	[LibraryImport(LibName, EntryPoint = "SDL_WriteS64BE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WriteS64BE(SDL_IOStream dst, long value);

	[LibraryImport(LibName, EntryPoint = "SDL_LockJoysticks")]
	public static partial void SDL_LockJoysticks();

	[LibraryImport(LibName, EntryPoint = "SDL_UnlockJoysticks")]
	public static partial void SDL_UnlockJoysticks();

	[LibraryImport(LibName, EntryPoint = "SDL_HasJoystick")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasJoystick();

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoysticks")]
	public static partial SDL_JoystickID* SDL_GetJoysticks(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickNameForID")]
	public static partial byte* SDL_GetJoystickNameForIDPtr(SDL_JoystickID instance_id);

	public static string? SDL_GetJoystickNameForID(SDL_JoystickID instance_id)
	{
		return ConvertToManaged(SDL_GetJoystickNameForIDPtr(instance_id));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickPathForID")]
	public static partial byte* SDL_GetJoystickPathForIDPtr(SDL_JoystickID instance_id);

	public static string? SDL_GetJoystickPathForID(SDL_JoystickID instance_id)
	{
		return ConvertToManaged(SDL_GetJoystickPathForIDPtr(instance_id));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickPlayerIndexForID")]
	public static partial int SDL_GetJoystickPlayerIndexForID(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickGUIDForID")]
	public static partial Guid SDL_GetJoystickGUIDForID(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickVendorForID")]
	public static partial ushort SDL_GetJoystickVendorForID(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickProductForID")]
	public static partial ushort SDL_GetJoystickProductForID(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickProductVersionForID")]
	public static partial ushort SDL_GetJoystickProductVersionForID(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickTypeForID")]
	public static partial SDL_JoystickType SDL_GetJoystickTypeForID(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenJoystick")]
	public static partial SDL_Joystick SDL_OpenJoystick(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickFromID")]
	public static partial SDL_Joystick SDL_GetJoystickFromID(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickFromPlayerIndex")]
	public static partial SDL_Joystick SDL_GetJoystickFromPlayerIndex(int player_index);

	[LibraryImport(LibName, EntryPoint = "SDL_AttachVirtualJoystick")]
	public static partial SDL_JoystickID SDL_AttachVirtualJoystick(SDL_VirtualJoystickDesc* desc);

	[LibraryImport(LibName, EntryPoint = "SDL_DetachVirtualJoystick")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_DetachVirtualJoystick(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_IsJoystickVirtual")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_IsJoystickVirtual(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_SetJoystickVirtualAxis")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetJoystickVirtualAxis(SDL_Joystick joystick, int axis, short value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetJoystickVirtualBall")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetJoystickVirtualBall(SDL_Joystick joystick, int ball, short xrel, short yrel);

	[LibraryImport(LibName, EntryPoint = "SDL_SetJoystickVirtualButton")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetJoystickVirtualButton(SDL_Joystick joystick, int button, [MarshalAs(UnmanagedType.U1)] bool down);

	[LibraryImport(LibName, EntryPoint = "SDL_SetJoystickVirtualHat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetJoystickVirtualHat(SDL_Joystick joystick, int hat, byte value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetJoystickVirtualTouchpad")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetJoystickVirtualTouchpad(SDL_Joystick joystick, int touchpad, int finger, [MarshalAs(UnmanagedType.U1)] bool down, float x, float y, float pressure);

	[LibraryImport(LibName, EntryPoint = "SDL_SendJoystickVirtualSensorData")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SendJoystickVirtualSensorData(SDL_Joystick joystick, SDL_SensorType type, ulong sensor_timestamp, float* data, int num_values);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickProperties")]
	public static partial SDL_PropertiesID SDL_GetJoystickProperties(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickName")]
	public static partial byte* SDL_GetJoystickNamePtr(SDL_Joystick joystick);

	public static string? SDL_GetJoystickName(SDL_Joystick joystick)
	{
		return ConvertToManaged(SDL_GetJoystickNamePtr(joystick));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickPath")]
	public static partial byte* SDL_GetJoystickPathPtr(SDL_Joystick joystick);

	public static string? SDL_GetJoystickPath(SDL_Joystick joystick)
	{
		return ConvertToManaged(SDL_GetJoystickPathPtr(joystick));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickPlayerIndex")]
	public static partial int SDL_GetJoystickPlayerIndex(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_SetJoystickPlayerIndex")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetJoystickPlayerIndex(SDL_Joystick joystick, int player_index);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickGUID")]
	public static partial Guid SDL_GetJoystickGUID(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickVendor")]
	public static partial ushort SDL_GetJoystickVendor(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickProduct")]
	public static partial ushort SDL_GetJoystickProduct(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickProductVersion")]
	public static partial ushort SDL_GetJoystickProductVersion(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickFirmwareVersion")]
	public static partial ushort SDL_GetJoystickFirmwareVersion(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickSerial")]
	public static partial byte* SDL_GetJoystickSerialPtr(SDL_Joystick joystick);

	public static string? SDL_GetJoystickSerial(SDL_Joystick joystick)
	{
		return ConvertToManaged(SDL_GetJoystickSerialPtr(joystick));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickType")]
	public static partial SDL_JoystickType SDL_GetJoystickType(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickGUIDInfo")]
	public static partial void SDL_GetJoystickGUIDInfo(Guid guid, ushort* vendor, ushort* product, ushort* version, ushort* crc16);

	[LibraryImport(LibName, EntryPoint = "SDL_JoystickConnected")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_JoystickConnected(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickID")]
	public static partial SDL_JoystickID SDL_GetJoystickID(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumJoystickAxes")]
	public static partial int SDL_GetNumJoystickAxes(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumJoystickBalls")]
	public static partial int SDL_GetNumJoystickBalls(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumJoystickHats")]
	public static partial int SDL_GetNumJoystickHats(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumJoystickButtons")]
	public static partial int SDL_GetNumJoystickButtons(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_SetJoystickEventsEnabled")]
	public static partial void SDL_SetJoystickEventsEnabled([MarshalAs(UnmanagedType.U1)] bool enabled);

	[LibraryImport(LibName, EntryPoint = "SDL_JoystickEventsEnabled")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_JoystickEventsEnabled();

	[LibraryImport(LibName, EntryPoint = "SDL_UpdateJoysticks")]
	public static partial void SDL_UpdateJoysticks();

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickAxis")]
	public static partial short SDL_GetJoystickAxis(SDL_Joystick joystick, int axis);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickAxisInitialState")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetJoystickAxisInitialState(SDL_Joystick joystick, int axis, short* state);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickBall")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetJoystickBall(SDL_Joystick joystick, int ball, int* dx, int* dy);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickHat")]
	public static partial byte SDL_GetJoystickHat(SDL_Joystick joystick, int hat);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickButton")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetJoystickButton(SDL_Joystick joystick, int button);

	[LibraryImport(LibName, EntryPoint = "SDL_RumbleJoystick")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RumbleJoystick(SDL_Joystick joystick, ushort low_frequency_rumble, ushort high_frequency_rumble, uint duration_ms);

	[LibraryImport(LibName, EntryPoint = "SDL_RumbleJoystickTriggers")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RumbleJoystickTriggers(SDL_Joystick joystick, ushort left_rumble, ushort right_rumble, uint duration_ms);

	[LibraryImport(LibName, EntryPoint = "SDL_SetJoystickLED")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetJoystickLED(SDL_Joystick joystick, byte red, byte green, byte blue);

	[LibraryImport(LibName, EntryPoint = "SDL_SendJoystickEffect")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SendJoystickEffect(SDL_Joystick joystick, nint data, int size);

	[LibraryImport(LibName, EntryPoint = "SDL_CloseJoystick")]
	public static partial void SDL_CloseJoystick(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickConnectionState")]
	public static partial SDL_JoystickConnectionState SDL_GetJoystickConnectionState(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickPowerInfo")]
	public static partial SDL_PowerState SDL_GetJoystickPowerInfo(SDL_Joystick joystick, int* percent);

	[LibraryImport(LibName, EntryPoint = "SDL_HasKeyboard")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasKeyboard();

	[LibraryImport(LibName, EntryPoint = "SDL_GetKeyboards")]
	public static partial SDL_KeyboardID* SDL_GetKeyboards(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetKeyboardNameForID")]
	public static partial byte* SDL_GetKeyboardNameForIDPtr(SDL_KeyboardID instance_id);

	public static string? SDL_GetKeyboardNameForID(SDL_KeyboardID instance_id)
	{
		return ConvertToManaged(SDL_GetKeyboardNameForIDPtr(instance_id));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetKeyboardFocus")]
	public static partial SDL_Window SDL_GetKeyboardFocus();

	[LibraryImport(LibName, EntryPoint = "SDL_GetKeyboardState")]
	public static partial bool* SDL_GetKeyboardState(int* numkeys);

	[LibraryImport(LibName, EntryPoint = "SDL_ResetKeyboard")]
	public static partial void SDL_ResetKeyboard();

	[LibraryImport(LibName, EntryPoint = "SDL_GetModState")]
	public static partial SDL_Keymod SDL_GetModState();

	[LibraryImport(LibName, EntryPoint = "SDL_SetModState")]
	public static partial void SDL_SetModState(SDL_Keymod modstate);

	[LibraryImport(LibName, EntryPoint = "SDL_GetKeyFromScancode")]
	public static partial SDL_Keycode SDL_GetKeyFromScancode(SDL_Scancode scancode, SDL_Keymod modstate, [MarshalAs(UnmanagedType.U1)] bool key_event);

	[LibraryImport(LibName, EntryPoint = "SDL_GetScancodeFromKey")]
	public static partial SDL_Scancode SDL_GetScancodeFromKey(SDL_Keycode key, SDL_Keymod* modstate);

	[LibraryImport(LibName, EntryPoint = "SDL_SetScancodeName")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetScancodeName(SDL_Scancode scancode, byte* name);

	[LibraryImport(LibName, EntryPoint = "SDL_SetScancodeName")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetScancodeName(SDL_Scancode scancode, ReadOnlySpan<byte> name);

	[LibraryImport(LibName, EntryPoint = "SDL_SetScancodeName")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetScancodeName(SDL_Scancode scancode, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name);

	[LibraryImport(LibName, EntryPoint = "SDL_GetScancodeName")]
	public static partial byte* SDL_GetScancodeNamePtr(SDL_Scancode scancode);

	public static string? SDL_GetScancodeName(SDL_Scancode scancode)
	{
		return ConvertToManaged(SDL_GetScancodeNamePtr(scancode));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetScancodeFromName")]
	public static partial SDL_Scancode SDL_GetScancodeFromName(byte* name);

	[LibraryImport(LibName, EntryPoint = "SDL_GetScancodeFromName")]
	public static partial SDL_Scancode SDL_GetScancodeFromName(ReadOnlySpan<byte> name);

	[LibraryImport(LibName, EntryPoint = "SDL_GetScancodeFromName")]
	public static partial SDL_Scancode SDL_GetScancodeFromName([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name);

	[LibraryImport(LibName, EntryPoint = "SDL_GetKeyName")]
	public static partial byte* SDL_GetKeyNamePtr(SDL_Keycode key);

	public static string? SDL_GetKeyName(SDL_Keycode key)
	{
		return ConvertToManaged(SDL_GetKeyNamePtr(key));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetKeyFromName")]
	public static partial SDL_Keycode SDL_GetKeyFromName(byte* name);

	[LibraryImport(LibName, EntryPoint = "SDL_GetKeyFromName")]
	public static partial SDL_Keycode SDL_GetKeyFromName(ReadOnlySpan<byte> name);

	[LibraryImport(LibName, EntryPoint = "SDL_GetKeyFromName")]
	public static partial SDL_Keycode SDL_GetKeyFromName([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name);

	[LibraryImport(LibName, EntryPoint = "SDL_StartTextInput")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_StartTextInput(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_StartTextInputWithProperties")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_StartTextInputWithProperties(SDL_Window window, SDL_PropertiesID props);

	[LibraryImport(LibName, EntryPoint = "SDL_TextInputActive")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_TextInputActive(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_StopTextInput")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_StopTextInput(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_ClearComposition")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ClearComposition(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_SetTextInputArea")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetTextInputArea(SDL_Window window, Rectangle* rect, int cursor);

	[LibraryImport(LibName, EntryPoint = "SDL_GetTextInputArea")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetTextInputArea(SDL_Window window, Rectangle* rect, int* cursor);

	[LibraryImport(LibName, EntryPoint = "SDL_HasScreenKeyboardSupport")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasScreenKeyboardSupport();

	[LibraryImport(LibName, EntryPoint = "SDL_ScreenKeyboardShown")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ScreenKeyboardShown(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadObject")]
	public static partial nint SDL_LoadObject(byte* sofile);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadObject")]
	public static partial nint SDL_LoadObject(ReadOnlySpan<byte> sofile);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadObject")]
	public static partial nint SDL_LoadObject([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> sofile);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadFunction")]
	public static partial delegate* unmanaged<void>* SDL_LoadFunction(nint handle, byte* name);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadFunction")]
	public static partial delegate* unmanaged<void>* SDL_LoadFunction(nint handle, ReadOnlySpan<byte> name);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadFunction")]
	public static partial delegate* unmanaged<void>* SDL_LoadFunction(nint handle, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name);

	[LibraryImport(LibName, EntryPoint = "SDL_UnloadObject")]
	public static partial void SDL_UnloadObject(nint handle);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPreferredLocales")]
	public static partial SDL_Locale** SDL_GetPreferredLocales(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_SetLogPriorities")]
	public static partial void SDL_SetLogPriorities(SDL_LogPriority priority);

	[LibraryImport(LibName, EntryPoint = "SDL_SetLogPriority")]
	public static partial void SDL_SetLogPriority(int category, SDL_LogPriority priority);

	[LibraryImport(LibName, EntryPoint = "SDL_GetLogPriority")]
	public static partial SDL_LogPriority SDL_GetLogPriority(int category);

	[LibraryImport(LibName, EntryPoint = "SDL_ResetLogPriorities")]
	public static partial void SDL_ResetLogPriorities();

	[LibraryImport(LibName, EntryPoint = "SDL_SetLogPriorityPrefix")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetLogPriorityPrefix(SDL_LogPriority priority, byte* prefix);

	[LibraryImport(LibName, EntryPoint = "SDL_SetLogPriorityPrefix")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetLogPriorityPrefix(SDL_LogPriority priority, ReadOnlySpan<byte> prefix);

	[LibraryImport(LibName, EntryPoint = "SDL_SetLogPriorityPrefix")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetLogPriorityPrefix(SDL_LogPriority priority, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> prefix);

	[LibraryImport(LibName, EntryPoint = "SDL_Log")]
	public static partial void SDL_Log(byte* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_Log")]
	public static partial void SDL_Log(ReadOnlySpan<byte> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_Log")]
	public static partial void SDL_Log([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogTrace")]
	public static partial void SDL_LogTrace(int category, byte* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogTrace")]
	public static partial void SDL_LogTrace(int category, ReadOnlySpan<byte> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogTrace")]
	public static partial void SDL_LogTrace(int category, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogVerbose")]
	public static partial void SDL_LogVerbose(int category, byte* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogVerbose")]
	public static partial void SDL_LogVerbose(int category, ReadOnlySpan<byte> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogVerbose")]
	public static partial void SDL_LogVerbose(int category, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogDebug")]
	public static partial void SDL_LogDebug(int category, byte* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogDebug")]
	public static partial void SDL_LogDebug(int category, ReadOnlySpan<byte> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogDebug")]
	public static partial void SDL_LogDebug(int category, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogInfo")]
	public static partial void SDL_LogInfo(int category, byte* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogInfo")]
	public static partial void SDL_LogInfo(int category, ReadOnlySpan<byte> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogInfo")]
	public static partial void SDL_LogInfo(int category, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogWarn")]
	public static partial void SDL_LogWarn(int category, byte* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogWarn")]
	public static partial void SDL_LogWarn(int category, ReadOnlySpan<byte> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogWarn")]
	public static partial void SDL_LogWarn(int category, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogError")]
	public static partial void SDL_LogError(int category, byte* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogError")]
	public static partial void SDL_LogError(int category, ReadOnlySpan<byte> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogError")]
	public static partial void SDL_LogError(int category, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogCritical")]
	public static partial void SDL_LogCritical(int category, byte* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogCritical")]
	public static partial void SDL_LogCritical(int category, ReadOnlySpan<byte> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogCritical")]
	public static partial void SDL_LogCritical(int category, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogMessage")]
	public static partial void SDL_LogMessage(int category, SDL_LogPriority priority, byte* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogMessage")]
	public static partial void SDL_LogMessage(int category, SDL_LogPriority priority, ReadOnlySpan<byte> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogMessage")]
	public static partial void SDL_LogMessage(int category, SDL_LogPriority priority, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_GetLogOutputFunction")]
	public static partial void SDL_GetLogOutputFunction(delegate* unmanaged<nint, int, SDL_LogPriority, byte*, void> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_SetLogOutputFunction")]
	public static partial void SDL_SetLogOutputFunction(delegate* unmanaged<nint, int, SDL_LogPriority, byte*, void> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowMessageBox")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ShowMessageBox(SDL_MessageBoxData* messageboxdata, int* buttonid);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowSimpleMessageBox")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ShowSimpleMessageBox(SDL_MessageBoxFlags flags, byte* title, byte* message, SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowSimpleMessageBox")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ShowSimpleMessageBox(SDL_MessageBoxFlags flags, ReadOnlySpan<byte> title, ReadOnlySpan<byte> message, SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowSimpleMessageBox")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ShowSimpleMessageBox(SDL_MessageBoxFlags flags, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> title, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> message, SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_Metal_CreateView")]
	public static partial nint SDL_Metal_CreateView(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_Metal_DestroyView")]
	public static partial void SDL_Metal_DestroyView(nint view);

	[LibraryImport(LibName, EntryPoint = "SDL_Metal_GetLayer")]
	public static partial nint SDL_Metal_GetLayer(nint view);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenURL")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_OpenURL(byte* url);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenURL")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_OpenURL(ReadOnlySpan<byte> url);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenURL")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_OpenURL([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> url);

	[LibraryImport(LibName, EntryPoint = "SDL_HasMouse")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasMouse();

	[LibraryImport(LibName, EntryPoint = "SDL_GetMice")]
	public static partial SDL_MouseID* SDL_GetMice(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetMouseNameForID")]
	public static partial byte* SDL_GetMouseNameForIDPtr(SDL_MouseID instance_id);

	public static string? SDL_GetMouseNameForID(SDL_MouseID instance_id)
	{
		return ConvertToManaged(SDL_GetMouseNameForIDPtr(instance_id));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetMouseFocus")]
	public static partial SDL_Window SDL_GetMouseFocus();

	[LibraryImport(LibName, EntryPoint = "SDL_GetMouseState")]
	public static partial SDL_MouseButtonFlags SDL_GetMouseState(float* x, float* y);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGlobalMouseState")]
	public static partial SDL_MouseButtonFlags SDL_GetGlobalMouseState(float* x, float* y);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRelativeMouseState")]
	public static partial SDL_MouseButtonFlags SDL_GetRelativeMouseState(float* x, float* y);

	[LibraryImport(LibName, EntryPoint = "SDL_WarpMouseInWindow")]
	public static partial void SDL_WarpMouseInWindow(SDL_Window window, float x, float y);

	[LibraryImport(LibName, EntryPoint = "SDL_WarpMouseGlobal")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WarpMouseGlobal(float x, float y);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowRelativeMouseMode")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowRelativeMouseMode(SDL_Window window, [MarshalAs(UnmanagedType.U1)] bool enabled);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowRelativeMouseMode")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetWindowRelativeMouseMode(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_CaptureMouse")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CaptureMouse([MarshalAs(UnmanagedType.U1)] bool enabled);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateCursor")]
	public static partial SDL_Cursor SDL_CreateCursor(byte* data, byte* mask, int w, int h, int hot_x, int hot_y);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateColorCursor")]
	public static partial SDL_Cursor SDL_CreateColorCursor(SDL_Surface* surface, int hot_x, int hot_y);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateSystemCursor")]
	public static partial SDL_Cursor SDL_CreateSystemCursor(SDL_SystemCursor id);

	[LibraryImport(LibName, EntryPoint = "SDL_SetCursor")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetCursor(SDL_Cursor cursor);

	[LibraryImport(LibName, EntryPoint = "SDL_GetCursor")]
	public static partial SDL_Cursor SDL_GetCursor();

	[LibraryImport(LibName, EntryPoint = "SDL_GetDefaultCursor")]
	public static partial SDL_Cursor SDL_GetDefaultCursor();

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyCursor")]
	public static partial void SDL_DestroyCursor(SDL_Cursor cursor);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowCursor")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ShowCursor();

	[LibraryImport(LibName, EntryPoint = "SDL_HideCursor")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HideCursor();

	[LibraryImport(LibName, EntryPoint = "SDL_CursorVisible")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CursorVisible();

	[LibraryImport(LibName, EntryPoint = "SDL_CreateMutex")]
	public static partial SDL_Mutex SDL_CreateMutex();

	[LibraryImport(LibName, EntryPoint = "SDL_LockMutex")]
	public static partial void SDL_LockMutex(SDL_Mutex mutex);

	[LibraryImport(LibName, EntryPoint = "SDL_TryLockMutex")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_TryLockMutex(SDL_Mutex mutex);

	[LibraryImport(LibName, EntryPoint = "SDL_UnlockMutex")]
	public static partial void SDL_UnlockMutex(SDL_Mutex mutex);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyMutex")]
	public static partial void SDL_DestroyMutex(SDL_Mutex mutex);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateRWLock")]
	public static partial SDL_RWLock SDL_CreateRWLock();

	[LibraryImport(LibName, EntryPoint = "SDL_LockRWLockForReading")]
	public static partial void SDL_LockRWLockForReading(SDL_RWLock rwlock);

	[LibraryImport(LibName, EntryPoint = "SDL_LockRWLockForWriting")]
	public static partial void SDL_LockRWLockForWriting(SDL_RWLock rwlock);

	[LibraryImport(LibName, EntryPoint = "SDL_TryLockRWLockForReading")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_TryLockRWLockForReading(SDL_RWLock rwlock);

	[LibraryImport(LibName, EntryPoint = "SDL_TryLockRWLockForWriting")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_TryLockRWLockForWriting(SDL_RWLock rwlock);

	[LibraryImport(LibName, EntryPoint = "SDL_UnlockRWLock")]
	public static partial void SDL_UnlockRWLock(SDL_RWLock rwlock);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyRWLock")]
	public static partial void SDL_DestroyRWLock(SDL_RWLock rwlock);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateSemaphore")]
	public static partial SDL_Semaphore SDL_CreateSemaphore(uint initial_value);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroySemaphore")]
	public static partial void SDL_DestroySemaphore(SDL_Semaphore sem);

	[LibraryImport(LibName, EntryPoint = "SDL_WaitSemaphore")]
	public static partial void SDL_WaitSemaphore(SDL_Semaphore sem);

	[LibraryImport(LibName, EntryPoint = "SDL_TryWaitSemaphore")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_TryWaitSemaphore(SDL_Semaphore sem);

	[LibraryImport(LibName, EntryPoint = "SDL_WaitSemaphoreTimeout")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WaitSemaphoreTimeout(SDL_Semaphore sem, int timeoutMS);

	[LibraryImport(LibName, EntryPoint = "SDL_SignalSemaphore")]
	public static partial void SDL_SignalSemaphore(SDL_Semaphore sem);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSemaphoreValue")]
	public static partial uint SDL_GetSemaphoreValue(SDL_Semaphore sem);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateCondition")]
	public static partial SDL_Condition SDL_CreateCondition();

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyCondition")]
	public static partial void SDL_DestroyCondition(SDL_Condition cond);

	[LibraryImport(LibName, EntryPoint = "SDL_SignalCondition")]
	public static partial void SDL_SignalCondition(SDL_Condition cond);

	[LibraryImport(LibName, EntryPoint = "SDL_BroadcastCondition")]
	public static partial void SDL_BroadcastCondition(SDL_Condition cond);

	[LibraryImport(LibName, EntryPoint = "SDL_WaitCondition")]
	public static partial void SDL_WaitCondition(SDL_Condition cond, SDL_Mutex mutex);

	[LibraryImport(LibName, EntryPoint = "SDL_WaitConditionTimeout")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WaitConditionTimeout(SDL_Condition cond, SDL_Mutex mutex, int timeoutMS);

	[LibraryImport(LibName, EntryPoint = "SDL_ShouldInit")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ShouldInit(SDL_InitState* state);

	[LibraryImport(LibName, EntryPoint = "SDL_ShouldQuit")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ShouldQuit(SDL_InitState* state);

	[LibraryImport(LibName, EntryPoint = "SDL_SetInitialized")]
	public static partial void SDL_SetInitialized(SDL_InitState* state, [MarshalAs(UnmanagedType.U1)] bool initialized);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPixelFormatName")]
	public static partial byte* SDL_GetPixelFormatNamePtr(SDL_PixelFormat format);

	public static string? SDL_GetPixelFormatName(SDL_PixelFormat format)
	{
		return ConvertToManaged(SDL_GetPixelFormatNamePtr(format));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetMasksForPixelFormat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetMasksForPixelFormat(SDL_PixelFormat format, int* bpp, uint* Rmask, uint* Gmask, uint* Bmask, uint* Amask);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPixelFormatForMasks")]
	public static partial SDL_PixelFormat SDL_GetPixelFormatForMasks(int bpp, uint Rmask, uint Gmask, uint Bmask, uint Amask);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPixelFormatDetails")]
	public static partial SDL_PixelFormatDetails* SDL_GetPixelFormatDetails(SDL_PixelFormat format);

	[LibraryImport(LibName, EntryPoint = "SDL_CreatePalette")]
	public static partial SDL_Palette* SDL_CreatePalette(int ncolors);

	[LibraryImport(LibName, EntryPoint = "SDL_SetPaletteColors")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetPaletteColors(SDL_Palette* palette, SDL_Color* colors, int firstcolor, int ncolors);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyPalette")]
	public static partial void SDL_DestroyPalette(SDL_Palette* palette);

	[LibraryImport(LibName, EntryPoint = "SDL_MapRGB")]
	public static partial uint SDL_MapRGB(SDL_PixelFormatDetails* format, SDL_Palette* palette, byte r, byte g, byte b);

	[LibraryImport(LibName, EntryPoint = "SDL_MapRGBA")]
	public static partial uint SDL_MapRGBA(SDL_PixelFormatDetails* format, SDL_Palette* palette, byte r, byte g, byte b, byte a);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRGB")]
	public static partial void SDL_GetRGB(uint pixel, SDL_PixelFormatDetails* format, SDL_Palette* palette, byte* r, byte* g, byte* b);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRGBA")]
	public static partial void SDL_GetRGBA(uint pixel, SDL_PixelFormatDetails* format, SDL_Palette* palette, byte* r, byte* g, byte* b, byte* a);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPlatform")]
	public static partial byte* SDL_GetPlatformPtr();

	public static string? SDL_GetPlatform()
	{
		return ConvertToManaged(SDL_GetPlatformPtr());
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetPowerInfo")]
	public static partial SDL_PowerState SDL_GetPowerInfo(int* seconds, int* percent);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGlobalProperties")]
	public static partial SDL_PropertiesID SDL_GetGlobalProperties();

	[LibraryImport(LibName, EntryPoint = "SDL_CreateProperties")]
	public static partial SDL_PropertiesID SDL_CreateProperties();

	[LibraryImport(LibName, EntryPoint = "SDL_CopyProperties")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CopyProperties(SDL_PropertiesID src, SDL_PropertiesID dst);

	[LibraryImport(LibName, EntryPoint = "SDL_LockProperties")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_LockProperties(SDL_PropertiesID props);

	[LibraryImport(LibName, EntryPoint = "SDL_UnlockProperties")]
	public static partial void SDL_UnlockProperties(SDL_PropertiesID props);

	[LibraryImport(LibName, EntryPoint = "SDL_SetPointerPropertyWithCleanup")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetPointerPropertyWithCleanup(SDL_PropertiesID props, byte* name, nint value, delegate* unmanaged<nint, nint, void> cleanup, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_SetPointerPropertyWithCleanup")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetPointerPropertyWithCleanup(SDL_PropertiesID props, ReadOnlySpan<byte> name, nint value, delegate* unmanaged<nint, nint, void> cleanup, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_SetPointerPropertyWithCleanup")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetPointerPropertyWithCleanup(SDL_PropertiesID props, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, nint value, delegate* unmanaged<nint, nint, void> cleanup, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_SetPointerProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetPointerProperty(SDL_PropertiesID props, byte* name, nint value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetPointerProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetPointerProperty(SDL_PropertiesID props, ReadOnlySpan<byte> name, nint value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetPointerProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetPointerProperty(SDL_PropertiesID props, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, nint value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetStringProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetStringProperty(SDL_PropertiesID props, byte* name, byte* value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetStringProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetStringProperty(SDL_PropertiesID props, ReadOnlySpan<byte> name, ReadOnlySpan<byte> value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetStringProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetStringProperty(SDL_PropertiesID props, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetNumberProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetNumberProperty(SDL_PropertiesID props, byte* name, long value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetNumberProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetNumberProperty(SDL_PropertiesID props, ReadOnlySpan<byte> name, long value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetNumberProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetNumberProperty(SDL_PropertiesID props, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, long value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetFloatProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetFloatProperty(SDL_PropertiesID props, byte* name, float value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetFloatProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetFloatProperty(SDL_PropertiesID props, ReadOnlySpan<byte> name, float value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetFloatProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetFloatProperty(SDL_PropertiesID props, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, float value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetBooleanProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetBooleanProperty(SDL_PropertiesID props, byte* name, [MarshalAs(UnmanagedType.U1)] bool value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetBooleanProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetBooleanProperty(SDL_PropertiesID props, ReadOnlySpan<byte> name, [MarshalAs(UnmanagedType.U1)] bool value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetBooleanProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetBooleanProperty(SDL_PropertiesID props, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, [MarshalAs(UnmanagedType.U1)] bool value);

	[LibraryImport(LibName, EntryPoint = "SDL_HasProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasProperty(SDL_PropertiesID props, byte* name);

	[LibraryImport(LibName, EntryPoint = "SDL_HasProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasProperty(SDL_PropertiesID props, ReadOnlySpan<byte> name);

	[LibraryImport(LibName, EntryPoint = "SDL_HasProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasProperty(SDL_PropertiesID props, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPropertyType")]
	public static partial SDL_PropertyType SDL_GetPropertyType(SDL_PropertiesID props, byte* name);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPropertyType")]
	public static partial SDL_PropertyType SDL_GetPropertyType(SDL_PropertiesID props, ReadOnlySpan<byte> name);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPropertyType")]
	public static partial SDL_PropertyType SDL_GetPropertyType(SDL_PropertiesID props, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPointerProperty")]
	public static partial nint SDL_GetPointerProperty(SDL_PropertiesID props, byte* name, nint default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPointerProperty")]
	public static partial nint SDL_GetPointerProperty(SDL_PropertiesID props, ReadOnlySpan<byte> name, nint default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPointerProperty")]
	public static partial nint SDL_GetPointerProperty(SDL_PropertiesID props, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, nint default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_GetStringProperty")]
	public static partial byte* SDL_GetStringPropertyPtr(SDL_PropertiesID props, byte* name, byte* default_value);

	public static string? SDL_GetStringProperty(SDL_PropertiesID props, byte* name, byte* default_value)
	{
		return ConvertToManaged(SDL_GetStringPropertyPtr(props, name, default_value));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetStringProperty")]
	public static partial byte* SDL_GetStringPropertyPtr(SDL_PropertiesID props, ReadOnlySpan<byte> name, ReadOnlySpan<byte> default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_GetStringProperty")]
	public static partial byte* SDL_GetStringPropertyPtr(SDL_PropertiesID props, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumberProperty")]
	public static partial long SDL_GetNumberProperty(SDL_PropertiesID props, byte* name, long default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumberProperty")]
	public static partial long SDL_GetNumberProperty(SDL_PropertiesID props, ReadOnlySpan<byte> name, long default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumberProperty")]
	public static partial long SDL_GetNumberProperty(SDL_PropertiesID props, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, long default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_GetFloatProperty")]
	public static partial float SDL_GetFloatProperty(SDL_PropertiesID props, byte* name, float default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_GetFloatProperty")]
	public static partial float SDL_GetFloatProperty(SDL_PropertiesID props, ReadOnlySpan<byte> name, float default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_GetFloatProperty")]
	public static partial float SDL_GetFloatProperty(SDL_PropertiesID props, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, float default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_GetBooleanProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetBooleanProperty(SDL_PropertiesID props, byte* name, [MarshalAs(UnmanagedType.U1)] bool default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_GetBooleanProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetBooleanProperty(SDL_PropertiesID props, ReadOnlySpan<byte> name, [MarshalAs(UnmanagedType.U1)] bool default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_GetBooleanProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetBooleanProperty(SDL_PropertiesID props, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, [MarshalAs(UnmanagedType.U1)] bool default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_ClearProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ClearProperty(SDL_PropertiesID props, byte* name);

	[LibraryImport(LibName, EntryPoint = "SDL_ClearProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ClearProperty(SDL_PropertiesID props, ReadOnlySpan<byte> name);

	[LibraryImport(LibName, EntryPoint = "SDL_ClearProperty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ClearProperty(SDL_PropertiesID props, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name);

	[LibraryImport(LibName, EntryPoint = "SDL_EnumerateProperties")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_EnumerateProperties(SDL_PropertiesID props, delegate* unmanaged<nint, SDL_PropertiesID, byte*, void> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyProperties")]
	public static partial void SDL_DestroyProperties(SDL_PropertiesID props);

	[LibraryImport(LibName, EntryPoint = "SDL_RectToFRect")]
	public static partial void SDL_RectToFRect(Rectangle* rect, RectangleF* frect);

	[LibraryImport(LibName, EntryPoint = "SDL_PointInRect")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_PointInRect(Point* p, Rectangle* r);

	[LibraryImport(LibName, EntryPoint = "SDL_RectEmpty")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RectEmpty(Rectangle* r);

	[LibraryImport(LibName, EntryPoint = "SDL_RectsEqual")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RectsEqual(Rectangle* a, Rectangle* b);

	[LibraryImport(LibName, EntryPoint = "SDL_HasRectIntersection")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasRectIntersection(Rectangle* A, Rectangle* B);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRectIntersection")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetRectIntersection(Rectangle* A, Rectangle* B, Rectangle* result);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRectUnion")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetRectUnion(Rectangle* A, Rectangle* B, Rectangle* result);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRectEnclosingPoints")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetRectEnclosingPoints(Point* points, int count, Rectangle* clip, Rectangle* result);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRectAndLineIntersection")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetRectAndLineIntersection(Rectangle* rect, int* X1, int* Y1, int* X2, int* Y2);

	[LibraryImport(LibName, EntryPoint = "SDL_PointInRectFloat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_PointInRectFloat(PointF* p, RectangleF* r);

	[LibraryImport(LibName, EntryPoint = "SDL_RectEmptyFloat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RectEmptyFloat(RectangleF* r);

	[LibraryImport(LibName, EntryPoint = "SDL_RectsEqualEpsilon")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RectsEqualEpsilon(RectangleF* a, RectangleF* b, float epsilon);

	[LibraryImport(LibName, EntryPoint = "SDL_RectsEqualFloat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RectsEqualFloat(RectangleF* a, RectangleF* b);

	[LibraryImport(LibName, EntryPoint = "SDL_HasRectIntersectionFloat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HasRectIntersectionFloat(RectangleF* A, RectangleF* B);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRectIntersectionFloat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetRectIntersectionFloat(RectangleF* A, RectangleF* B, RectangleF* result);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRectUnionFloat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetRectUnionFloat(RectangleF* A, RectangleF* B, RectangleF* result);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRectEnclosingPointsFloat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetRectEnclosingPointsFloat(PointF* points, int count, RectangleF* clip, RectangleF* result);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRectAndLineIntersectionFloat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetRectAndLineIntersectionFloat(RectangleF* rect, float* X1, float* Y1, float* X2, float* Y2);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumRenderDrivers")]
	public static partial int SDL_GetNumRenderDrivers();

	[LibraryImport(LibName, EntryPoint = "SDL_GetRenderDriver")]
	public static partial byte* SDL_GetRenderDriverPtr(int index);

	public static string? SDL_GetRenderDriver(int index)
	{
		return ConvertToManaged(SDL_GetRenderDriverPtr(index));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_CreateWindowAndRenderer")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CreateWindowAndRenderer(byte* title, int width, int height, SDL_WindowFlags window_flags, SDL_Window window, SDL_Renderer renderer);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateWindowAndRenderer")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CreateWindowAndRenderer(ReadOnlySpan<byte> title, int width, int height, SDL_WindowFlags window_flags, SDL_Window window, SDL_Renderer renderer);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateWindowAndRenderer")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CreateWindowAndRenderer([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> title, int width, int height, SDL_WindowFlags window_flags, SDL_Window window, SDL_Renderer renderer);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateRenderer")]
	public static partial SDL_Renderer SDL_CreateRenderer(SDL_Window window, byte* name);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateRenderer")]
	public static partial SDL_Renderer SDL_CreateRenderer(SDL_Window window, ReadOnlySpan<byte> name);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateRenderer")]
	public static partial SDL_Renderer SDL_CreateRenderer(SDL_Window window, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateRendererWithProperties")]
	public static partial SDL_Renderer SDL_CreateRendererWithProperties(SDL_PropertiesID props);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateSoftwareRenderer")]
	public static partial SDL_Renderer SDL_CreateSoftwareRenderer(SDL_Surface* surface);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRenderer")]
	public static partial SDL_Renderer SDL_GetRenderer(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRenderWindow")]
	public static partial SDL_Window SDL_GetRenderWindow(SDL_Renderer renderer);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRendererName")]
	public static partial byte* SDL_GetRendererNamePtr(SDL_Renderer renderer);

	public static string? SDL_GetRendererName(SDL_Renderer renderer)
	{
		return ConvertToManaged(SDL_GetRendererNamePtr(renderer));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetRendererProperties")]
	public static partial SDL_PropertiesID SDL_GetRendererProperties(SDL_Renderer renderer);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRenderOutputSize")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetRenderOutputSize(SDL_Renderer renderer, out int w, out int h);

	[LibraryImport(LibName, EntryPoint = "SDL_GetCurrentRenderOutputSize")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetCurrentRenderOutputSize(SDL_Renderer renderer, out int w, out int h);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateTexture")]
	public static partial SDL_Texture SDL_CreateTexture(SDL_Renderer renderer, SDL_PixelFormat format, SDL_TextureAccess access, int w, int h);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateTextureFromSurface")]
	public static partial SDL_Texture SDL_CreateTextureFromSurface(SDL_Renderer renderer, SDL_Surface* surface);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateTextureWithProperties")]
	public static partial SDL_Texture SDL_CreateTextureWithProperties(SDL_Renderer renderer, SDL_PropertiesID props);

	[LibraryImport(LibName, EntryPoint = "SDL_GetTextureProperties")]
	public static partial SDL_PropertiesID SDL_GetTextureProperties(SDL_Texture texture);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRendererFromTexture")]
	public static partial SDL_Renderer SDL_GetRendererFromTexture(SDL_Texture texture);

	[LibraryImport(LibName, EntryPoint = "SDL_GetTextureSize")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetTextureSize(SDL_Texture texture, float* w, float* h);

	[LibraryImport(LibName, EntryPoint = "SDL_SetTextureColorMod")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetTextureColorMod(SDL_Texture texture, byte r, byte g, byte b);

	[LibraryImport(LibName, EntryPoint = "SDL_SetTextureColorModFloat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetTextureColorModFloat(SDL_Texture texture, float r, float g, float b);

	[LibraryImport(LibName, EntryPoint = "SDL_GetTextureColorMod")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetTextureColorMod(SDL_Texture texture, byte* r, byte* g, byte* b);

	[LibraryImport(LibName, EntryPoint = "SDL_GetTextureColorModFloat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetTextureColorModFloat(SDL_Texture texture, float* r, float* g, float* b);

	[LibraryImport(LibName, EntryPoint = "SDL_SetTextureAlphaMod")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetTextureAlphaMod(SDL_Texture texture, byte alpha);

	[LibraryImport(LibName, EntryPoint = "SDL_SetTextureAlphaModFloat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetTextureAlphaModFloat(SDL_Texture texture, float alpha);

	[LibraryImport(LibName, EntryPoint = "SDL_GetTextureAlphaMod")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetTextureAlphaMod(SDL_Texture texture, byte* alpha);

	[LibraryImport(LibName, EntryPoint = "SDL_GetTextureAlphaModFloat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetTextureAlphaModFloat(SDL_Texture texture, float* alpha);

	[LibraryImport(LibName, EntryPoint = "SDL_SetTextureBlendMode")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetTextureBlendMode(SDL_Texture texture, SDL_BlendMode blendMode);

	[LibraryImport(LibName, EntryPoint = "SDL_GetTextureBlendMode")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetTextureBlendMode(SDL_Texture texture, SDL_BlendMode* blendMode);

	[LibraryImport(LibName, EntryPoint = "SDL_SetTextureScaleMode")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetTextureScaleMode(SDL_Texture texture, SDL_ScaleMode scaleMode);

	[LibraryImport(LibName, EntryPoint = "SDL_GetTextureScaleMode")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetTextureScaleMode(SDL_Texture texture, SDL_ScaleMode* scaleMode);

	[LibraryImport(LibName, EntryPoint = "SDL_UpdateTexture")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_UpdateTexture(SDL_Texture texture, Rectangle* rect, nint pixels, int pitch);

	[LibraryImport(LibName, EntryPoint = "SDL_UpdateYUVTexture")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_UpdateYUVTexture(SDL_Texture texture, Rectangle* rect, byte* Yplane, int Ypitch, byte* Uplane, int Upitch, byte* Vplane, int Vpitch);

	[LibraryImport(LibName, EntryPoint = "SDL_UpdateNVTexture")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_UpdateNVTexture(SDL_Texture texture, Rectangle* rect, byte* Yplane, int Ypitch, byte* UVplane, int UVpitch);

	[LibraryImport(LibName, EntryPoint = "SDL_LockTexture")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_LockTexture(SDL_Texture texture, Rectangle* rect, nint pixels, int* pitch);

	[LibraryImport(LibName, EntryPoint = "SDL_LockTextureToSurface")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_LockTextureToSurface(SDL_Texture texture, Rectangle* rect, SDL_Surface** surface);

	[LibraryImport(LibName, EntryPoint = "SDL_UnlockTexture")]
	public static partial void SDL_UnlockTexture(SDL_Texture texture);

	[LibraryImport(LibName, EntryPoint = "SDL_SetRenderTarget")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetRenderTarget(SDL_Renderer renderer, SDL_Texture texture);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRenderTarget")]
	public static partial SDL_Texture SDL_GetRenderTarget(SDL_Renderer renderer);

	[LibraryImport(LibName, EntryPoint = "SDL_SetRenderLogicalPresentation")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetRenderLogicalPresentation(SDL_Renderer renderer, int w, int h, SDL_RendererLogicalPresentation mode);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRenderLogicalPresentation")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetRenderLogicalPresentation(SDL_Renderer renderer, out int w, out int h, SDL_RendererLogicalPresentation* mode);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRenderLogicalPresentationRect")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetRenderLogicalPresentationRect(SDL_Renderer renderer, RectangleF* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_RenderCoordinatesFromWindow")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenderCoordinatesFromWindow(SDL_Renderer renderer, float window_x, float window_y, float* x, float* y);

	[LibraryImport(LibName, EntryPoint = "SDL_RenderCoordinatesToWindow")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenderCoordinatesToWindow(SDL_Renderer renderer, float x, float y, float* window_x, float* window_y);

	[LibraryImport(LibName, EntryPoint = "SDL_ConvertEventToRenderCoordinates")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ConvertEventToRenderCoordinates(SDL_Renderer renderer, SDL_Event* @event);

	[LibraryImport(LibName, EntryPoint = "SDL_SetRenderViewport")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetRenderViewport(SDL_Renderer renderer, Rectangle* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRenderViewport")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetRenderViewport(SDL_Renderer renderer, Rectangle* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_RenderViewportSet")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenderViewportSet(SDL_Renderer renderer);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRenderSafeArea")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetRenderSafeArea(SDL_Renderer renderer, Rectangle* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_SetRenderClipRect")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetRenderClipRect(SDL_Renderer renderer, Rectangle* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRenderClipRect")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetRenderClipRect(SDL_Renderer renderer, Rectangle* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_RenderClipEnabled")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenderClipEnabled(SDL_Renderer renderer);

	[LibraryImport(LibName, EntryPoint = "SDL_SetRenderScale")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetRenderScale(SDL_Renderer renderer, float scaleX, float scaleY);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRenderScale")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetRenderScale(SDL_Renderer renderer, float* scaleX, float* scaleY);

	[LibraryImport(LibName, EntryPoint = "SDL_SetRenderDrawColor")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetRenderDrawColor(SDL_Renderer renderer, byte r, byte g, byte b, byte a);

	[LibraryImport(LibName, EntryPoint = "SDL_SetRenderDrawColorFloat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetRenderDrawColorFloat(SDL_Renderer renderer, float r, float g, float b, float a);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRenderDrawColor")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetRenderDrawColor(SDL_Renderer renderer, byte* r, byte* g, byte* b, byte* a);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRenderDrawColorFloat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetRenderDrawColorFloat(SDL_Renderer renderer, float* r, float* g, float* b, float* a);

	[LibraryImport(LibName, EntryPoint = "SDL_SetRenderColorScale")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetRenderColorScale(SDL_Renderer renderer, float scale);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRenderColorScale")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetRenderColorScale(SDL_Renderer renderer, float* scale);

	[LibraryImport(LibName, EntryPoint = "SDL_SetRenderDrawBlendMode")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetRenderDrawBlendMode(SDL_Renderer renderer, SDL_BlendMode blendMode);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRenderDrawBlendMode")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetRenderDrawBlendMode(SDL_Renderer renderer, SDL_BlendMode* blendMode);

	[LibraryImport(LibName, EntryPoint = "SDL_RenderClear")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenderClear(SDL_Renderer renderer);

	[LibraryImport(LibName, EntryPoint = "SDL_RenderPoint")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenderPoint(SDL_Renderer renderer, float x, float y);

	[LibraryImport(LibName, EntryPoint = "SDL_RenderPoints")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenderPoints(SDL_Renderer renderer, PointF* points, int count);

	[LibraryImport(LibName, EntryPoint = "SDL_RenderLine")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenderLine(SDL_Renderer renderer, float x1, float y1, float x2, float y2);

	[LibraryImport(LibName, EntryPoint = "SDL_RenderLines")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenderLines(SDL_Renderer renderer, PointF* points, int count);

	[LibraryImport(LibName, EntryPoint = "SDL_RenderRect")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenderRect(SDL_Renderer renderer, RectangleF* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_RenderRects")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenderRects(SDL_Renderer renderer, RectangleF* rects, int count);

	[LibraryImport(LibName, EntryPoint = "SDL_RenderFillRect")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenderFillRect(SDL_Renderer renderer, RectangleF* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_RenderFillRects")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenderFillRects(SDL_Renderer renderer, RectangleF* rects, int count);

	[LibraryImport(LibName, EntryPoint = "SDL_RenderTexture")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenderTexture(SDL_Renderer renderer, SDL_Texture texture, RectangleF* srcrect, RectangleF* dstrect);

	[LibraryImport(LibName, EntryPoint = "SDL_RenderTextureRotated")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenderTextureRotated(SDL_Renderer renderer, SDL_Texture texture, RectangleF* srcrect, RectangleF* dstrect, double angle, PointF* center, SDL_FlipMode flip);

	[LibraryImport(LibName, EntryPoint = "SDL_RenderTextureTiled")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenderTextureTiled(SDL_Renderer renderer, SDL_Texture texture, RectangleF* srcrect, float scale, RectangleF* dstrect);

	[LibraryImport(LibName, EntryPoint = "SDL_RenderTexture9Grid")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenderTexture9Grid(SDL_Renderer renderer, SDL_Texture texture, RectangleF* srcrect, float left_width, float right_width, float top_height, float bottom_height, float scale, RectangleF* dstrect);

	[LibraryImport(LibName, EntryPoint = "SDL_RenderGeometry")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenderGeometry(SDL_Renderer renderer, SDL_Texture texture, SDL_Vertex* vertices, int num_vertices, int* indices, int num_indices);

	[LibraryImport(LibName, EntryPoint = "SDL_RenderGeometryRaw")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenderGeometryRaw(SDL_Renderer renderer, SDL_Texture texture, float* xy, int xy_stride, SDL_FColor* color, int color_stride, float* uv, int uv_stride, int num_vertices, nint indices, int num_indices, int size_indices);

	[LibraryImport(LibName, EntryPoint = "SDL_RenderReadPixels")]
	public static partial SDL_Surface* SDL_RenderReadPixels(SDL_Renderer renderer, Rectangle* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_RenderPresent")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenderPresent(SDL_Renderer renderer);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyTexture")]
	public static partial void SDL_DestroyTexture(SDL_Texture texture);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyRenderer")]
	public static partial void SDL_DestroyRenderer(SDL_Renderer renderer);

	[LibraryImport(LibName, EntryPoint = "SDL_FlushRenderer")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_FlushRenderer(SDL_Renderer renderer);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRenderMetalLayer")]
	public static partial nint SDL_GetRenderMetalLayer(SDL_Renderer renderer);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRenderMetalCommandEncoder")]
	public static partial nint SDL_GetRenderMetalCommandEncoder(SDL_Renderer renderer);

	[LibraryImport(LibName, EntryPoint = "SDL_AddVulkanRenderSemaphores")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_AddVulkanRenderSemaphores(SDL_Renderer renderer, uint wait_stage_mask, long wait_semaphore, long signal_semaphore);

	[LibraryImport(LibName, EntryPoint = "SDL_SetRenderVSync")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetRenderVSync(SDL_Renderer renderer, int vsync);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRenderVSync")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetRenderVSync(SDL_Renderer renderer, int* vsync);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSensors")]
	public static partial SDL_SensorID* SDL_GetSensors(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSensorNameForID")]
	public static partial byte* SDL_GetSensorNameForIDPtr(SDL_SensorID instance_id);

	public static string? SDL_GetSensorNameForID(SDL_SensorID instance_id)
	{
		return ConvertToManaged(SDL_GetSensorNameForIDPtr(instance_id));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetSensorTypeForID")]
	public static partial SDL_SensorType SDL_GetSensorTypeForID(SDL_SensorID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSensorNonPortableTypeForID")]
	public static partial int SDL_GetSensorNonPortableTypeForID(SDL_SensorID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenSensor")]
	public static partial SDL_Sensor SDL_OpenSensor(SDL_SensorID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSensorFromID")]
	public static partial SDL_Sensor SDL_GetSensorFromID(SDL_SensorID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSensorProperties")]
	public static partial SDL_PropertiesID SDL_GetSensorProperties(SDL_Sensor sensor);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSensorName")]
	public static partial byte* SDL_GetSensorNamePtr(SDL_Sensor sensor);

	public static string? SDL_GetSensorName(SDL_Sensor sensor)
	{
		return ConvertToManaged(SDL_GetSensorNamePtr(sensor));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetSensorType")]
	public static partial SDL_SensorType SDL_GetSensorType(SDL_Sensor sensor);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSensorNonPortableType")]
	public static partial int SDL_GetSensorNonPortableType(SDL_Sensor sensor);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSensorID")]
	public static partial SDL_SensorID SDL_GetSensorID(SDL_Sensor sensor);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSensorData")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetSensorData(SDL_Sensor sensor, float* data, int num_values);

	[LibraryImport(LibName, EntryPoint = "SDL_CloseSensor")]
	public static partial void SDL_CloseSensor(SDL_Sensor sensor);

	[LibraryImport(LibName, EntryPoint = "SDL_UpdateSensors")]
	public static partial void SDL_UpdateSensors();

	[LibraryImport(LibName, EntryPoint = "SDL_malloc")]
	public static partial nint SDL_malloc(nuint size);

	[LibraryImport(LibName, EntryPoint = "SDL_calloc")]
	public static partial nint SDL_calloc(nuint nmemb, nuint size);

	[LibraryImport(LibName, EntryPoint = "SDL_realloc")]
	public static partial nint SDL_realloc(nint mem, nuint size);

	[LibraryImport(LibName, EntryPoint = "SDL_free")]
	public static partial void SDL_free(nint mem);

	[LibraryImport(LibName, EntryPoint = "SDL_GetOriginalMemoryFunctions")]
	public static partial void SDL_GetOriginalMemoryFunctions(delegate* unmanaged<nuint, nint> malloc_func, delegate* unmanaged<nuint, nuint, nint> calloc_func, delegate* unmanaged<nint, nuint, nint> realloc_func, delegate* unmanaged<nint, void> free_func);

	[LibraryImport(LibName, EntryPoint = "SDL_GetMemoryFunctions")]
	public static partial void SDL_GetMemoryFunctions(delegate* unmanaged<nuint, nint> malloc_func, delegate* unmanaged<nuint, nuint, nint> calloc_func, delegate* unmanaged<nint, nuint, nint> realloc_func, delegate* unmanaged<nint, void> free_func);

	[LibraryImport(LibName, EntryPoint = "SDL_SetMemoryFunctions")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetMemoryFunctions(delegate* unmanaged<nuint, nint> malloc_func, delegate* unmanaged<nuint, nuint, nint> calloc_func, delegate* unmanaged<nint, nuint, nint> realloc_func, delegate* unmanaged<nint, void> free_func);

	[LibraryImport(LibName, EntryPoint = "SDL_aligned_alloc")]
	public static partial nint SDL_aligned_alloc(nuint alignment, nuint size);

	[LibraryImport(LibName, EntryPoint = "SDL_aligned_free")]
	public static partial void SDL_aligned_free(nint mem);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumAllocations")]
	public static partial int SDL_GetNumAllocations();

	[LibraryImport(LibName, EntryPoint = "SDL_GetEnvironment")]
	public static partial SDL_Environment SDL_GetEnvironment();

	[LibraryImport(LibName, EntryPoint = "SDL_CreateEnvironment")]
	public static partial SDL_Environment SDL_CreateEnvironment([MarshalAs(UnmanagedType.U1)] bool populated);

	[LibraryImport(LibName, EntryPoint = "SDL_GetEnvironmentVariable")]
	public static partial byte* SDL_GetEnvironmentVariablePtr(SDL_Environment env, byte* name);

	public static string? SDL_GetEnvironmentVariable(SDL_Environment env, byte* name)
	{
		return ConvertToManaged(SDL_GetEnvironmentVariablePtr(env, name));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetEnvironmentVariable")]
	public static partial byte* SDL_GetEnvironmentVariablePtr(SDL_Environment env, ReadOnlySpan<byte> name);

	[LibraryImport(LibName, EntryPoint = "SDL_GetEnvironmentVariable")]
	public static partial byte* SDL_GetEnvironmentVariablePtr(SDL_Environment env, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name);

	[LibraryImport(LibName, EntryPoint = "SDL_GetEnvironmentVariables")]
	public static partial byte** SDL_GetEnvironmentVariables(SDL_Environment env);

	[LibraryImport(LibName, EntryPoint = "SDL_SetEnvironmentVariable")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetEnvironmentVariable(SDL_Environment env, byte* name, byte* value, [MarshalAs(UnmanagedType.U1)] bool overwrite);

	[LibraryImport(LibName, EntryPoint = "SDL_SetEnvironmentVariable")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetEnvironmentVariable(SDL_Environment env, ReadOnlySpan<byte> name, ReadOnlySpan<byte> value, [MarshalAs(UnmanagedType.U1)] bool overwrite);

	[LibraryImport(LibName, EntryPoint = "SDL_SetEnvironmentVariable")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetEnvironmentVariable(SDL_Environment env, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> value, [MarshalAs(UnmanagedType.U1)] bool overwrite);

	[LibraryImport(LibName, EntryPoint = "SDL_UnsetEnvironmentVariable")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_UnsetEnvironmentVariable(SDL_Environment env, byte* name);

	[LibraryImport(LibName, EntryPoint = "SDL_UnsetEnvironmentVariable")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_UnsetEnvironmentVariable(SDL_Environment env, ReadOnlySpan<byte> name);

	[LibraryImport(LibName, EntryPoint = "SDL_UnsetEnvironmentVariable")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_UnsetEnvironmentVariable(SDL_Environment env, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyEnvironment")]
	public static partial void SDL_DestroyEnvironment(SDL_Environment env);

	[LibraryImport(LibName, EntryPoint = "SDL_getenv")]
	public static partial byte* SDL_getenvPtr(byte* name);

	public static string? SDL_getenv(byte* name)
	{
		return ConvertToManaged(SDL_getenvPtr(name));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_getenv")]
	public static partial byte* SDL_getenvPtr(ReadOnlySpan<byte> name);

	[LibraryImport(LibName, EntryPoint = "SDL_getenv")]
	public static partial byte* SDL_getenvPtr([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name);

	[LibraryImport(LibName, EntryPoint = "SDL_getenv_unsafe")]
	public static partial byte* SDL_getenv_unsafePtr(byte* name);

	public static string? SDL_getenv_unsafe(byte* name)
	{
		return ConvertToManaged(SDL_getenv_unsafePtr(name));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_getenv_unsafe")]
	public static partial byte* SDL_getenv_unsafePtr(ReadOnlySpan<byte> name);

	[LibraryImport(LibName, EntryPoint = "SDL_getenv_unsafe")]
	public static partial byte* SDL_getenv_unsafePtr([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name);

	[LibraryImport(LibName, EntryPoint = "SDL_setenv_unsafe")]
	public static partial int SDL_setenv_unsafe(byte* name, byte* value, int overwrite);

	[LibraryImport(LibName, EntryPoint = "SDL_setenv_unsafe")]
	public static partial int SDL_setenv_unsafe(ReadOnlySpan<byte> name, ReadOnlySpan<byte> value, int overwrite);

	[LibraryImport(LibName, EntryPoint = "SDL_setenv_unsafe")]
	public static partial int SDL_setenv_unsafe([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> value, int overwrite);

	[LibraryImport(LibName, EntryPoint = "SDL_unsetenv_unsafe")]
	public static partial int SDL_unsetenv_unsafe(byte* name);

	[LibraryImport(LibName, EntryPoint = "SDL_unsetenv_unsafe")]
	public static partial int SDL_unsetenv_unsafe(ReadOnlySpan<byte> name);

	[LibraryImport(LibName, EntryPoint = "SDL_unsetenv_unsafe")]
	public static partial int SDL_unsetenv_unsafe([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name);

	[LibraryImport(LibName, EntryPoint = "SDL_qsort")]
	public static partial void SDL_qsort(nint @base, nuint nmemb, nuint size, delegate* unmanaged<nint, nint, int> compare);

	[LibraryImport(LibName, EntryPoint = "SDL_bsearch")]
	public static partial nint SDL_bsearch(nint key, nint @base, nuint nmemb, nuint size, delegate* unmanaged<nint, nint, int> compare);

	[LibraryImport(LibName, EntryPoint = "SDL_qsort_r")]
	public static partial void SDL_qsort_r(nint @base, nuint nmemb, nuint size, delegate* unmanaged<nint, nint, nint, int> compare, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_bsearch_r")]
	public static partial nint SDL_bsearch_r(nint key, nint @base, nuint nmemb, nuint size, delegate* unmanaged<nint, nint, nint, int> compare, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_abs")]
	public static partial int SDL_abs(int x);

	[LibraryImport(LibName, EntryPoint = "SDL_isalpha")]
	public static partial int SDL_isalpha(int x);

	[LibraryImport(LibName, EntryPoint = "SDL_isalnum")]
	public static partial int SDL_isalnum(int x);

	[LibraryImport(LibName, EntryPoint = "SDL_isblank")]
	public static partial int SDL_isblank(int x);

	[LibraryImport(LibName, EntryPoint = "SDL_iscntrl")]
	public static partial int SDL_iscntrl(int x);

	[LibraryImport(LibName, EntryPoint = "SDL_isdigit")]
	public static partial int SDL_isdigit(int x);

	[LibraryImport(LibName, EntryPoint = "SDL_isxdigit")]
	public static partial int SDL_isxdigit(int x);

	[LibraryImport(LibName, EntryPoint = "SDL_ispunct")]
	public static partial int SDL_ispunct(int x);

	[LibraryImport(LibName, EntryPoint = "SDL_isspace")]
	public static partial int SDL_isspace(int x);

	[LibraryImport(LibName, EntryPoint = "SDL_isupper")]
	public static partial int SDL_isupper(int x);

	[LibraryImport(LibName, EntryPoint = "SDL_islower")]
	public static partial int SDL_islower(int x);

	[LibraryImport(LibName, EntryPoint = "SDL_isprint")]
	public static partial int SDL_isprint(int x);

	[LibraryImport(LibName, EntryPoint = "SDL_isgraph")]
	public static partial int SDL_isgraph(int x);

	[LibraryImport(LibName, EntryPoint = "SDL_toupper")]
	public static partial int SDL_toupper(int x);

	[LibraryImport(LibName, EntryPoint = "SDL_tolower")]
	public static partial int SDL_tolower(int x);

	[LibraryImport(LibName, EntryPoint = "SDL_crc16")]
	public static partial ushort SDL_crc16(ushort crc, nint data, nuint len);

	[LibraryImport(LibName, EntryPoint = "SDL_crc32")]
	public static partial uint SDL_crc32(uint crc, nint data, nuint len);

	[LibraryImport(LibName, EntryPoint = "SDL_memcpy")]
	public static partial nint SDL_memcpy(nint dst, nint src, nuint len);

	[LibraryImport(LibName, EntryPoint = "SDL_memmove")]
	public static partial nint SDL_memmove(nint dst, nint src, nuint len);

	[LibraryImport(LibName, EntryPoint = "SDL_memset")]
	public static partial nint SDL_memset(nint dst, int c, nuint len);

	[LibraryImport(LibName, EntryPoint = "SDL_memset4")]
	public static partial nint SDL_memset4(nint dst, uint val, nuint dwords);

	[LibraryImport(LibName, EntryPoint = "SDL_memcmp")]
	public static partial int SDL_memcmp(nint s1, nint s2, nuint len);

	[LibraryImport(LibName, EntryPoint = "SDL_wcslen")]
	public static partial nuint SDL_wcslen(char* wstr);

	[LibraryImport(LibName, EntryPoint = "SDL_wcsnlen")]
	public static partial nuint SDL_wcsnlen(char* wstr, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_wcslcpy")]
	public static partial nuint SDL_wcslcpy(char* dst, char* src, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_wcslcat")]
	public static partial nuint SDL_wcslcat(char* dst, char* src, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_wcsdup")]
	public static partial char* SDL_wcsdup(char* wstr);

	[LibraryImport(LibName, EntryPoint = "SDL_wcsstr")]
	public static partial char* SDL_wcsstr(char* haystack, char* needle);

	[LibraryImport(LibName, EntryPoint = "SDL_wcsnstr")]
	public static partial char* SDL_wcsnstr(char* haystack, char* needle, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_wcscmp")]
	public static partial int SDL_wcscmp(char* str1, char* str2);

	[LibraryImport(LibName, EntryPoint = "SDL_wcsncmp")]
	public static partial int SDL_wcsncmp(char* str1, char* str2, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_wcscasecmp")]
	public static partial int SDL_wcscasecmp(char* str1, char* str2);

	[LibraryImport(LibName, EntryPoint = "SDL_wcsncasecmp")]
	public static partial int SDL_wcsncasecmp(char* str1, char* str2, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_wcstol")]
	public static partial global::System.Runtime.InteropServices.CLong SDL_wcstol(char* str, char** endp, int @base);

	[LibraryImport(LibName, EntryPoint = "SDL_strlen")]
	public static partial nuint SDL_strlen(byte* str);

	[LibraryImport(LibName, EntryPoint = "SDL_strlen")]
	public static partial nuint SDL_strlen(ReadOnlySpan<byte> str);

	[LibraryImport(LibName, EntryPoint = "SDL_strlen")]
	public static partial nuint SDL_strlen([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str);

	[LibraryImport(LibName, EntryPoint = "SDL_strnlen")]
	public static partial nuint SDL_strnlen(byte* str, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_strnlen")]
	public static partial nuint SDL_strnlen(ReadOnlySpan<byte> str, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_strnlen")]
	public static partial nuint SDL_strnlen([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_strlcpy")]
	public static partial nuint SDL_strlcpy(byte* dst, byte* src, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_strlcpy")]
	public static partial nuint SDL_strlcpy(ReadOnlySpan<byte> dst, ReadOnlySpan<byte> src, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_strlcpy")]
	public static partial nuint SDL_strlcpy([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> dst, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> src, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_utf8strlcpy")]
	public static partial nuint SDL_utf8strlcpy(byte* dst, byte* src, nuint dst_bytes);

	[LibraryImport(LibName, EntryPoint = "SDL_utf8strlcpy")]
	public static partial nuint SDL_utf8strlcpy(ReadOnlySpan<byte> dst, ReadOnlySpan<byte> src, nuint dst_bytes);

	[LibraryImport(LibName, EntryPoint = "SDL_utf8strlcpy")]
	public static partial nuint SDL_utf8strlcpy([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> dst, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> src, nuint dst_bytes);

	[LibraryImport(LibName, EntryPoint = "SDL_strlcat")]
	public static partial nuint SDL_strlcat(byte* dst, byte* src, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_strlcat")]
	public static partial nuint SDL_strlcat(ReadOnlySpan<byte> dst, ReadOnlySpan<byte> src, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_strlcat")]
	public static partial nuint SDL_strlcat([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> dst, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> src, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_strdup")]
	public static partial byte* SDL_strdupPtr(byte* str);

	public static string? SDL_strdup(byte* str)
	{
		byte* resultPtr = SDL_strdupPtr(str);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_strdup")]
	public static partial byte* SDL_strdupPtr(ReadOnlySpan<byte> str);

	[LibraryImport(LibName, EntryPoint = "SDL_strdup")]
	public static partial byte* SDL_strdupPtr([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str);

	[LibraryImport(LibName, EntryPoint = "SDL_strndup")]
	public static partial byte* SDL_strndupPtr(byte* str, nuint maxlen);

	public static string? SDL_strndup(byte* str, nuint maxlen)
	{
		byte* resultPtr = SDL_strndupPtr(str, maxlen);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_strndup")]
	public static partial byte* SDL_strndupPtr(ReadOnlySpan<byte> str, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_strndup")]
	public static partial byte* SDL_strndupPtr([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_strrev")]
	public static partial byte* SDL_strrevPtr(byte* str);

	public static string? SDL_strrev(byte* str)
	{
		byte* resultPtr = SDL_strrevPtr(str);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_strrev")]
	public static partial byte* SDL_strrevPtr(ReadOnlySpan<byte> str);

	[LibraryImport(LibName, EntryPoint = "SDL_strrev")]
	public static partial byte* SDL_strrevPtr([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str);

	[LibraryImport(LibName, EntryPoint = "SDL_strupr")]
	public static partial byte* SDL_struprPtr(byte* str);

	public static string? SDL_strupr(byte* str)
	{
		byte* resultPtr = SDL_struprPtr(str);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_strupr")]
	public static partial byte* SDL_struprPtr(ReadOnlySpan<byte> str);

	[LibraryImport(LibName, EntryPoint = "SDL_strupr")]
	public static partial byte* SDL_struprPtr([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str);

	[LibraryImport(LibName, EntryPoint = "SDL_strlwr")]
	public static partial byte* SDL_strlwrPtr(byte* str);

	public static string? SDL_strlwr(byte* str)
	{
		byte* resultPtr = SDL_strlwrPtr(str);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_strlwr")]
	public static partial byte* SDL_strlwrPtr(ReadOnlySpan<byte> str);

	[LibraryImport(LibName, EntryPoint = "SDL_strlwr")]
	public static partial byte* SDL_strlwrPtr([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str);

	[LibraryImport(LibName, EntryPoint = "SDL_strchr")]
	public static partial byte* SDL_strchrPtr(byte* str, int c);

	public static string? SDL_strchr(byte* str, int c)
	{
		byte* resultPtr = SDL_strchrPtr(str, c);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_strchr")]
	public static partial byte* SDL_strchrPtr(ReadOnlySpan<byte> str, int c);

	[LibraryImport(LibName, EntryPoint = "SDL_strchr")]
	public static partial byte* SDL_strchrPtr([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str, int c);

	[LibraryImport(LibName, EntryPoint = "SDL_strrchr")]
	public static partial byte* SDL_strrchrPtr(byte* str, int c);

	public static string? SDL_strrchr(byte* str, int c)
	{
		byte* resultPtr = SDL_strrchrPtr(str, c);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_strrchr")]
	public static partial byte* SDL_strrchrPtr(ReadOnlySpan<byte> str, int c);

	[LibraryImport(LibName, EntryPoint = "SDL_strrchr")]
	public static partial byte* SDL_strrchrPtr([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str, int c);

	[LibraryImport(LibName, EntryPoint = "SDL_strstr")]
	public static partial byte* SDL_strstrPtr(byte* haystack, byte* needle);

	public static string? SDL_strstr(byte* haystack, byte* needle)
	{
		byte* resultPtr = SDL_strstrPtr(haystack, needle);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_strstr")]
	public static partial byte* SDL_strstrPtr(ReadOnlySpan<byte> haystack, ReadOnlySpan<byte> needle);

	[LibraryImport(LibName, EntryPoint = "SDL_strstr")]
	public static partial byte* SDL_strstrPtr([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> haystack, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> needle);

	[LibraryImport(LibName, EntryPoint = "SDL_strnstr")]
	public static partial byte* SDL_strnstrPtr(byte* haystack, byte* needle, nuint maxlen);

	public static string? SDL_strnstr(byte* haystack, byte* needle, nuint maxlen)
	{
		byte* resultPtr = SDL_strnstrPtr(haystack, needle, maxlen);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_strnstr")]
	public static partial byte* SDL_strnstrPtr(ReadOnlySpan<byte> haystack, ReadOnlySpan<byte> needle, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_strnstr")]
	public static partial byte* SDL_strnstrPtr([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> haystack, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> needle, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_strcasestr")]
	public static partial byte* SDL_strcasestrPtr(byte* haystack, byte* needle);

	public static string? SDL_strcasestr(byte* haystack, byte* needle)
	{
		byte* resultPtr = SDL_strcasestrPtr(haystack, needle);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_strcasestr")]
	public static partial byte* SDL_strcasestrPtr(ReadOnlySpan<byte> haystack, ReadOnlySpan<byte> needle);

	[LibraryImport(LibName, EntryPoint = "SDL_strcasestr")]
	public static partial byte* SDL_strcasestrPtr([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> haystack, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> needle);

	[LibraryImport(LibName, EntryPoint = "SDL_strtok_r")]
	public static partial byte* SDL_strtok_rPtr(byte* s1, byte* s2, byte** saveptr);

	public static string? SDL_strtok_r(byte* s1, byte* s2, byte** saveptr)
	{
		byte* resultPtr = SDL_strtok_rPtr(s1, s2, saveptr);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_strtok_r")]
	public static partial byte* SDL_strtok_rPtr(ReadOnlySpan<byte> s1, ReadOnlySpan<byte> s2, byte** saveptr);

	[LibraryImport(LibName, EntryPoint = "SDL_strtok_r")]
	public static partial byte* SDL_strtok_rPtr([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> s1, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> s2, byte** saveptr);

	[LibraryImport(LibName, EntryPoint = "SDL_utf8strlen")]
	public static partial nuint SDL_utf8strlen(byte* str);

	[LibraryImport(LibName, EntryPoint = "SDL_utf8strlen")]
	public static partial nuint SDL_utf8strlen(ReadOnlySpan<byte> str);

	[LibraryImport(LibName, EntryPoint = "SDL_utf8strlen")]
	public static partial nuint SDL_utf8strlen([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str);

	[LibraryImport(LibName, EntryPoint = "SDL_utf8strnlen")]
	public static partial nuint SDL_utf8strnlen(byte* str, nuint bytes);

	[LibraryImport(LibName, EntryPoint = "SDL_utf8strnlen")]
	public static partial nuint SDL_utf8strnlen(ReadOnlySpan<byte> str, nuint bytes);

	[LibraryImport(LibName, EntryPoint = "SDL_utf8strnlen")]
	public static partial nuint SDL_utf8strnlen([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str, nuint bytes);

	[LibraryImport(LibName, EntryPoint = "SDL_itoa")]
	public static partial byte* SDL_itoaPtr(int value, byte* str, int radix);

	public static string? SDL_itoa(int value, byte* str, int radix)
	{
		byte* resultPtr = SDL_itoaPtr(value, str, radix);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_itoa")]
	public static partial byte* SDL_itoaPtr(int value, ReadOnlySpan<byte> str, int radix);

	[LibraryImport(LibName, EntryPoint = "SDL_itoa")]
	public static partial byte* SDL_itoaPtr(int value, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str, int radix);

	[LibraryImport(LibName, EntryPoint = "SDL_uitoa")]
	public static partial byte* SDL_uitoaPtr(uint value, byte* str, int radix);

	public static string? SDL_uitoa(uint value, byte* str, int radix)
	{
		byte* resultPtr = SDL_uitoaPtr(value, str, radix);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_uitoa")]
	public static partial byte* SDL_uitoaPtr(uint value, ReadOnlySpan<byte> str, int radix);

	[LibraryImport(LibName, EntryPoint = "SDL_uitoa")]
	public static partial byte* SDL_uitoaPtr(uint value, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str, int radix);

	[LibraryImport(LibName, EntryPoint = "SDL_ltoa")]
	public static partial byte* SDL_ltoaPtr(global::System.Runtime.InteropServices.CLong value, byte* str, int radix);

	public static string? SDL_ltoa(global::System.Runtime.InteropServices.CLong value, byte* str, int radix)
	{
		byte* resultPtr = SDL_ltoaPtr(value, str, radix);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_ltoa")]
	public static partial byte* SDL_ltoaPtr(global::System.Runtime.InteropServices.CLong value, ReadOnlySpan<byte> str, int radix);

	[LibraryImport(LibName, EntryPoint = "SDL_ltoa")]
	public static partial byte* SDL_ltoaPtr(global::System.Runtime.InteropServices.CLong value, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str, int radix);

	[LibraryImport(LibName, EntryPoint = "SDL_ultoa")]
	public static partial byte* SDL_ultoaPtr(global::System.Runtime.InteropServices.CULong value, byte* str, int radix);

	public static string? SDL_ultoa(global::System.Runtime.InteropServices.CULong value, byte* str, int radix)
	{
		byte* resultPtr = SDL_ultoaPtr(value, str, radix);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_ultoa")]
	public static partial byte* SDL_ultoaPtr(global::System.Runtime.InteropServices.CULong value, ReadOnlySpan<byte> str, int radix);

	[LibraryImport(LibName, EntryPoint = "SDL_ultoa")]
	public static partial byte* SDL_ultoaPtr(global::System.Runtime.InteropServices.CULong value, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str, int radix);

	[LibraryImport(LibName, EntryPoint = "SDL_lltoa")]
	public static partial byte* SDL_lltoaPtr(long value, byte* str, int radix);

	public static string? SDL_lltoa(long value, byte* str, int radix)
	{
		byte* resultPtr = SDL_lltoaPtr(value, str, radix);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_lltoa")]
	public static partial byte* SDL_lltoaPtr(long value, ReadOnlySpan<byte> str, int radix);

	[LibraryImport(LibName, EntryPoint = "SDL_lltoa")]
	public static partial byte* SDL_lltoaPtr(long value, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str, int radix);

	[LibraryImport(LibName, EntryPoint = "SDL_ulltoa")]
	public static partial byte* SDL_ulltoaPtr(ulong value, byte* str, int radix);

	public static string? SDL_ulltoa(ulong value, byte* str, int radix)
	{
		byte* resultPtr = SDL_ulltoaPtr(value, str, radix);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_ulltoa")]
	public static partial byte* SDL_ulltoaPtr(ulong value, ReadOnlySpan<byte> str, int radix);

	[LibraryImport(LibName, EntryPoint = "SDL_ulltoa")]
	public static partial byte* SDL_ulltoaPtr(ulong value, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str, int radix);

	[LibraryImport(LibName, EntryPoint = "SDL_atoi")]
	public static partial int SDL_atoi(byte* str);

	[LibraryImport(LibName, EntryPoint = "SDL_atoi")]
	public static partial int SDL_atoi(ReadOnlySpan<byte> str);

	[LibraryImport(LibName, EntryPoint = "SDL_atoi")]
	public static partial int SDL_atoi([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str);

	[LibraryImport(LibName, EntryPoint = "SDL_atof")]
	public static partial double SDL_atof(byte* str);

	[LibraryImport(LibName, EntryPoint = "SDL_atof")]
	public static partial double SDL_atof(ReadOnlySpan<byte> str);

	[LibraryImport(LibName, EntryPoint = "SDL_atof")]
	public static partial double SDL_atof([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str);

	[LibraryImport(LibName, EntryPoint = "SDL_strtol")]
	public static partial global::System.Runtime.InteropServices.CLong SDL_strtol(byte* str, byte** endp, int @base);

	[LibraryImport(LibName, EntryPoint = "SDL_strtol")]
	public static partial global::System.Runtime.InteropServices.CLong SDL_strtol(ReadOnlySpan<byte> str, byte** endp, int @base);

	[LibraryImport(LibName, EntryPoint = "SDL_strtol")]
	public static partial global::System.Runtime.InteropServices.CLong SDL_strtol([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str, byte** endp, int @base);

	[LibraryImport(LibName, EntryPoint = "SDL_strtoul")]
	public static partial global::System.Runtime.InteropServices.CULong SDL_strtoul(byte* str, byte** endp, int @base);

	[LibraryImport(LibName, EntryPoint = "SDL_strtoul")]
	public static partial global::System.Runtime.InteropServices.CULong SDL_strtoul(ReadOnlySpan<byte> str, byte** endp, int @base);

	[LibraryImport(LibName, EntryPoint = "SDL_strtoul")]
	public static partial global::System.Runtime.InteropServices.CULong SDL_strtoul([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str, byte** endp, int @base);

	[LibraryImport(LibName, EntryPoint = "SDL_strtoll")]
	public static partial long SDL_strtoll(byte* str, byte** endp, int @base);

	[LibraryImport(LibName, EntryPoint = "SDL_strtoll")]
	public static partial long SDL_strtoll(ReadOnlySpan<byte> str, byte** endp, int @base);

	[LibraryImport(LibName, EntryPoint = "SDL_strtoll")]
	public static partial long SDL_strtoll([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str, byte** endp, int @base);

	[LibraryImport(LibName, EntryPoint = "SDL_strtoull")]
	public static partial ulong SDL_strtoull(byte* str, byte** endp, int @base);

	[LibraryImport(LibName, EntryPoint = "SDL_strtoull")]
	public static partial ulong SDL_strtoull(ReadOnlySpan<byte> str, byte** endp, int @base);

	[LibraryImport(LibName, EntryPoint = "SDL_strtoull")]
	public static partial ulong SDL_strtoull([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str, byte** endp, int @base);

	[LibraryImport(LibName, EntryPoint = "SDL_strtod")]
	public static partial double SDL_strtod(byte* str, byte** endp);

	[LibraryImport(LibName, EntryPoint = "SDL_strtod")]
	public static partial double SDL_strtod(ReadOnlySpan<byte> str, byte** endp);

	[LibraryImport(LibName, EntryPoint = "SDL_strtod")]
	public static partial double SDL_strtod([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str, byte** endp);

	[LibraryImport(LibName, EntryPoint = "SDL_strcmp")]
	public static partial int SDL_strcmp(byte* str1, byte* str2);

	[LibraryImport(LibName, EntryPoint = "SDL_strcmp")]
	public static partial int SDL_strcmp(ReadOnlySpan<byte> str1, ReadOnlySpan<byte> str2);

	[LibraryImport(LibName, EntryPoint = "SDL_strcmp")]
	public static partial int SDL_strcmp([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str1, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str2);

	[LibraryImport(LibName, EntryPoint = "SDL_strncmp")]
	public static partial int SDL_strncmp(byte* str1, byte* str2, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_strncmp")]
	public static partial int SDL_strncmp(ReadOnlySpan<byte> str1, ReadOnlySpan<byte> str2, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_strncmp")]
	public static partial int SDL_strncmp([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str1, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str2, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_strcasecmp")]
	public static partial int SDL_strcasecmp(byte* str1, byte* str2);

	[LibraryImport(LibName, EntryPoint = "SDL_strcasecmp")]
	public static partial int SDL_strcasecmp(ReadOnlySpan<byte> str1, ReadOnlySpan<byte> str2);

	[LibraryImport(LibName, EntryPoint = "SDL_strcasecmp")]
	public static partial int SDL_strcasecmp([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str1, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str2);

	[LibraryImport(LibName, EntryPoint = "SDL_strncasecmp")]
	public static partial int SDL_strncasecmp(byte* str1, byte* str2, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_strncasecmp")]
	public static partial int SDL_strncasecmp(ReadOnlySpan<byte> str1, ReadOnlySpan<byte> str2, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_strncasecmp")]
	public static partial int SDL_strncasecmp([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str1, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str2, nuint maxlen);

	[LibraryImport(LibName, EntryPoint = "SDL_strpbrk")]
	public static partial byte* SDL_strpbrkPtr(byte* str, byte* breakset);

	public static string? SDL_strpbrk(byte* str, byte* breakset)
	{
		byte* resultPtr = SDL_strpbrkPtr(str, breakset);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_strpbrk")]
	public static partial byte* SDL_strpbrkPtr(ReadOnlySpan<byte> str, ReadOnlySpan<byte> breakset);

	[LibraryImport(LibName, EntryPoint = "SDL_strpbrk")]
	public static partial byte* SDL_strpbrkPtr([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> str, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> breakset);

	[LibraryImport(LibName, EntryPoint = "SDL_StepUTF8")]
	public static partial uint SDL_StepUTF8(byte** pstr, nuint* pslen);

	[LibraryImport(LibName, EntryPoint = "SDL_UCS4ToUTF8")]
	public static partial byte* SDL_UCS4ToUTF8Ptr(uint codepoint, byte* dst);

	public static string? SDL_UCS4ToUTF8(uint codepoint, byte* dst)
	{
		byte* resultPtr = SDL_UCS4ToUTF8Ptr(codepoint, dst);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_UCS4ToUTF8")]
	public static partial byte* SDL_UCS4ToUTF8Ptr(uint codepoint, ReadOnlySpan<byte> dst);

	[LibraryImport(LibName, EntryPoint = "SDL_UCS4ToUTF8")]
	public static partial byte* SDL_UCS4ToUTF8Ptr(uint codepoint, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> dst);

	[LibraryImport(LibName, EntryPoint = "SDL_sscanf")]
	public static partial int SDL_sscanf(byte* text, byte* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_sscanf")]
	public static partial int SDL_sscanf(ReadOnlySpan<byte> text, ReadOnlySpan<byte> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_sscanf")]
	public static partial int SDL_sscanf([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> text, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_vsscanf")]
	public static partial int SDL_vsscanf(byte* text, byte* fmt, byte* ap);

	[LibraryImport(LibName, EntryPoint = "SDL_vsscanf")]
	public static partial int SDL_vsscanf(ReadOnlySpan<byte> text, ReadOnlySpan<byte> fmt, byte* ap);

	[LibraryImport(LibName, EntryPoint = "SDL_vsscanf")]
	public static partial int SDL_vsscanf([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> text, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> fmt, byte* ap);

	[LibraryImport(LibName, EntryPoint = "SDL_snprintf")]
	public static partial int SDL_snprintf(byte* text, nuint maxlen, byte* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_snprintf")]
	public static partial int SDL_snprintf(ReadOnlySpan<byte> text, nuint maxlen, ReadOnlySpan<byte> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_snprintf")]
	public static partial int SDL_snprintf([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> text, nuint maxlen, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_swprintf")]
	public static partial int SDL_swprintf(char* text, nuint maxlen, char* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_vsnprintf")]
	public static partial int SDL_vsnprintf(byte* text, nuint maxlen, byte* fmt, byte* ap);

	[LibraryImport(LibName, EntryPoint = "SDL_vsnprintf")]
	public static partial int SDL_vsnprintf(ReadOnlySpan<byte> text, nuint maxlen, ReadOnlySpan<byte> fmt, byte* ap);

	[LibraryImport(LibName, EntryPoint = "SDL_vsnprintf")]
	public static partial int SDL_vsnprintf([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> text, nuint maxlen, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> fmt, byte* ap);

	[LibraryImport(LibName, EntryPoint = "SDL_vswprintf")]
	public static partial int SDL_vswprintf(char* text, nuint maxlen, char* fmt, byte* ap);

	[LibraryImport(LibName, EntryPoint = "SDL_asprintf")]
	public static partial int SDL_asprintf(byte** strp, byte* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_asprintf")]
	public static partial int SDL_asprintf(byte** strp, ReadOnlySpan<byte> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_asprintf")]
	public static partial int SDL_asprintf(byte** strp, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_vasprintf")]
	public static partial int SDL_vasprintf(byte** strp, byte* fmt, byte* ap);

	[LibraryImport(LibName, EntryPoint = "SDL_vasprintf")]
	public static partial int SDL_vasprintf(byte** strp, ReadOnlySpan<byte> fmt, byte* ap);

	[LibraryImport(LibName, EntryPoint = "SDL_vasprintf")]
	public static partial int SDL_vasprintf(byte** strp, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> fmt, byte* ap);

	[LibraryImport(LibName, EntryPoint = "SDL_srand")]
	public static partial void SDL_srand(ulong seed);

	[LibraryImport(LibName, EntryPoint = "SDL_rand")]
	public static partial int SDL_rand(int n);

	[LibraryImport(LibName, EntryPoint = "SDL_randf")]
	public static partial float SDL_randf();

	[LibraryImport(LibName, EntryPoint = "SDL_rand_bits")]
	public static partial uint SDL_rand_bits();

	[LibraryImport(LibName, EntryPoint = "SDL_rand_r")]
	public static partial int SDL_rand_r(ulong* state, int n);

	[LibraryImport(LibName, EntryPoint = "SDL_randf_r")]
	public static partial float SDL_randf_r(ulong* state);

	[LibraryImport(LibName, EntryPoint = "SDL_rand_bits_r")]
	public static partial uint SDL_rand_bits_r(ulong* state);

	[LibraryImport(LibName, EntryPoint = "SDL_acos")]
	public static partial double SDL_acos(double x);

	[LibraryImport(LibName, EntryPoint = "SDL_acosf")]
	public static partial float SDL_acosf(float x);

	[LibraryImport(LibName, EntryPoint = "SDL_asin")]
	public static partial double SDL_asin(double x);

	[LibraryImport(LibName, EntryPoint = "SDL_asinf")]
	public static partial float SDL_asinf(float x);

	[LibraryImport(LibName, EntryPoint = "SDL_atan")]
	public static partial double SDL_atan(double x);

	[LibraryImport(LibName, EntryPoint = "SDL_atanf")]
	public static partial float SDL_atanf(float x);

	[LibraryImport(LibName, EntryPoint = "SDL_atan2")]
	public static partial double SDL_atan2(double y, double x);

	[LibraryImport(LibName, EntryPoint = "SDL_atan2f")]
	public static partial float SDL_atan2f(float y, float x);

	[LibraryImport(LibName, EntryPoint = "SDL_ceil")]
	public static partial double SDL_ceil(double x);

	[LibraryImport(LibName, EntryPoint = "SDL_ceilf")]
	public static partial float SDL_ceilf(float x);

	[LibraryImport(LibName, EntryPoint = "SDL_copysign")]
	public static partial double SDL_copysign(double x, double y);

	[LibraryImport(LibName, EntryPoint = "SDL_copysignf")]
	public static partial float SDL_copysignf(float x, float y);

	[LibraryImport(LibName, EntryPoint = "SDL_cos")]
	public static partial double SDL_cos(double x);

	[LibraryImport(LibName, EntryPoint = "SDL_cosf")]
	public static partial float SDL_cosf(float x);

	[LibraryImport(LibName, EntryPoint = "SDL_exp")]
	public static partial double SDL_exp(double x);

	[LibraryImport(LibName, EntryPoint = "SDL_expf")]
	public static partial float SDL_expf(float x);

	[LibraryImport(LibName, EntryPoint = "SDL_fabs")]
	public static partial double SDL_fabs(double x);

	[LibraryImport(LibName, EntryPoint = "SDL_fabsf")]
	public static partial float SDL_fabsf(float x);

	[LibraryImport(LibName, EntryPoint = "SDL_floor")]
	public static partial double SDL_floor(double x);

	[LibraryImport(LibName, EntryPoint = "SDL_floorf")]
	public static partial float SDL_floorf(float x);

	[LibraryImport(LibName, EntryPoint = "SDL_trunc")]
	public static partial double SDL_trunc(double x);

	[LibraryImport(LibName, EntryPoint = "SDL_truncf")]
	public static partial float SDL_truncf(float x);

	[LibraryImport(LibName, EntryPoint = "SDL_fmod")]
	public static partial double SDL_fmod(double x, double y);

	[LibraryImport(LibName, EntryPoint = "SDL_fmodf")]
	public static partial float SDL_fmodf(float x, float y);

	[LibraryImport(LibName, EntryPoint = "SDL_isinf")]
	public static partial int SDL_isinf(double x);

	[LibraryImport(LibName, EntryPoint = "SDL_isinff")]
	public static partial int SDL_isinff(float x);

	[LibraryImport(LibName, EntryPoint = "SDL_isnan")]
	public static partial int SDL_isnan(double x);

	[LibraryImport(LibName, EntryPoint = "SDL_isnanf")]
	public static partial int SDL_isnanf(float x);

	[LibraryImport(LibName, EntryPoint = "SDL_log")]
	public static partial double SDL_log(double x);

	[LibraryImport(LibName, EntryPoint = "SDL_logf")]
	public static partial float SDL_logf(float x);

	[LibraryImport(LibName, EntryPoint = "SDL_log10")]
	public static partial double SDL_log10(double x);

	[LibraryImport(LibName, EntryPoint = "SDL_log10f")]
	public static partial float SDL_log10f(float x);

	[LibraryImport(LibName, EntryPoint = "SDL_modf")]
	public static partial double SDL_modf(double x, double* y);

	[LibraryImport(LibName, EntryPoint = "SDL_modff")]
	public static partial float SDL_modff(float x, float* y);

	[LibraryImport(LibName, EntryPoint = "SDL_pow")]
	public static partial double SDL_pow(double x, double y);

	[LibraryImport(LibName, EntryPoint = "SDL_powf")]
	public static partial float SDL_powf(float x, float y);

	[LibraryImport(LibName, EntryPoint = "SDL_round")]
	public static partial double SDL_round(double x);

	[LibraryImport(LibName, EntryPoint = "SDL_roundf")]
	public static partial float SDL_roundf(float x);

	[LibraryImport(LibName, EntryPoint = "SDL_lround")]
	public static partial global::System.Runtime.InteropServices.CLong SDL_lround(double x);

	[LibraryImport(LibName, EntryPoint = "SDL_lroundf")]
	public static partial global::System.Runtime.InteropServices.CLong SDL_lroundf(float x);

	[LibraryImport(LibName, EntryPoint = "SDL_scalbn")]
	public static partial double SDL_scalbn(double x, int n);

	[LibraryImport(LibName, EntryPoint = "SDL_scalbnf")]
	public static partial float SDL_scalbnf(float x, int n);

	[LibraryImport(LibName, EntryPoint = "SDL_sin")]
	public static partial double SDL_sin(double x);

	[LibraryImport(LibName, EntryPoint = "SDL_sinf")]
	public static partial float SDL_sinf(float x);

	[LibraryImport(LibName, EntryPoint = "SDL_sqrt")]
	public static partial double SDL_sqrt(double x);

	[LibraryImport(LibName, EntryPoint = "SDL_sqrtf")]
	public static partial float SDL_sqrtf(float x);

	[LibraryImport(LibName, EntryPoint = "SDL_tan")]
	public static partial double SDL_tan(double x);

	[LibraryImport(LibName, EntryPoint = "SDL_tanf")]
	public static partial float SDL_tanf(float x);

	[LibraryImport(LibName, EntryPoint = "SDL_iconv_open")]
	public static partial SDL_iconv_data_t SDL_iconv_open(byte* tocode, byte* fromcode);

	[LibraryImport(LibName, EntryPoint = "SDL_iconv_open")]
	public static partial SDL_iconv_data_t SDL_iconv_open(ReadOnlySpan<byte> tocode, ReadOnlySpan<byte> fromcode);

	[LibraryImport(LibName, EntryPoint = "SDL_iconv_open")]
	public static partial SDL_iconv_data_t SDL_iconv_open([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> tocode, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> fromcode);

	[LibraryImport(LibName, EntryPoint = "SDL_iconv_close")]
	public static partial int SDL_iconv_close(SDL_iconv_data_t cd);

	[LibraryImport(LibName, EntryPoint = "SDL_iconv")]
	public static partial nuint SDL_iconv(SDL_iconv_data_t cd, byte** inbuf, nuint* inbytesleft, byte** outbuf, nuint* outbytesleft);

	[LibraryImport(LibName, EntryPoint = "SDL_iconv_string")]
	public static partial byte* SDL_iconv_stringPtr(byte* tocode, byte* fromcode, byte* inbuf, nuint inbytesleft);

	public static string? SDL_iconv_string(byte* tocode, byte* fromcode, byte* inbuf, nuint inbytesleft)
	{
		byte* resultPtr = SDL_iconv_stringPtr(tocode, fromcode, inbuf, inbytesleft);
		string? result = ConvertToManaged(resultPtr);
		SDL_free(resultPtr);
		return result;
	}

	[LibraryImport(LibName, EntryPoint = "SDL_iconv_string")]
	public static partial byte* SDL_iconv_stringPtr(ReadOnlySpan<byte> tocode, ReadOnlySpan<byte> fromcode, ReadOnlySpan<byte> inbuf, nuint inbytesleft);

	[LibraryImport(LibName, EntryPoint = "SDL_iconv_string")]
	public static partial byte* SDL_iconv_stringPtr([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> tocode, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> fromcode, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> inbuf, nuint inbytesleft);

	[LibraryImport(LibName, EntryPoint = "SDL_size_mul_check_overflow")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_size_mul_check_overflow(nuint a, nuint b, nuint* ret);

	[LibraryImport(LibName, EntryPoint = "SDL_size_mul_check_overflow_builtin")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_size_mul_check_overflow_builtin(nuint a, nuint b, nuint* ret);

	[LibraryImport(LibName, EntryPoint = "SDL_size_add_check_overflow")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_size_add_check_overflow(nuint a, nuint b, nuint* ret);

	[LibraryImport(LibName, EntryPoint = "SDL_size_add_check_overflow_builtin")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_size_add_check_overflow_builtin(nuint a, nuint b, nuint* ret);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenTitleStorage")]
	public static partial SDL_Storage SDL_OpenTitleStorage(byte* @override, SDL_PropertiesID props);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenTitleStorage")]
	public static partial SDL_Storage SDL_OpenTitleStorage(ReadOnlySpan<byte> @override, SDL_PropertiesID props);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenTitleStorage")]
	public static partial SDL_Storage SDL_OpenTitleStorage([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> @override, SDL_PropertiesID props);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenUserStorage")]
	public static partial SDL_Storage SDL_OpenUserStorage(byte* org, byte* app, SDL_PropertiesID props);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenUserStorage")]
	public static partial SDL_Storage SDL_OpenUserStorage(ReadOnlySpan<byte> org, ReadOnlySpan<byte> app, SDL_PropertiesID props);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenUserStorage")]
	public static partial SDL_Storage SDL_OpenUserStorage([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> org, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> app, SDL_PropertiesID props);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenFileStorage")]
	public static partial SDL_Storage SDL_OpenFileStorage(byte* path);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenFileStorage")]
	public static partial SDL_Storage SDL_OpenFileStorage(ReadOnlySpan<byte> path);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenFileStorage")]
	public static partial SDL_Storage SDL_OpenFileStorage([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenStorage")]
	public static partial SDL_Storage SDL_OpenStorage(SDL_StorageInterface* iface, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_CloseStorage")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CloseStorage(SDL_Storage storage);

	[LibraryImport(LibName, EntryPoint = "SDL_StorageReady")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_StorageReady(SDL_Storage storage);

	[LibraryImport(LibName, EntryPoint = "SDL_GetStorageFileSize")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetStorageFileSize(SDL_Storage storage, byte* path, ulong* length);

	[LibraryImport(LibName, EntryPoint = "SDL_GetStorageFileSize")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetStorageFileSize(SDL_Storage storage, ReadOnlySpan<byte> path, ulong* length);

	[LibraryImport(LibName, EntryPoint = "SDL_GetStorageFileSize")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetStorageFileSize(SDL_Storage storage, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path, ulong* length);

	[LibraryImport(LibName, EntryPoint = "SDL_ReadStorageFile")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ReadStorageFile(SDL_Storage storage, byte* path, nint destination, ulong length);

	[LibraryImport(LibName, EntryPoint = "SDL_ReadStorageFile")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ReadStorageFile(SDL_Storage storage, ReadOnlySpan<byte> path, nint destination, ulong length);

	[LibraryImport(LibName, EntryPoint = "SDL_ReadStorageFile")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ReadStorageFile(SDL_Storage storage, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path, nint destination, ulong length);

	[LibraryImport(LibName, EntryPoint = "SDL_WriteStorageFile")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WriteStorageFile(SDL_Storage storage, byte* path, nint source, ulong length);

	[LibraryImport(LibName, EntryPoint = "SDL_WriteStorageFile")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WriteStorageFile(SDL_Storage storage, ReadOnlySpan<byte> path, nint source, ulong length);

	[LibraryImport(LibName, EntryPoint = "SDL_WriteStorageFile")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WriteStorageFile(SDL_Storage storage, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path, nint source, ulong length);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateStorageDirectory")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CreateStorageDirectory(SDL_Storage storage, byte* path);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateStorageDirectory")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CreateStorageDirectory(SDL_Storage storage, ReadOnlySpan<byte> path);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateStorageDirectory")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CreateStorageDirectory(SDL_Storage storage, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path);

	[LibraryImport(LibName, EntryPoint = "SDL_EnumerateStorageDirectory")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_EnumerateStorageDirectory(SDL_Storage storage, byte* path, delegate* unmanaged<nint, byte*, byte*, int> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_EnumerateStorageDirectory")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_EnumerateStorageDirectory(SDL_Storage storage, ReadOnlySpan<byte> path, delegate* unmanaged<nint, byte*, byte*, int> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_EnumerateStorageDirectory")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_EnumerateStorageDirectory(SDL_Storage storage, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path, delegate* unmanaged<nint, byte*, byte*, int> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_RemoveStoragePath")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RemoveStoragePath(SDL_Storage storage, byte* path);

	[LibraryImport(LibName, EntryPoint = "SDL_RemoveStoragePath")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RemoveStoragePath(SDL_Storage storage, ReadOnlySpan<byte> path);

	[LibraryImport(LibName, EntryPoint = "SDL_RemoveStoragePath")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RemoveStoragePath(SDL_Storage storage, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path);

	[LibraryImport(LibName, EntryPoint = "SDL_RenameStoragePath")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenameStoragePath(SDL_Storage storage, byte* oldpath, byte* newpath);

	[LibraryImport(LibName, EntryPoint = "SDL_RenameStoragePath")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenameStoragePath(SDL_Storage storage, ReadOnlySpan<byte> oldpath, ReadOnlySpan<byte> newpath);

	[LibraryImport(LibName, EntryPoint = "SDL_RenameStoragePath")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RenameStoragePath(SDL_Storage storage, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> oldpath, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> newpath);

	[LibraryImport(LibName, EntryPoint = "SDL_CopyStorageFile")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CopyStorageFile(SDL_Storage storage, byte* oldpath, byte* newpath);

	[LibraryImport(LibName, EntryPoint = "SDL_CopyStorageFile")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CopyStorageFile(SDL_Storage storage, ReadOnlySpan<byte> oldpath, ReadOnlySpan<byte> newpath);

	[LibraryImport(LibName, EntryPoint = "SDL_CopyStorageFile")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_CopyStorageFile(SDL_Storage storage, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> oldpath, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> newpath);

	[LibraryImport(LibName, EntryPoint = "SDL_GetStoragePathInfo")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetStoragePathInfo(SDL_Storage storage, byte* path, SDL_PathInfo* info);

	[LibraryImport(LibName, EntryPoint = "SDL_GetStoragePathInfo")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetStoragePathInfo(SDL_Storage storage, ReadOnlySpan<byte> path, SDL_PathInfo* info);

	[LibraryImport(LibName, EntryPoint = "SDL_GetStoragePathInfo")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetStoragePathInfo(SDL_Storage storage, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path, SDL_PathInfo* info);

	[LibraryImport(LibName, EntryPoint = "SDL_GetStorageSpaceRemaining")]
	public static partial ulong SDL_GetStorageSpaceRemaining(SDL_Storage storage);

	[LibraryImport(LibName, EntryPoint = "SDL_GlobStorageDirectory")]
	public static partial byte** SDL_GlobStorageDirectory(SDL_Storage storage, byte* path, byte* pattern, SDL_GlobFlags flags, int* count);

	[LibraryImport(LibName, EntryPoint = "SDL_GlobStorageDirectory")]
	public static partial byte** SDL_GlobStorageDirectory(SDL_Storage storage, ReadOnlySpan<byte> path, ReadOnlySpan<byte> pattern, SDL_GlobFlags flags, int* count);

	[LibraryImport(LibName, EntryPoint = "SDL_GlobStorageDirectory")]
	public static partial byte** SDL_GlobStorageDirectory(SDL_Storage storage, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> pattern, SDL_GlobFlags flags, int* count);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateSurface")]
	public static partial SDL_Surface* SDL_CreateSurface(int width, int height, SDL_PixelFormat format);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateSurfaceFrom")]
	public static partial SDL_Surface* SDL_CreateSurfaceFrom(int width, int height, SDL_PixelFormat format, nint pixels, int pitch);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroySurface")]
	public static partial void SDL_DestroySurface(SDL_Surface* surface);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSurfaceProperties")]
	public static partial SDL_PropertiesID SDL_GetSurfaceProperties(SDL_Surface* surface);

	[LibraryImport(LibName, EntryPoint = "SDL_SetSurfaceColorspace")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetSurfaceColorspace(SDL_Surface* surface, SDL_Colorspace colorspace);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSurfaceColorspace")]
	public static partial SDL_Colorspace SDL_GetSurfaceColorspace(SDL_Surface* surface);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateSurfacePalette")]
	public static partial SDL_Palette* SDL_CreateSurfacePalette(SDL_Surface* surface);

	[LibraryImport(LibName, EntryPoint = "SDL_SetSurfacePalette")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetSurfacePalette(SDL_Surface* surface, SDL_Palette* palette);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSurfacePalette")]
	public static partial SDL_Palette* SDL_GetSurfacePalette(SDL_Surface* surface);

	[LibraryImport(LibName, EntryPoint = "SDL_AddSurfaceAlternateImage")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_AddSurfaceAlternateImage(SDL_Surface* surface, SDL_Surface* image);

	[LibraryImport(LibName, EntryPoint = "SDL_SurfaceHasAlternateImages")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SurfaceHasAlternateImages(SDL_Surface* surface);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSurfaceImages")]
	public static partial SDL_Surface** SDL_GetSurfaceImages(SDL_Surface* surface, out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_RemoveSurfaceAlternateImages")]
	public static partial void SDL_RemoveSurfaceAlternateImages(SDL_Surface* surface);

	[LibraryImport(LibName, EntryPoint = "SDL_LockSurface")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_LockSurface(SDL_Surface* surface);

	[LibraryImport(LibName, EntryPoint = "SDL_UnlockSurface")]
	public static partial void SDL_UnlockSurface(SDL_Surface* surface);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadBMP_IO")]
	public static partial SDL_Surface* SDL_LoadBMP_IO(SDL_IOStream src, [MarshalAs(UnmanagedType.U1)] bool closeio);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadBMP")]
	public static partial SDL_Surface* SDL_LoadBMP(byte* file);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadBMP")]
	public static partial SDL_Surface* SDL_LoadBMP(ReadOnlySpan<byte> file);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadBMP")]
	public static partial SDL_Surface* SDL_LoadBMP([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> file);

	[LibraryImport(LibName, EntryPoint = "SDL_SaveBMP_IO")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SaveBMP_IO(SDL_Surface* surface, SDL_IOStream dst, [MarshalAs(UnmanagedType.U1)] bool closeio);

	[LibraryImport(LibName, EntryPoint = "SDL_SaveBMP")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SaveBMP(SDL_Surface* surface, byte* file);

	[LibraryImport(LibName, EntryPoint = "SDL_SaveBMP")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SaveBMP(SDL_Surface* surface, ReadOnlySpan<byte> file);

	[LibraryImport(LibName, EntryPoint = "SDL_SaveBMP")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SaveBMP(SDL_Surface* surface, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> file);

	[LibraryImport(LibName, EntryPoint = "SDL_SetSurfaceRLE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetSurfaceRLE(SDL_Surface* surface, [MarshalAs(UnmanagedType.U1)] bool enabled);

	[LibraryImport(LibName, EntryPoint = "SDL_SurfaceHasRLE")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SurfaceHasRLE(SDL_Surface* surface);

	[LibraryImport(LibName, EntryPoint = "SDL_SetSurfaceColorKey")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetSurfaceColorKey(SDL_Surface* surface, [MarshalAs(UnmanagedType.U1)] bool enabled, uint key);

	[LibraryImport(LibName, EntryPoint = "SDL_SurfaceHasColorKey")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SurfaceHasColorKey(SDL_Surface* surface);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSurfaceColorKey")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetSurfaceColorKey(SDL_Surface* surface, uint* key);

	[LibraryImport(LibName, EntryPoint = "SDL_SetSurfaceColorMod")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetSurfaceColorMod(SDL_Surface* surface, byte r, byte g, byte b);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSurfaceColorMod")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetSurfaceColorMod(SDL_Surface* surface, byte* r, byte* g, byte* b);

	[LibraryImport(LibName, EntryPoint = "SDL_SetSurfaceAlphaMod")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetSurfaceAlphaMod(SDL_Surface* surface, byte alpha);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSurfaceAlphaMod")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetSurfaceAlphaMod(SDL_Surface* surface, byte* alpha);

	[LibraryImport(LibName, EntryPoint = "SDL_SetSurfaceBlendMode")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode blendMode);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSurfaceBlendMode")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode* blendMode);

	[LibraryImport(LibName, EntryPoint = "SDL_SetSurfaceClipRect")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetSurfaceClipRect(SDL_Surface* surface, Rectangle* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSurfaceClipRect")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetSurfaceClipRect(SDL_Surface* surface, Rectangle* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_FlipSurface")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_FlipSurface(SDL_Surface* surface, SDL_FlipMode flip);

	[LibraryImport(LibName, EntryPoint = "SDL_DuplicateSurface")]
	public static partial SDL_Surface* SDL_DuplicateSurface(SDL_Surface* surface);

	[LibraryImport(LibName, EntryPoint = "SDL_ScaleSurface")]
	public static partial SDL_Surface* SDL_ScaleSurface(SDL_Surface* surface, int width, int height, SDL_ScaleMode scaleMode);

	[LibraryImport(LibName, EntryPoint = "SDL_ConvertSurface")]
	public static partial SDL_Surface* SDL_ConvertSurface(SDL_Surface* surface, SDL_PixelFormat format);

	[LibraryImport(LibName, EntryPoint = "SDL_ConvertSurfaceAndColorspace")]
	public static partial SDL_Surface* SDL_ConvertSurfaceAndColorspace(SDL_Surface* surface, SDL_PixelFormat format, SDL_Palette* palette, SDL_Colorspace colorspace, SDL_PropertiesID props);

	[LibraryImport(LibName, EntryPoint = "SDL_ConvertPixels")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ConvertPixels(int width, int height, SDL_PixelFormat src_format, nint src, int src_pitch, SDL_PixelFormat dst_format, nint dst, int dst_pitch);

	[LibraryImport(LibName, EntryPoint = "SDL_ConvertPixelsAndColorspace")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ConvertPixelsAndColorspace(int width, int height, SDL_PixelFormat src_format, SDL_Colorspace src_colorspace, SDL_PropertiesID src_properties, nint src, int src_pitch, SDL_PixelFormat dst_format, SDL_Colorspace dst_colorspace, SDL_PropertiesID dst_properties, nint dst, int dst_pitch);

	[LibraryImport(LibName, EntryPoint = "SDL_PremultiplyAlpha")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_PremultiplyAlpha(int width, int height, SDL_PixelFormat src_format, nint src, int src_pitch, SDL_PixelFormat dst_format, nint dst, int dst_pitch, [MarshalAs(UnmanagedType.U1)] bool linear);

	[LibraryImport(LibName, EntryPoint = "SDL_PremultiplySurfaceAlpha")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_PremultiplySurfaceAlpha(SDL_Surface* surface, [MarshalAs(UnmanagedType.U1)] bool linear);

	[LibraryImport(LibName, EntryPoint = "SDL_ClearSurface")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ClearSurface(SDL_Surface* surface, float r, float g, float b, float a);

	[LibraryImport(LibName, EntryPoint = "SDL_FillSurfaceRect")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_FillSurfaceRect(SDL_Surface* dst, Rectangle* rect, uint color);

	[LibraryImport(LibName, EntryPoint = "SDL_FillSurfaceRects")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_FillSurfaceRects(SDL_Surface* dst, Rectangle* rects, int count, uint color);

	[LibraryImport(LibName, EntryPoint = "SDL_BlitSurface")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_BlitSurface(SDL_Surface* src, Rectangle* srcrect, SDL_Surface* dst, Rectangle* dstrect);

	[LibraryImport(LibName, EntryPoint = "SDL_BlitSurfaceUnchecked")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_BlitSurfaceUnchecked(SDL_Surface* src, Rectangle* srcrect, SDL_Surface* dst, Rectangle* dstrect);

	[LibraryImport(LibName, EntryPoint = "SDL_BlitSurfaceScaled")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_BlitSurfaceScaled(SDL_Surface* src, Rectangle* srcrect, SDL_Surface* dst, Rectangle* dstrect, SDL_ScaleMode scaleMode);

	[LibraryImport(LibName, EntryPoint = "SDL_BlitSurfaceUncheckedScaled")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_BlitSurfaceUncheckedScaled(SDL_Surface* src, Rectangle* srcrect, SDL_Surface* dst, Rectangle* dstrect, SDL_ScaleMode scaleMode);

	[LibraryImport(LibName, EntryPoint = "SDL_BlitSurfaceTiled")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_BlitSurfaceTiled(SDL_Surface* src, Rectangle* srcrect, SDL_Surface* dst, Rectangle* dstrect);

	[LibraryImport(LibName, EntryPoint = "SDL_BlitSurfaceTiledWithScale")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_BlitSurfaceTiledWithScale(SDL_Surface* src, Rectangle* srcrect, float scale, SDL_ScaleMode scaleMode, SDL_Surface* dst, Rectangle* dstrect);

	[LibraryImport(LibName, EntryPoint = "SDL_BlitSurface9Grid")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_BlitSurface9Grid(SDL_Surface* src, Rectangle* srcrect, int left_width, int right_width, int top_height, int bottom_height, float scale, SDL_ScaleMode scaleMode, SDL_Surface* dst, Rectangle* dstrect);

	[LibraryImport(LibName, EntryPoint = "SDL_MapSurfaceRGB")]
	public static partial uint SDL_MapSurfaceRGB(SDL_Surface* surface, byte r, byte g, byte b);

	[LibraryImport(LibName, EntryPoint = "SDL_MapSurfaceRGBA")]
	public static partial uint SDL_MapSurfaceRGBA(SDL_Surface* surface, byte r, byte g, byte b, byte a);

	[LibraryImport(LibName, EntryPoint = "SDL_ReadSurfacePixel")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ReadSurfacePixel(SDL_Surface* surface, int x, int y, byte* r, byte* g, byte* b, byte* a);

	[LibraryImport(LibName, EntryPoint = "SDL_ReadSurfacePixelFloat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ReadSurfacePixelFloat(SDL_Surface* surface, int x, int y, float* r, float* g, float* b, float* a);

	[LibraryImport(LibName, EntryPoint = "SDL_WriteSurfacePixel")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WriteSurfacePixel(SDL_Surface* surface, int x, int y, byte r, byte g, byte b, byte a);

	[LibraryImport(LibName, EntryPoint = "SDL_WriteSurfacePixelFloat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WriteSurfacePixelFloat(SDL_Surface* surface, int x, int y, float r, float g, float b, float a);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateThreadRuntime")]
	public static partial SDL_Thread SDL_CreateThreadRuntime(delegate* unmanaged<nint, int> fn, byte* name, nint data, delegate* unmanaged<void> pfnBeginThread, delegate* unmanaged<void> pfnEndThread);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateThreadRuntime")]
	public static partial SDL_Thread SDL_CreateThreadRuntime(delegate* unmanaged<nint, int> fn, ReadOnlySpan<byte> name, nint data, delegate* unmanaged<void> pfnBeginThread, delegate* unmanaged<void> pfnEndThread);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateThreadRuntime")]
	public static partial SDL_Thread SDL_CreateThreadRuntime(delegate* unmanaged<nint, int> fn, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, nint data, delegate* unmanaged<void> pfnBeginThread, delegate* unmanaged<void> pfnEndThread);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateThreadWithPropertiesRuntime")]
	public static partial SDL_Thread SDL_CreateThreadWithPropertiesRuntime(SDL_PropertiesID props, delegate* unmanaged<void> pfnBeginThread, delegate* unmanaged<void> pfnEndThread);

	[LibraryImport(LibName, EntryPoint = "SDL_GetThreadName")]
	public static partial byte* SDL_GetThreadNamePtr(SDL_Thread thread);

	public static string? SDL_GetThreadName(SDL_Thread thread)
	{
		return ConvertToManaged(SDL_GetThreadNamePtr(thread));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetCurrentThreadID")]
	public static partial SDL_ThreadID SDL_GetCurrentThreadID();

	[LibraryImport(LibName, EntryPoint = "SDL_GetThreadID")]
	public static partial SDL_ThreadID SDL_GetThreadID(SDL_Thread thread);

	[LibraryImport(LibName, EntryPoint = "SDL_SetThreadPriority")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetThreadPriority(SDL_ThreadPriority priority);

	[LibraryImport(LibName, EntryPoint = "SDL_WaitThread")]
	public static partial void SDL_WaitThread(SDL_Thread thread, int* status);

	[LibraryImport(LibName, EntryPoint = "SDL_DetachThread")]
	public static partial void SDL_DetachThread(SDL_Thread thread);

	[LibraryImport(LibName, EntryPoint = "SDL_GetTLS")]
	public static partial nint SDL_GetTLS(SDL_AtomicInt* id);

	[LibraryImport(LibName, EntryPoint = "SDL_SetTLS")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetTLS(SDL_AtomicInt* id, nint value, delegate* unmanaged<nint, void> destructor);

	[LibraryImport(LibName, EntryPoint = "SDL_CleanupTLS")]
	public static partial void SDL_CleanupTLS();

	[LibraryImport(LibName, EntryPoint = "SDL_GetDateTimeLocalePreferences")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetDateTimeLocalePreferences(SDL_DateFormat* dateFormat, SDL_TimeFormat* timeFormat);

	[LibraryImport(LibName, EntryPoint = "SDL_GetCurrentTime")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetCurrentTime(long* ticks);

	[LibraryImport(LibName, EntryPoint = "SDL_TimeToDateTime")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_TimeToDateTime(long ticks, SDL_DateTime* dt, [MarshalAs(UnmanagedType.U1)] bool localTime);

	[LibraryImport(LibName, EntryPoint = "SDL_DateTimeToTime")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_DateTimeToTime(SDL_DateTime* dt, long* ticks);

	[LibraryImport(LibName, EntryPoint = "SDL_TimeToWindows")]
	public static partial void SDL_TimeToWindows(long ticks, uint* dwLowDateTime, uint* dwHighDateTime);

	[LibraryImport(LibName, EntryPoint = "SDL_TimeFromWindows")]
	public static partial long SDL_TimeFromWindows(uint dwLowDateTime, uint dwHighDateTime);

	[LibraryImport(LibName, EntryPoint = "SDL_GetDaysInMonth")]
	public static partial int SDL_GetDaysInMonth(int year, int month);

	[LibraryImport(LibName, EntryPoint = "SDL_GetDayOfYear")]
	public static partial int SDL_GetDayOfYear(int year, int month, int day);

	[LibraryImport(LibName, EntryPoint = "SDL_GetDayOfWeek")]
	public static partial int SDL_GetDayOfWeek(int year, int month, int day);

	[LibraryImport(LibName, EntryPoint = "SDL_GetTicks")]
	public static partial ulong SDL_GetTicks();

	[LibraryImport(LibName, EntryPoint = "SDL_GetTicksNS")]
	public static partial ulong SDL_GetTicksNS();

	[LibraryImport(LibName, EntryPoint = "SDL_GetPerformanceCounter")]
	public static partial ulong SDL_GetPerformanceCounter();

	[LibraryImport(LibName, EntryPoint = "SDL_GetPerformanceFrequency")]
	public static partial ulong SDL_GetPerformanceFrequency();

	[LibraryImport(LibName, EntryPoint = "SDL_Delay")]
	public static partial void SDL_Delay(uint ms);

	[LibraryImport(LibName, EntryPoint = "SDL_DelayNS")]
	public static partial void SDL_DelayNS(ulong ns);

	[LibraryImport(LibName, EntryPoint = "SDL_AddTimer")]
	public static partial SDL_TimerID SDL_AddTimer(uint interval, delegate* unmanaged<nint, SDL_TimerID, uint, uint> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_AddTimerNS")]
	public static partial SDL_TimerID SDL_AddTimerNS(ulong interval, delegate* unmanaged<nint, SDL_TimerID, ulong, ulong> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_RemoveTimer")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RemoveTimer(SDL_TimerID id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetTouchDevices")]
	public static partial SDL_TouchID* SDL_GetTouchDevices(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetTouchDeviceName")]
	public static partial byte* SDL_GetTouchDeviceNamePtr(SDL_TouchID touchID);

	public static string? SDL_GetTouchDeviceName(SDL_TouchID touchID)
	{
		return ConvertToManaged(SDL_GetTouchDeviceNamePtr(touchID));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetTouchDeviceType")]
	public static partial SDL_TouchDeviceType SDL_GetTouchDeviceType(SDL_TouchID touchID);

	[LibraryImport(LibName, EntryPoint = "SDL_GetTouchFingers")]
	public static partial SDL_Finger** SDL_GetTouchFingers(SDL_TouchID touchID, out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetVersion")]
	public static partial int SDL_GetVersion();

	[LibraryImport(LibName, EntryPoint = "SDL_GetRevision")]
	public static partial byte* SDL_GetRevisionPtr();

	public static string? SDL_GetRevision()
	{
		return ConvertToManaged(SDL_GetRevisionPtr());
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumVideoDrivers")]
	public static partial int SDL_GetNumVideoDrivers();

	[LibraryImport(LibName, EntryPoint = "SDL_GetVideoDriver")]
	public static partial byte* SDL_GetVideoDriverPtr(int index);

	public static string? SDL_GetVideoDriver(int index)
	{
		return ConvertToManaged(SDL_GetVideoDriverPtr(index));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetCurrentVideoDriver")]
	public static partial byte* SDL_GetCurrentVideoDriverPtr();

	public static string? SDL_GetCurrentVideoDriver()
	{
		return ConvertToManaged(SDL_GetCurrentVideoDriverPtr());
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetSystemTheme")]
	public static partial SDL_SystemTheme SDL_GetSystemTheme();

	[LibraryImport(LibName, EntryPoint = "SDL_GetDisplays")]
	public static partial SDL_DisplayID* SDL_GetDisplays(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPrimaryDisplay")]
	public static partial SDL_DisplayID SDL_GetPrimaryDisplay();

	[LibraryImport(LibName, EntryPoint = "SDL_GetDisplayProperties")]
	public static partial SDL_PropertiesID SDL_GetDisplayProperties(SDL_DisplayID displayID);

	[LibraryImport(LibName, EntryPoint = "SDL_GetDisplayName")]
	public static partial byte* SDL_GetDisplayNamePtr(SDL_DisplayID displayID);

	public static string? SDL_GetDisplayName(SDL_DisplayID displayID)
	{
		return ConvertToManaged(SDL_GetDisplayNamePtr(displayID));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetDisplayBounds")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetDisplayBounds(SDL_DisplayID displayID, Rectangle* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_GetDisplayUsableBounds")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetDisplayUsableBounds(SDL_DisplayID displayID, Rectangle* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNaturalDisplayOrientation")]
	public static partial SDL_DisplayOrientation SDL_GetNaturalDisplayOrientation(SDL_DisplayID displayID);

	[LibraryImport(LibName, EntryPoint = "SDL_GetCurrentDisplayOrientation")]
	public static partial SDL_DisplayOrientation SDL_GetCurrentDisplayOrientation(SDL_DisplayID displayID);

	[LibraryImport(LibName, EntryPoint = "SDL_GetDisplayContentScale")]
	public static partial float SDL_GetDisplayContentScale(SDL_DisplayID displayID);

	[LibraryImport(LibName, EntryPoint = "SDL_GetFullscreenDisplayModes")]
	public static partial SDL_DisplayMode** SDL_GetFullscreenDisplayModes(SDL_DisplayID displayID, out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetClosestFullscreenDisplayMode")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetClosestFullscreenDisplayMode(SDL_DisplayID displayID, int w, int h, float refresh_rate, [MarshalAs(UnmanagedType.U1)] bool include_high_density_modes, SDL_DisplayMode* mode);

	[LibraryImport(LibName, EntryPoint = "SDL_GetDesktopDisplayMode")]
	public static partial SDL_DisplayMode* SDL_GetDesktopDisplayMode(SDL_DisplayID displayID);

	[LibraryImport(LibName, EntryPoint = "SDL_GetCurrentDisplayMode")]
	public static partial SDL_DisplayMode* SDL_GetCurrentDisplayMode(SDL_DisplayID displayID);

	[LibraryImport(LibName, EntryPoint = "SDL_GetDisplayForPoint")]
	public static partial SDL_DisplayID SDL_GetDisplayForPoint(Point* point);

	[LibraryImport(LibName, EntryPoint = "SDL_GetDisplayForRect")]
	public static partial SDL_DisplayID SDL_GetDisplayForRect(Rectangle* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_GetDisplayForWindow")]
	public static partial SDL_DisplayID SDL_GetDisplayForWindow(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowPixelDensity")]
	public static partial float SDL_GetWindowPixelDensity(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowDisplayScale")]
	public static partial float SDL_GetWindowDisplayScale(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowFullscreenMode")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowFullscreenMode(SDL_Window window, SDL_DisplayMode* mode);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowFullscreenMode")]
	public static partial SDL_DisplayMode* SDL_GetWindowFullscreenMode(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowICCProfile")]
	public static partial nint SDL_GetWindowICCProfile(SDL_Window window, nuint* size);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowPixelFormat")]
	public static partial SDL_PixelFormat SDL_GetWindowPixelFormat(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindows")]
	public static partial SDL_Window SDL_GetWindows(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateWindow")]
	public static partial SDL_Window SDL_CreateWindow(byte* title, int w, int h, SDL_WindowFlags flags);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateWindow")]
	public static partial SDL_Window SDL_CreateWindow(ReadOnlySpan<byte> title, int w, int h, SDL_WindowFlags flags);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateWindow")]
	public static partial SDL_Window SDL_CreateWindow([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> title, int w, int h, SDL_WindowFlags flags);

	[LibraryImport(LibName, EntryPoint = "SDL_CreatePopupWindow")]
	public static partial SDL_Window SDL_CreatePopupWindow(SDL_Window parent, int offset_x, int offset_y, int w, int h, SDL_WindowFlags flags);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateWindowWithProperties")]
	public static partial SDL_Window SDL_CreateWindowWithProperties(SDL_PropertiesID props);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowID")]
	public static partial SDL_WindowID SDL_GetWindowID(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowFromID")]
	public static partial SDL_Window SDL_GetWindowFromID(SDL_WindowID id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowParent")]
	public static partial SDL_Window SDL_GetWindowParent(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowProperties")]
	public static partial SDL_PropertiesID SDL_GetWindowProperties(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowFlags")]
	public static partial SDL_WindowFlags SDL_GetWindowFlags(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowTitle")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowTitle(SDL_Window window, byte* title);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowTitle")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowTitle(SDL_Window window, ReadOnlySpan<byte> title);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowTitle")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowTitle(SDL_Window window, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> title);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowTitle")]
	public static partial byte* SDL_GetWindowTitlePtr(SDL_Window window);

	public static string? SDL_GetWindowTitle(SDL_Window window)
	{
		return ConvertToManaged(SDL_GetWindowTitlePtr(window));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowIcon")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowIcon(SDL_Window window, SDL_Surface* icon);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowPosition")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowPosition(SDL_Window window, int x, int y);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowPosition")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetWindowPosition(SDL_Window window, out int x, out int y);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowSize")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowSize(SDL_Window window, int w, int h);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowSize")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetWindowSize(SDL_Window window, out int w, out int h);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowSafeArea")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetWindowSafeArea(SDL_Window window, Rectangle* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowAspectRatio")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowAspectRatio(SDL_Window window, float min_aspect, float max_aspect);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowAspectRatio")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetWindowAspectRatio(SDL_Window window, float* min_aspect, float* max_aspect);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowBordersSize")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetWindowBordersSize(SDL_Window window, int* top, int* left, int* bottom, int* right);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowSizeInPixels")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetWindowSizeInPixels(SDL_Window window, out int w, out int h);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowMinimumSize")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowMinimumSize(SDL_Window window, int min_w, int min_h);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowMinimumSize")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetWindowMinimumSize(SDL_Window window, out int w, out int h);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowMaximumSize")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowMaximumSize(SDL_Window window, int max_w, int max_h);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowMaximumSize")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetWindowMaximumSize(SDL_Window window, out int w, out int h);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowBordered")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowBordered(SDL_Window window, [MarshalAs(UnmanagedType.U1)] bool bordered);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowResizable")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowResizable(SDL_Window window, [MarshalAs(UnmanagedType.U1)] bool resizable);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowAlwaysOnTop")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowAlwaysOnTop(SDL_Window window, [MarshalAs(UnmanagedType.U1)] bool on_top);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowWindow")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ShowWindow(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_HideWindow")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_HideWindow(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_RaiseWindow")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RaiseWindow(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_MaximizeWindow")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_MaximizeWindow(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_MinimizeWindow")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_MinimizeWindow(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_RestoreWindow")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RestoreWindow(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowFullscreen")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowFullscreen(SDL_Window window, [MarshalAs(UnmanagedType.U1)] bool fullscreen);

	[LibraryImport(LibName, EntryPoint = "SDL_SyncWindow")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SyncWindow(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_WindowHasSurface")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WindowHasSurface(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowSurface")]
	public static partial SDL_Surface* SDL_GetWindowSurface(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowSurfaceVSync")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowSurfaceVSync(SDL_Window window, int vsync);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowSurfaceVSync")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetWindowSurfaceVSync(SDL_Window window, int* vsync);

	[LibraryImport(LibName, EntryPoint = "SDL_UpdateWindowSurface")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_UpdateWindowSurface(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_UpdateWindowSurfaceRects")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_UpdateWindowSurfaceRects(SDL_Window window, Rectangle* rects, int numrects);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyWindowSurface")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_DestroyWindowSurface(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowKeyboardGrab")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowKeyboardGrab(SDL_Window window, [MarshalAs(UnmanagedType.U1)] bool grabbed);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowMouseGrab")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowMouseGrab(SDL_Window window, [MarshalAs(UnmanagedType.U1)] bool grabbed);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowKeyboardGrab")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetWindowKeyboardGrab(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowMouseGrab")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetWindowMouseGrab(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGrabbedWindow")]
	public static partial SDL_Window SDL_GetGrabbedWindow();

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowMouseRect")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowMouseRect(SDL_Window window, Rectangle* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowMouseRect")]
	public static partial Rectangle* SDL_GetWindowMouseRect(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowOpacity")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowOpacity(SDL_Window window, float opacity);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowOpacity")]
	public static partial float SDL_GetWindowOpacity(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowParent")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowParent(SDL_Window window, SDL_Window parent);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowModal")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowModal(SDL_Window window, [MarshalAs(UnmanagedType.U1)] bool modal);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowFocusable")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowFocusable(SDL_Window window, [MarshalAs(UnmanagedType.U1)] bool focusable);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowWindowSystemMenu")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ShowWindowSystemMenu(SDL_Window window, int x, int y);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowHitTest")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowHitTest(SDL_Window window, delegate* unmanaged<SDL_Window, Point*, nint, SDL_HitTestResult> callback, nint callback_data);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowShape")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetWindowShape(SDL_Window window, SDL_Surface* shape);

	[LibraryImport(LibName, EntryPoint = "SDL_FlashWindow")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_FlashWindow(SDL_Window window, SDL_FlashOperation operation);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyWindow")]
	public static partial void SDL_DestroyWindow(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_ScreenSaverEnabled")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ScreenSaverEnabled();

	[LibraryImport(LibName, EntryPoint = "SDL_EnableScreenSaver")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_EnableScreenSaver();

	[LibraryImport(LibName, EntryPoint = "SDL_DisableScreenSaver")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_DisableScreenSaver();

	[LibraryImport(LibName, EntryPoint = "SDL_GL_LoadLibrary")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GL_LoadLibrary(byte* path);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_LoadLibrary")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GL_LoadLibrary(ReadOnlySpan<byte> path);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_LoadLibrary")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GL_LoadLibrary([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_GetProcAddress")]
	public static partial delegate* unmanaged<void>* SDL_GL_GetProcAddress(byte* proc);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_GetProcAddress")]
	public static partial delegate* unmanaged<void>* SDL_GL_GetProcAddress(ReadOnlySpan<byte> proc);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_GetProcAddress")]
	public static partial delegate* unmanaged<void>* SDL_GL_GetProcAddress([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> proc);

	[LibraryImport(LibName, EntryPoint = "SDL_EGL_GetProcAddress")]
	public static partial delegate* unmanaged<void>* SDL_EGL_GetProcAddress(byte* proc);

	[LibraryImport(LibName, EntryPoint = "SDL_EGL_GetProcAddress")]
	public static partial delegate* unmanaged<void>* SDL_EGL_GetProcAddress(ReadOnlySpan<byte> proc);

	[LibraryImport(LibName, EntryPoint = "SDL_EGL_GetProcAddress")]
	public static partial delegate* unmanaged<void>* SDL_EGL_GetProcAddress([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> proc);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_UnloadLibrary")]
	public static partial void SDL_GL_UnloadLibrary();

	[LibraryImport(LibName, EntryPoint = "SDL_GL_ExtensionSupported")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GL_ExtensionSupported(byte* extension);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_ExtensionSupported")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GL_ExtensionSupported(ReadOnlySpan<byte> extension);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_ExtensionSupported")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GL_ExtensionSupported([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> extension);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_ResetAttributes")]
	public static partial void SDL_GL_ResetAttributes();

	[LibraryImport(LibName, EntryPoint = "SDL_GL_SetAttribute")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GL_SetAttribute(SDL_GLattr attr, int value);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_GetAttribute")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GL_GetAttribute(SDL_GLattr attr, int* value);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_CreateContext")]
	public static partial SDL_GLContext SDL_GL_CreateContext(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_MakeCurrent")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GL_MakeCurrent(SDL_Window window, SDL_GLContext context);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_GetCurrentWindow")]
	public static partial SDL_Window SDL_GL_GetCurrentWindow();

	[LibraryImport(LibName, EntryPoint = "SDL_GL_GetCurrentContext")]
	public static partial SDL_GLContext SDL_GL_GetCurrentContext();

	[LibraryImport(LibName, EntryPoint = "SDL_EGL_GetCurrentDisplay")]
	public static partial nint SDL_EGL_GetCurrentDisplay();

	[LibraryImport(LibName, EntryPoint = "SDL_EGL_GetCurrentConfig")]
	public static partial nint SDL_EGL_GetCurrentConfig();

	[LibraryImport(LibName, EntryPoint = "SDL_EGL_GetWindowSurface")]
	public static partial nint SDL_EGL_GetWindowSurface(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_EGL_SetAttributeCallbacks")]
	public static partial void SDL_EGL_SetAttributeCallbacks(delegate* unmanaged<nint> platformAttribCallback, delegate* unmanaged<int*> surfaceAttribCallback, delegate* unmanaged<int*> contextAttribCallback);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_SetSwapInterval")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GL_SetSwapInterval(int interval);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_GetSwapInterval")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GL_GetSwapInterval(int* interval);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_SwapWindow")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GL_SwapWindow(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_DestroyContext")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GL_DestroyContext(SDL_GLContext context);

	[LibraryImport(LibName, EntryPoint = "SDL_Vulkan_LoadLibrary")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_Vulkan_LoadLibrary(byte* path);

	[LibraryImport(LibName, EntryPoint = "SDL_Vulkan_LoadLibrary")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_Vulkan_LoadLibrary(ReadOnlySpan<byte> path);

	[LibraryImport(LibName, EntryPoint = "SDL_Vulkan_LoadLibrary")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_Vulkan_LoadLibrary([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> path);

	[LibraryImport(LibName, EntryPoint = "SDL_Vulkan_GetVkGetInstanceProcAddr")]
	public static partial delegate* unmanaged<void>* SDL_Vulkan_GetVkGetInstanceProcAddr();

	[LibraryImport(LibName, EntryPoint = "SDL_Vulkan_UnloadLibrary")]
	public static partial void SDL_Vulkan_UnloadLibrary();

	[LibraryImport(LibName, EntryPoint = "SDL_Vulkan_GetInstanceExtensions")]
	public static partial byte** SDL_Vulkan_GetInstanceExtensions(out uint count);

	[LibraryImport(LibName, EntryPoint = "SDL_Vulkan_CreateSurface")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_Vulkan_CreateSurface(SDL_Window window, nint instance, nint allocator, ulong** surface);

	[LibraryImport(LibName, EntryPoint = "SDL_Vulkan_DestroySurface")]
	public static partial void SDL_Vulkan_DestroySurface(nint instance, ulong* surface, nint allocator);

	[LibraryImport(LibName, EntryPoint = "SDL_Vulkan_GetPresentationSupport")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_Vulkan_GetPresentationSupport(nint instance, nint physicalDevice, uint queueFamilyIndex);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowsMessageHook")]
	public static partial void SDL_SetWindowsMessageHook(delegate* unmanaged<nint, tagMSG, bool> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_GetDirect3D9AdapterIndex")]
	public static partial int SDL_GetDirect3D9AdapterIndex(SDL_DisplayID displayID);

	[LibraryImport(LibName, EntryPoint = "SDL_GetDXGIOutputInfo")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GetDXGIOutputInfo(SDL_DisplayID displayID, int* adapterIndex, int* outputIndex);

	[LibraryImport(LibName, EntryPoint = "SDL_SetX11EventHook")]
	public static partial void SDL_SetX11EventHook(delegate* unmanaged<nint, _XEvent, bool> callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_SetiOSAnimationCallback")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetiOSAnimationCallback(SDL_Window window, int interval, delegate* unmanaged<nint, void> callback, nint callbackParam);

	[LibraryImport(LibName, EntryPoint = "SDL_SetiOSEventPump")]
	public static partial void SDL_SetiOSEventPump([MarshalAs(UnmanagedType.U1)] bool enabled);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAndroidJNIEnv")]
	public static partial nint SDL_GetAndroidJNIEnv();

	[LibraryImport(LibName, EntryPoint = "SDL_GetAndroidActivity")]
	public static partial nint SDL_GetAndroidActivity();

	[LibraryImport(LibName, EntryPoint = "SDL_GetAndroidSDKVersion")]
	public static partial int SDL_GetAndroidSDKVersion();

	[LibraryImport(LibName, EntryPoint = "SDL_IsAndroidTV")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_IsAndroidTV();

	[LibraryImport(LibName, EntryPoint = "SDL_IsChromebook")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_IsChromebook();

	[LibraryImport(LibName, EntryPoint = "SDL_IsDeXMode")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_IsDeXMode();

	[LibraryImport(LibName, EntryPoint = "SDL_SendAndroidBackButton")]
	public static partial void SDL_SendAndroidBackButton();

	[LibraryImport(LibName, EntryPoint = "SDL_GetAndroidInternalStoragePath")]
	public static partial byte* SDL_GetAndroidInternalStoragePathPtr();

	public static string? SDL_GetAndroidInternalStoragePath()
	{
		return ConvertToManaged(SDL_GetAndroidInternalStoragePathPtr());
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetAndroidExternalStorageState")]
	public static partial uint SDL_GetAndroidExternalStorageState();

	[LibraryImport(LibName, EntryPoint = "SDL_GetAndroidExternalStoragePath")]
	public static partial byte* SDL_GetAndroidExternalStoragePathPtr();

	public static string? SDL_GetAndroidExternalStoragePath()
	{
		return ConvertToManaged(SDL_GetAndroidExternalStoragePathPtr());
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetAndroidCachePath")]
	public static partial byte* SDL_GetAndroidCachePathPtr();

	public static string? SDL_GetAndroidCachePath()
	{
		return ConvertToManaged(SDL_GetAndroidCachePathPtr());
	}

	[LibraryImport(LibName, EntryPoint = "SDL_RequestAndroidPermission")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RequestAndroidPermission(byte* permission, delegate* unmanaged<nint, byte*, bool, void> cb, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_RequestAndroidPermission")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RequestAndroidPermission(ReadOnlySpan<byte> permission, delegate* unmanaged<nint, byte*, bool, void> cb, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_RequestAndroidPermission")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RequestAndroidPermission([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> permission, delegate* unmanaged<nint, byte*, bool, void> cb, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowAndroidToast")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ShowAndroidToast(byte* message, int duration, int gravity, int xoffset, int yoffset);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowAndroidToast")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ShowAndroidToast(ReadOnlySpan<byte> message, int duration, int gravity, int xoffset, int yoffset);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowAndroidToast")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ShowAndroidToast([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> message, int duration, int gravity, int xoffset, int yoffset);

	[LibraryImport(LibName, EntryPoint = "SDL_SendAndroidMessage")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SendAndroidMessage(uint command, int param);

	[LibraryImport(LibName, EntryPoint = "SDL_IsTablet")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_IsTablet();

	[LibraryImport(LibName, EntryPoint = "SDL_OnApplicationWillTerminate")]
	public static partial void SDL_OnApplicationWillTerminate();

	[LibraryImport(LibName, EntryPoint = "SDL_OnApplicationDidReceiveMemoryWarning")]
	public static partial void SDL_OnApplicationDidReceiveMemoryWarning();

	[LibraryImport(LibName, EntryPoint = "SDL_OnApplicationWillEnterBackground")]
	public static partial void SDL_OnApplicationWillEnterBackground();

	[LibraryImport(LibName, EntryPoint = "SDL_OnApplicationDidEnterBackground")]
	public static partial void SDL_OnApplicationDidEnterBackground();

	[LibraryImport(LibName, EntryPoint = "SDL_OnApplicationWillEnterForeground")]
	public static partial void SDL_OnApplicationWillEnterForeground();

	[LibraryImport(LibName, EntryPoint = "SDL_OnApplicationDidEnterForeground")]
	public static partial void SDL_OnApplicationDidEnterForeground();

	[LibraryImport(LibName, EntryPoint = "SDL_OnApplicationDidChangeStatusBarOrientation")]
	public static partial void SDL_OnApplicationDidChangeStatusBarOrientation();

	[LibraryImport(LibName, EntryPoint = "SDL_GPUSupportsShaderFormats")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GPUSupportsShaderFormats(SDL_GPUShaderFormat format_flags, byte* name);

	[LibraryImport(LibName, EntryPoint = "SDL_GPUSupportsShaderFormats")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GPUSupportsShaderFormats(SDL_GPUShaderFormat format_flags, ReadOnlySpan<byte> name);

	[LibraryImport(LibName, EntryPoint = "SDL_GPUSupportsShaderFormats")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GPUSupportsShaderFormats(SDL_GPUShaderFormat format_flags, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name);

	[LibraryImport(LibName, EntryPoint = "SDL_GPUSupportsProperties")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GPUSupportsProperties(SDL_PropertiesID props);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateGPUDevice")]
	public static partial SDL_GPUDevice SDL_CreateGPUDevice(SDL_GPUShaderFormat format_flags, [MarshalAs(UnmanagedType.U1)] bool debug_mode, byte* name);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateGPUDevice")]
	public static partial SDL_GPUDevice SDL_CreateGPUDevice(SDL_GPUShaderFormat format_flags, [MarshalAs(UnmanagedType.U1)] bool debug_mode, ReadOnlySpan<byte> name);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateGPUDevice")]
	public static partial SDL_GPUDevice SDL_CreateGPUDevice(SDL_GPUShaderFormat format_flags, [MarshalAs(UnmanagedType.U1)] bool debug_mode, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateGPUDeviceWithProperties")]
	public static partial SDL_GPUDevice SDL_CreateGPUDeviceWithProperties(SDL_PropertiesID props);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyGPUDevice")]
	public static partial void SDL_DestroyGPUDevice(SDL_GPUDevice device);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumGPUDrivers")]
	public static partial int SDL_GetNumGPUDrivers();

	[LibraryImport(LibName, EntryPoint = "SDL_GetGPUDriver")]
	public static partial byte* SDL_GetGPUDriverPtr(int index);

	public static string? SDL_GetGPUDriver(int index)
	{
		return ConvertToManaged(SDL_GetGPUDriverPtr(index));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetGPUDeviceDriver")]
	public static partial byte* SDL_GetGPUDeviceDriverPtr(SDL_GPUDevice device);

	public static string? SDL_GetGPUDeviceDriver(SDL_GPUDevice device)
	{
		return ConvertToManaged(SDL_GetGPUDeviceDriverPtr(device));
	}

	[LibraryImport(LibName, EntryPoint = "SDL_GetGPUShaderFormats")]
	public static partial SDL_GPUShaderFormat SDL_GetGPUShaderFormats(SDL_GPUDevice device);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateGPUComputePipeline")]
	public static partial SDL_GPUComputePipeline SDL_CreateGPUComputePipeline(SDL_GPUDevice device, SDL_GPUComputePipelineCreateInfo* createinfo);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateGPUGraphicsPipeline")]
	public static partial SDL_GPUGraphicsPipeline SDL_CreateGPUGraphicsPipeline(SDL_GPUDevice device, SDL_GPUGraphicsPipelineCreateInfo* createinfo);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateGPUSampler")]
	public static partial SDL_GPUSampler SDL_CreateGPUSampler(SDL_GPUDevice device, SDL_GPUSamplerCreateInfo* createinfo);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateGPUShader")]
	public static partial SDL_GPUShader SDL_CreateGPUShader(SDL_GPUDevice device, SDL_GPUShaderCreateInfo* createinfo);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateGPUTexture")]
	public static partial SDL_GPUTexture SDL_CreateGPUTexture(SDL_GPUDevice device, SDL_GPUTextureCreateInfo* createinfo);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateGPUBuffer")]
	public static partial SDL_GPUBuffer SDL_CreateGPUBuffer(SDL_GPUDevice device, SDL_GPUBufferCreateInfo* createinfo);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateGPUTransferBuffer")]
	public static partial SDL_GPUTransferBuffer SDL_CreateGPUTransferBuffer(SDL_GPUDevice device, SDL_GPUTransferBufferCreateInfo* createinfo);

	[LibraryImport(LibName, EntryPoint = "SDL_SetGPUBufferName")]
	public static partial void SDL_SetGPUBufferName(SDL_GPUDevice device, SDL_GPUBuffer buffer, byte* text);

	[LibraryImport(LibName, EntryPoint = "SDL_SetGPUBufferName")]
	public static partial void SDL_SetGPUBufferName(SDL_GPUDevice device, SDL_GPUBuffer buffer, ReadOnlySpan<byte> text);

	[LibraryImport(LibName, EntryPoint = "SDL_SetGPUBufferName")]
	public static partial void SDL_SetGPUBufferName(SDL_GPUDevice device, SDL_GPUBuffer buffer, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> text);

	[LibraryImport(LibName, EntryPoint = "SDL_SetGPUTextureName")]
	public static partial void SDL_SetGPUTextureName(SDL_GPUDevice device, SDL_GPUTexture texture, byte* text);

	[LibraryImport(LibName, EntryPoint = "SDL_SetGPUTextureName")]
	public static partial void SDL_SetGPUTextureName(SDL_GPUDevice device, SDL_GPUTexture texture, ReadOnlySpan<byte> text);

	[LibraryImport(LibName, EntryPoint = "SDL_SetGPUTextureName")]
	public static partial void SDL_SetGPUTextureName(SDL_GPUDevice device, SDL_GPUTexture texture, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> text);

	[LibraryImport(LibName, EntryPoint = "SDL_InsertGPUDebugLabel")]
	public static partial void SDL_InsertGPUDebugLabel(SDL_GPUCommandBuffer command_buffer, byte* text);

	[LibraryImport(LibName, EntryPoint = "SDL_InsertGPUDebugLabel")]
	public static partial void SDL_InsertGPUDebugLabel(SDL_GPUCommandBuffer command_buffer, ReadOnlySpan<byte> text);

	[LibraryImport(LibName, EntryPoint = "SDL_InsertGPUDebugLabel")]
	public static partial void SDL_InsertGPUDebugLabel(SDL_GPUCommandBuffer command_buffer, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> text);

	[LibraryImport(LibName, EntryPoint = "SDL_PushGPUDebugGroup")]
	public static partial void SDL_PushGPUDebugGroup(SDL_GPUCommandBuffer command_buffer, byte* name);

	[LibraryImport(LibName, EntryPoint = "SDL_PushGPUDebugGroup")]
	public static partial void SDL_PushGPUDebugGroup(SDL_GPUCommandBuffer command_buffer, ReadOnlySpan<byte> name);

	[LibraryImport(LibName, EntryPoint = "SDL_PushGPUDebugGroup")]
	public static partial void SDL_PushGPUDebugGroup(SDL_GPUCommandBuffer command_buffer, [global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name);

	[LibraryImport(LibName, EntryPoint = "SDL_PopGPUDebugGroup")]
	public static partial void SDL_PopGPUDebugGroup(SDL_GPUCommandBuffer command_buffer);

	[LibraryImport(LibName, EntryPoint = "SDL_ReleaseGPUTexture")]
	public static partial void SDL_ReleaseGPUTexture(SDL_GPUDevice device, SDL_GPUTexture texture);

	[LibraryImport(LibName, EntryPoint = "SDL_ReleaseGPUSampler")]
	public static partial void SDL_ReleaseGPUSampler(SDL_GPUDevice device, SDL_GPUSampler sampler);

	[LibraryImport(LibName, EntryPoint = "SDL_ReleaseGPUBuffer")]
	public static partial void SDL_ReleaseGPUBuffer(SDL_GPUDevice device, SDL_GPUBuffer buffer);

	[LibraryImport(LibName, EntryPoint = "SDL_ReleaseGPUTransferBuffer")]
	public static partial void SDL_ReleaseGPUTransferBuffer(SDL_GPUDevice device, SDL_GPUTransferBuffer transfer_buffer);

	[LibraryImport(LibName, EntryPoint = "SDL_ReleaseGPUComputePipeline")]
	public static partial void SDL_ReleaseGPUComputePipeline(SDL_GPUDevice device, SDL_GPUComputePipeline compute_pipeline);

	[LibraryImport(LibName, EntryPoint = "SDL_ReleaseGPUShader")]
	public static partial void SDL_ReleaseGPUShader(SDL_GPUDevice device, SDL_GPUShader shader);

	[LibraryImport(LibName, EntryPoint = "SDL_ReleaseGPUGraphicsPipeline")]
	public static partial void SDL_ReleaseGPUGraphicsPipeline(SDL_GPUDevice device, SDL_GPUGraphicsPipeline graphics_pipeline);

	[LibraryImport(LibName, EntryPoint = "SDL_AcquireGPUCommandBuffer")]
	public static partial SDL_GPUCommandBuffer SDL_AcquireGPUCommandBuffer(SDL_GPUDevice device);

	[LibraryImport(LibName, EntryPoint = "SDL_PushGPUVertexUniformData")]
	public static partial void SDL_PushGPUVertexUniformData(SDL_GPUCommandBuffer command_buffer, uint slot_index, nint data, uint length);

	[LibraryImport(LibName, EntryPoint = "SDL_PushGPUFragmentUniformData")]
	public static partial void SDL_PushGPUFragmentUniformData(SDL_GPUCommandBuffer command_buffer, uint slot_index, nint data, uint length);

	[LibraryImport(LibName, EntryPoint = "SDL_PushGPUComputeUniformData")]
	public static partial void SDL_PushGPUComputeUniformData(SDL_GPUCommandBuffer command_buffer, uint slot_index, nint data, uint length);

	[LibraryImport(LibName, EntryPoint = "SDL_BeginGPURenderPass")]
	public static partial SDL_GPURenderPass SDL_BeginGPURenderPass(SDL_GPUCommandBuffer command_buffer, SDL_GPUColorTargetInfo* color_target_infos, uint num_color_targets, SDL_GPUDepthStencilTargetInfo* depth_stencil_target_info);

	[LibraryImport(LibName, EntryPoint = "SDL_BindGPUGraphicsPipeline")]
	public static partial void SDL_BindGPUGraphicsPipeline(SDL_GPURenderPass render_pass, SDL_GPUGraphicsPipeline graphics_pipeline);

	[LibraryImport(LibName, EntryPoint = "SDL_SetGPUViewport")]
	public static partial void SDL_SetGPUViewport(SDL_GPURenderPass render_pass, SDL_GPUViewport* viewport);

	[LibraryImport(LibName, EntryPoint = "SDL_SetGPUScissor")]
	public static partial void SDL_SetGPUScissor(SDL_GPURenderPass render_pass, Rectangle* scissor);

	[LibraryImport(LibName, EntryPoint = "SDL_SetGPUBlendConstants")]
	public static partial void SDL_SetGPUBlendConstants(SDL_GPURenderPass render_pass, SDL_FColor blend_constants);

	[LibraryImport(LibName, EntryPoint = "SDL_SetGPUStencilReference")]
	public static partial void SDL_SetGPUStencilReference(SDL_GPURenderPass render_pass, byte reference);

	[LibraryImport(LibName, EntryPoint = "SDL_BindGPUVertexBuffers")]
	public static partial void SDL_BindGPUVertexBuffers(SDL_GPURenderPass render_pass, uint first_slot, SDL_GPUBufferBinding* bindings, uint num_bindings);

	[LibraryImport(LibName, EntryPoint = "SDL_BindGPUIndexBuffer")]
	public static partial void SDL_BindGPUIndexBuffer(SDL_GPURenderPass render_pass, SDL_GPUBufferBinding* binding, SDL_GPUIndexElementSize index_element_size);

	[LibraryImport(LibName, EntryPoint = "SDL_BindGPUVertexSamplers")]
	public static partial void SDL_BindGPUVertexSamplers(SDL_GPURenderPass render_pass, uint first_slot, SDL_GPUTextureSamplerBinding* texture_sampler_bindings, uint num_bindings);

	[LibraryImport(LibName, EntryPoint = "SDL_BindGPUVertexStorageTextures")]
	public static partial void SDL_BindGPUVertexStorageTextures(SDL_GPURenderPass render_pass, uint first_slot, SDL_GPUTexture** storage_textures, uint num_bindings);

	[LibraryImport(LibName, EntryPoint = "SDL_BindGPUVertexStorageBuffers")]
	public static partial void SDL_BindGPUVertexStorageBuffers(SDL_GPURenderPass render_pass, uint first_slot, SDL_GPUBuffer** storage_buffers, uint num_bindings);

	[LibraryImport(LibName, EntryPoint = "SDL_BindGPUFragmentSamplers")]
	public static partial void SDL_BindGPUFragmentSamplers(SDL_GPURenderPass render_pass, uint first_slot, SDL_GPUTextureSamplerBinding* texture_sampler_bindings, uint num_bindings);

	[LibraryImport(LibName, EntryPoint = "SDL_BindGPUFragmentStorageTextures")]
	public static partial void SDL_BindGPUFragmentStorageTextures(SDL_GPURenderPass render_pass, uint first_slot, SDL_GPUTexture** storage_textures, uint num_bindings);

	[LibraryImport(LibName, EntryPoint = "SDL_BindGPUFragmentStorageBuffers")]
	public static partial void SDL_BindGPUFragmentStorageBuffers(SDL_GPURenderPass render_pass, uint first_slot, SDL_GPUBuffer** storage_buffers, uint num_bindings);

	[LibraryImport(LibName, EntryPoint = "SDL_DrawGPUIndexedPrimitives")]
	public static partial void SDL_DrawGPUIndexedPrimitives(SDL_GPURenderPass render_pass, uint num_indices, uint num_instances, uint first_index, int vertex_offset, uint first_instance);

	[LibraryImport(LibName, EntryPoint = "SDL_DrawGPUPrimitives")]
	public static partial void SDL_DrawGPUPrimitives(SDL_GPURenderPass render_pass, uint num_vertices, uint num_instances, uint first_vertex, uint first_instance);

	[LibraryImport(LibName, EntryPoint = "SDL_DrawGPUPrimitivesIndirect")]
	public static partial void SDL_DrawGPUPrimitivesIndirect(SDL_GPURenderPass render_pass, SDL_GPUBuffer buffer, uint offset, uint draw_count);

	[LibraryImport(LibName, EntryPoint = "SDL_DrawGPUIndexedPrimitivesIndirect")]
	public static partial void SDL_DrawGPUIndexedPrimitivesIndirect(SDL_GPURenderPass render_pass, SDL_GPUBuffer buffer, uint offset, uint draw_count);

	[LibraryImport(LibName, EntryPoint = "SDL_EndGPURenderPass")]
	public static partial void SDL_EndGPURenderPass(SDL_GPURenderPass render_pass);

	[LibraryImport(LibName, EntryPoint = "SDL_BeginGPUComputePass")]
	public static partial SDL_GPUComputePass SDL_BeginGPUComputePass(SDL_GPUCommandBuffer command_buffer, SDL_GPUStorageTextureWriteOnlyBinding* storage_texture_bindings, uint num_storage_texture_bindings, SDL_GPUStorageBufferWriteOnlyBinding* storage_buffer_bindings, uint num_storage_buffer_bindings);

	[LibraryImport(LibName, EntryPoint = "SDL_BindGPUComputePipeline")]
	public static partial void SDL_BindGPUComputePipeline(SDL_GPUComputePass compute_pass, SDL_GPUComputePipeline compute_pipeline);

	[LibraryImport(LibName, EntryPoint = "SDL_BindGPUComputeSamplers")]
	public static partial void SDL_BindGPUComputeSamplers(SDL_GPUComputePass compute_pass, uint first_slot, SDL_GPUTextureSamplerBinding* texture_sampler_bindings, uint num_bindings);

	[LibraryImport(LibName, EntryPoint = "SDL_BindGPUComputeStorageTextures")]
	public static partial void SDL_BindGPUComputeStorageTextures(SDL_GPUComputePass compute_pass, uint first_slot, SDL_GPUTexture** storage_textures, uint num_bindings);

	[LibraryImport(LibName, EntryPoint = "SDL_BindGPUComputeStorageBuffers")]
	public static partial void SDL_BindGPUComputeStorageBuffers(SDL_GPUComputePass compute_pass, uint first_slot, SDL_GPUBuffer** storage_buffers, uint num_bindings);

	[LibraryImport(LibName, EntryPoint = "SDL_DispatchGPUCompute")]
	public static partial void SDL_DispatchGPUCompute(SDL_GPUComputePass compute_pass, uint groupcount_x, uint groupcount_y, uint groupcount_z);

	[LibraryImport(LibName, EntryPoint = "SDL_DispatchGPUComputeIndirect")]
	public static partial void SDL_DispatchGPUComputeIndirect(SDL_GPUComputePass compute_pass, SDL_GPUBuffer buffer, uint offset);

	[LibraryImport(LibName, EntryPoint = "SDL_EndGPUComputePass")]
	public static partial void SDL_EndGPUComputePass(SDL_GPUComputePass compute_pass);

	[LibraryImport(LibName, EntryPoint = "SDL_MapGPUTransferBuffer")]
	public static partial nint SDL_MapGPUTransferBuffer(SDL_GPUDevice device, SDL_GPUTransferBuffer transfer_buffer, [MarshalAs(UnmanagedType.U1)] bool cycle);

	[LibraryImport(LibName, EntryPoint = "SDL_UnmapGPUTransferBuffer")]
	public static partial void SDL_UnmapGPUTransferBuffer(SDL_GPUDevice device, SDL_GPUTransferBuffer transfer_buffer);

	[LibraryImport(LibName, EntryPoint = "SDL_BeginGPUCopyPass")]
	public static partial SDL_GPUCopyPass SDL_BeginGPUCopyPass(SDL_GPUCommandBuffer command_buffer);

	[LibraryImport(LibName, EntryPoint = "SDL_UploadToGPUTexture")]
	public static partial void SDL_UploadToGPUTexture(SDL_GPUCopyPass copy_pass, SDL_GPUTextureTransferInfo* source, SDL_GPUTextureRegion* destination, [MarshalAs(UnmanagedType.U1)] bool cycle);

	[LibraryImport(LibName, EntryPoint = "SDL_UploadToGPUBuffer")]
	public static partial void SDL_UploadToGPUBuffer(SDL_GPUCopyPass copy_pass, SDL_GPUTransferBufferLocation* source, SDL_GPUBufferRegion* destination, [MarshalAs(UnmanagedType.U1)] bool cycle);

	[LibraryImport(LibName, EntryPoint = "SDL_CopyGPUTextureToTexture")]
	public static partial void SDL_CopyGPUTextureToTexture(SDL_GPUCopyPass copy_pass, SDL_GPUTextureLocation* source, SDL_GPUTextureLocation* destination, uint w, uint h, uint d, [MarshalAs(UnmanagedType.U1)] bool cycle);

	[LibraryImport(LibName, EntryPoint = "SDL_CopyGPUBufferToBuffer")]
	public static partial void SDL_CopyGPUBufferToBuffer(SDL_GPUCopyPass copy_pass, SDL_GPUBufferLocation* source, SDL_GPUBufferLocation* destination, uint size, [MarshalAs(UnmanagedType.U1)] bool cycle);

	[LibraryImport(LibName, EntryPoint = "SDL_DownloadFromGPUTexture")]
	public static partial void SDL_DownloadFromGPUTexture(SDL_GPUCopyPass copy_pass, SDL_GPUTextureRegion* source, SDL_GPUTextureTransferInfo* destination);

	[LibraryImport(LibName, EntryPoint = "SDL_DownloadFromGPUBuffer")]
	public static partial void SDL_DownloadFromGPUBuffer(SDL_GPUCopyPass copy_pass, SDL_GPUBufferRegion* source, SDL_GPUTransferBufferLocation* destination);

	[LibraryImport(LibName, EntryPoint = "SDL_EndGPUCopyPass")]
	public static partial void SDL_EndGPUCopyPass(SDL_GPUCopyPass copy_pass);

	[LibraryImport(LibName, EntryPoint = "SDL_GenerateMipmapsForGPUTexture")]
	public static partial void SDL_GenerateMipmapsForGPUTexture(SDL_GPUCommandBuffer command_buffer, SDL_GPUTexture texture);

	[LibraryImport(LibName, EntryPoint = "SDL_BlitGPUTexture")]
	public static partial void SDL_BlitGPUTexture(SDL_GPUCommandBuffer command_buffer, SDL_GPUBlitInfo* info);

	[LibraryImport(LibName, EntryPoint = "SDL_WindowSupportsGPUSwapchainComposition")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WindowSupportsGPUSwapchainComposition(SDL_GPUDevice device, SDL_Window window, SDL_GPUSwapchainComposition swapchain_composition);

	[LibraryImport(LibName, EntryPoint = "SDL_WindowSupportsGPUPresentMode")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WindowSupportsGPUPresentMode(SDL_GPUDevice device, SDL_Window window, SDL_GPUPresentMode present_mode);

	[LibraryImport(LibName, EntryPoint = "SDL_ClaimWindowForGPUDevice")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_ClaimWindowForGPUDevice(SDL_GPUDevice device, SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_ReleaseWindowFromGPUDevice")]
	public static partial void SDL_ReleaseWindowFromGPUDevice(SDL_GPUDevice device, SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_SetGPUSwapchainParameters")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_SetGPUSwapchainParameters(SDL_GPUDevice device, SDL_Window window, SDL_GPUSwapchainComposition swapchain_composition, SDL_GPUPresentMode present_mode);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGPUSwapchainTextureFormat")]
	public static partial SDL_GPUTextureFormat SDL_GetGPUSwapchainTextureFormat(SDL_GPUDevice device, SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_AcquireGPUSwapchainTexture")]
	public static partial SDL_GPUTexture SDL_AcquireGPUSwapchainTexture(SDL_GPUCommandBuffer command_buffer, SDL_Window window, uint* w, uint* h);

	[LibraryImport(LibName, EntryPoint = "SDL_SubmitGPUCommandBuffer")]
	public static partial void SDL_SubmitGPUCommandBuffer(SDL_GPUCommandBuffer command_buffer);

	[LibraryImport(LibName, EntryPoint = "SDL_SubmitGPUCommandBufferAndAcquireFence")]
	public static partial SDL_GPUFence SDL_SubmitGPUCommandBufferAndAcquireFence(SDL_GPUCommandBuffer command_buffer);

	[LibraryImport(LibName, EntryPoint = "SDL_WaitForGPUIdle")]
	public static partial void SDL_WaitForGPUIdle(SDL_GPUDevice device);

	[LibraryImport(LibName, EntryPoint = "SDL_WaitForGPUFences")]
	public static partial void SDL_WaitForGPUFences(SDL_GPUDevice device, [MarshalAs(UnmanagedType.U1)] bool wait_all, SDL_GPUFence** fences, uint num_fences);

	[LibraryImport(LibName, EntryPoint = "SDL_QueryGPUFence")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_QueryGPUFence(SDL_GPUDevice device, SDL_GPUFence fence);

	[LibraryImport(LibName, EntryPoint = "SDL_ReleaseGPUFence")]
	public static partial void SDL_ReleaseGPUFence(SDL_GPUDevice device, SDL_GPUFence fence);

	[LibraryImport(LibName, EntryPoint = "SDL_GPUTextureFormatTexelBlockSize")]
	public static partial uint SDL_GPUTextureFormatTexelBlockSize(SDL_GPUTextureFormat format);

	[LibraryImport(LibName, EntryPoint = "SDL_GPUTextureSupportsFormat")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GPUTextureSupportsFormat(SDL_GPUDevice device, SDL_GPUTextureFormat format, SDL_GPUTextureType type, SDL_GPUTextureUsageFlags usage);

	[LibraryImport(LibName, EntryPoint = "SDL_GPUTextureSupportsSampleCount")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_GPUTextureSupportsSampleCount(SDL_GPUDevice device, SDL_GPUTextureFormat format, SDL_GPUSampleCount sample_count);

	[LibraryImport(LibName, EntryPoint = "SDL_main")]
	public static partial int SDL_main(int argc, byte** argv);

	[LibraryImport(LibName, EntryPoint = "SDL_SetMainReady")]
	public static partial void SDL_SetMainReady();

	[LibraryImport(LibName, EntryPoint = "SDL_RunApp")]
	public static partial int SDL_RunApp(int argc, byte** argv, delegate* unmanaged<int, byte**, int> mainFunction, nint reserved);

	[LibraryImport(LibName, EntryPoint = "SDL_EnterAppMainCallbacks")]
	public static partial int SDL_EnterAppMainCallbacks(int argc, byte** argv, delegate* unmanaged<nint, int, byte**, SDL_AppResult> appinit, delegate* unmanaged<nint, SDL_AppResult> appiter, delegate* unmanaged<nint, SDL_Event*, SDL_AppResult> appevent, delegate* unmanaged<nint, void> appquit);

	[LibraryImport(LibName, EntryPoint = "SDL_RegisterApp")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RegisterApp(byte* name, uint style, nint hInst);

	[LibraryImport(LibName, EntryPoint = "SDL_RegisterApp")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RegisterApp(ReadOnlySpan<byte> name, uint style, nint hInst);

	[LibraryImport(LibName, EntryPoint = "SDL_RegisterApp")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_RegisterApp([global::System.Runtime.InteropServices.Marshalling.MarshalUsing(typeof(Utf8CustomMarshaller))] ReadOnlySpan<char> name, uint style, nint hInst);

	[LibraryImport(LibName, EntryPoint = "SDL_UnregisterApp")]
	public static partial void SDL_UnregisterApp();

	[LibraryImport(LibName, EntryPoint = "SDL_CreateProcess")]
	public static partial SDL_Process SDL_CreateProcess(byte** args, [MarshalAs(UnmanagedType.U1)] bool pipe_stdio);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateProcessWithProperties")]
	public static partial SDL_Process SDL_CreateProcessWithProperties(SDL_PropertiesID props);

	[LibraryImport(LibName, EntryPoint = "SDL_GetProcessProperties")]
	public static partial SDL_PropertiesID SDL_GetProcessProperties(SDL_Process process);

	[LibraryImport(LibName, EntryPoint = "SDL_ReadProcess")]
	public static partial nint SDL_ReadProcess(SDL_Process process, nuint* datasize, int* exitcode);

	[LibraryImport(LibName, EntryPoint = "SDL_GetProcessInput")]
	public static partial SDL_IOStream SDL_GetProcessInput(SDL_Process process);

	[LibraryImport(LibName, EntryPoint = "SDL_GetProcessOutput")]
	public static partial SDL_IOStream SDL_GetProcessOutput(SDL_Process process);

	[LibraryImport(LibName, EntryPoint = "SDL_KillProcess")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_KillProcess(SDL_Process process, [MarshalAs(UnmanagedType.U1)] bool force);

	[LibraryImport(LibName, EntryPoint = "SDL_WaitProcess")]
	[return: MarshalAs(UnmanagedType.U1)]
	public static partial bool SDL_WaitProcess(SDL_Process process, [MarshalAs(UnmanagedType.U1)] bool block, int* exitcode);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyProcess")]
	public static partial void SDL_DestroyProcess(SDL_Process process);

}
