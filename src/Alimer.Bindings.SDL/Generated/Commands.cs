// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

#nullable enable

using System;
using System.Runtime.InteropServices;
using System.Drawing;

namespace SDL;

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public unsafe delegate void SDL_EnumeratePropertiesCallback(nint userdata, SDL_PropertiesID props, byte* name);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public unsafe delegate void* SDL_ClipboardDataCallback(nint userdata, byte* mime_type, nuint* size);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public unsafe delegate void SDL_ClipboardCleanupCallback(nint userdata);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public unsafe delegate uint SDL_TimerCallback(uint interval, nint param);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public unsafe delegate void SDL_AudioStreamCallback(nint userdata, SDL_AudioStream stream, int additional_amount, int total_amount);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public unsafe delegate void SDL_AudioPostmixCallback(nint userdata, SDL_AudioSpec* spec, float* buffer, int buflen);

[UnmanagedFunctionPointer(CallingConvention.Cdecl)]
public unsafe delegate void SDL_HintCallback(nint userdata, byte* name, byte* oldValue, byte* newValue);

public unsafe partial class SDL
{
	[LibraryImport(LibName, EntryPoint = "SDL_GetGlobalProperties")]
	public static partial SDL_PropertiesID SDL_GetGlobalProperties();

	[LibraryImport(LibName, EntryPoint = "SDL_CreateProperties")]
	public static partial SDL_PropertiesID SDL_CreateProperties();

	[LibraryImport(LibName, EntryPoint = "SDL_LockProperties")]
	public static partial int SDL_LockProperties(SDL_PropertiesID props);

	[LibraryImport(LibName, EntryPoint = "SDL_UnlockProperties")]
	public static partial void SDL_UnlockProperties(SDL_PropertiesID props);

	[LibraryImport(LibName, EntryPoint = "SDL_SetProperty")]
	public static partial int SDL_SetProperty(SDL_PropertiesID props, byte* name, nint value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetStringProperty")]
	public static partial int SDL_SetStringProperty(SDL_PropertiesID props, byte* name, byte* value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetNumberProperty")]
	public static partial int SDL_SetNumberProperty(SDL_PropertiesID props, byte* name, long value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetFloatProperty")]
	public static partial int SDL_SetFloatProperty(SDL_PropertiesID props, byte* name, float value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetBooleanProperty")]
	public static partial int SDL_SetBooleanProperty(SDL_PropertiesID props, byte* name, SDL_bool value);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPropertyType")]
	public static partial SDL_PropertyType SDL_GetPropertyType(SDL_PropertiesID props, byte* name);

	[LibraryImport(LibName, EntryPoint = "SDL_GetProperty")]
	public static partial nint SDL_GetProperty(SDL_PropertiesID props, byte* name, nint default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_GetStringProperty")]
	public static partial byte* SDL_GetStringProperty(SDL_PropertiesID props, byte* name, byte* default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumberProperty")]
	public static partial long SDL_GetNumberProperty(SDL_PropertiesID props, byte* name, long default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_GetFloatProperty")]
	public static partial float SDL_GetFloatProperty(SDL_PropertiesID props, byte* name, float default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_GetBooleanProperty")]
	public static partial SDL_bool SDL_GetBooleanProperty(SDL_PropertiesID props, byte* name, SDL_bool default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_ClearProperty")]
	public static partial int SDL_ClearProperty(SDL_PropertiesID props, byte* name);

	[LibraryImport(LibName, EntryPoint = "SDL_EnumerateProperties")]
	public static partial int SDL_EnumerateProperties(SDL_PropertiesID props, SDL_EnumeratePropertiesCallback callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyProperties")]
	public static partial void SDL_DestroyProperties(SDL_PropertiesID props);

	[LibraryImport(LibName, EntryPoint = "SDL_SetError")]
	public static partial int SDL_SetError(byte* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_GetError")]
	public static partial byte* SDL_GetError();

	[LibraryImport(LibName, EntryPoint = "SDL_ClearError")]
	public static partial void SDL_ClearError();

	[LibraryImport(LibName, EntryPoint = "SDL_Error")]
	public static partial int SDL_Error(SDL_errorcode code);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPens")]
	public static partial SDL_PenID* SDL_GetPens(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPenStatus")]
	public static partial uint SDL_GetPenStatus(SDL_PenID instance_id, float* x, float* y, float* axes, nuint num_axes);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPenFromGUID")]
	public static partial SDL_PenID SDL_GetPenFromGUID(Guid guid);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPenGUID")]
	public static partial Guid SDL_GetPenGUID(SDL_PenID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_PenConnected")]
	public static partial SDL_bool SDL_PenConnected(SDL_PenID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPenName")]
	public static partial byte* SDL_GetPenName(SDL_PenID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPenCapabilities")]
	public static partial uint SDL_GetPenCapabilities(SDL_PenID instance_id, SDL_PenCapabilityInfo* capabilities);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPenType")]
	public static partial SDL_PenSubtype SDL_GetPenType(SDL_PenID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_Init")]
	public static partial int SDL_Init(uint flags);

	[LibraryImport(LibName, EntryPoint = "SDL_InitSubSystem")]
	public static partial int SDL_InitSubSystem(uint flags);

	[LibraryImport(LibName, EntryPoint = "SDL_QuitSubSystem")]
	public static partial void SDL_QuitSubSystem(uint flags);

	[LibraryImport(LibName, EntryPoint = "SDL_WasInit")]
	public static partial uint SDL_WasInit(uint flags);

	[LibraryImport(LibName, EntryPoint = "SDL_Quit")]
	public static partial void SDL_Quit();

	[LibraryImport(LibName, EntryPoint = "SDL_GetPlatform")]
	public static partial byte* SDL_GetPlatform();

	[LibraryImport(LibName, EntryPoint = "SDL_SetClipboardText")]
	public static partial int SDL_SetClipboardText(byte* text);

	[LibraryImport(LibName, EntryPoint = "SDL_GetClipboardText")]
	public static partial byte* SDL_GetClipboardText();

	[LibraryImport(LibName, EntryPoint = "SDL_HasClipboardText")]
	public static partial SDL_bool SDL_HasClipboardText();

	[LibraryImport(LibName, EntryPoint = "SDL_SetPrimarySelectionText")]
	public static partial int SDL_SetPrimarySelectionText(byte* text);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPrimarySelectionText")]
	public static partial byte* SDL_GetPrimarySelectionText();

	[LibraryImport(LibName, EntryPoint = "SDL_HasPrimarySelectionText")]
	public static partial SDL_bool SDL_HasPrimarySelectionText();

	[LibraryImport(LibName, EntryPoint = "SDL_SetClipboardData")]
	public static partial int SDL_SetClipboardData(SDL_ClipboardDataCallback callback, SDL_ClipboardCleanupCallback cleanup, nint userdata, byte** mime_types, nuint num_mime_types);

	[LibraryImport(LibName, EntryPoint = "SDL_ClearClipboardData")]
	public static partial int SDL_ClearClipboardData();

	[LibraryImport(LibName, EntryPoint = "SDL_GetClipboardData")]
	public static partial nint SDL_GetClipboardData(byte* mime_type, nuint* size);

	[LibraryImport(LibName, EntryPoint = "SDL_HasClipboardData")]
	public static partial SDL_bool SDL_HasClipboardData(byte* mime_type);

	[LibraryImport(LibName, EntryPoint = "SDL_GetCPUCount")]
	public static partial int SDL_GetCPUCount();

	[LibraryImport(LibName, EntryPoint = "SDL_GetCPUCacheLineSize")]
	public static partial int SDL_GetCPUCacheLineSize();

	[LibraryImport(LibName, EntryPoint = "SDL_HasAltiVec")]
	public static partial SDL_bool SDL_HasAltiVec();

	[LibraryImport(LibName, EntryPoint = "SDL_HasMMX")]
	public static partial SDL_bool SDL_HasMMX();

	[LibraryImport(LibName, EntryPoint = "SDL_HasSSE")]
	public static partial SDL_bool SDL_HasSSE();

	[LibraryImport(LibName, EntryPoint = "SDL_HasSSE2")]
	public static partial SDL_bool SDL_HasSSE2();

	[LibraryImport(LibName, EntryPoint = "SDL_HasSSE3")]
	public static partial SDL_bool SDL_HasSSE3();

	[LibraryImport(LibName, EntryPoint = "SDL_HasSSE41")]
	public static partial SDL_bool SDL_HasSSE41();

	[LibraryImport(LibName, EntryPoint = "SDL_HasSSE42")]
	public static partial SDL_bool SDL_HasSSE42();

	[LibraryImport(LibName, EntryPoint = "SDL_HasAVX")]
	public static partial SDL_bool SDL_HasAVX();

	[LibraryImport(LibName, EntryPoint = "SDL_HasAVX2")]
	public static partial SDL_bool SDL_HasAVX2();

	[LibraryImport(LibName, EntryPoint = "SDL_HasAVX512F")]
	public static partial SDL_bool SDL_HasAVX512F();

	[LibraryImport(LibName, EntryPoint = "SDL_HasARMSIMD")]
	public static partial SDL_bool SDL_HasARMSIMD();

	[LibraryImport(LibName, EntryPoint = "SDL_HasNEON")]
	public static partial SDL_bool SDL_HasNEON();

	[LibraryImport(LibName, EntryPoint = "SDL_HasLSX")]
	public static partial SDL_bool SDL_HasLSX();

	[LibraryImport(LibName, EntryPoint = "SDL_HasLASX")]
	public static partial SDL_bool SDL_HasLASX();

	[LibraryImport(LibName, EntryPoint = "SDL_GetSystemRAM")]
	public static partial int SDL_GetSystemRAM();

	[LibraryImport(LibName, EntryPoint = "SDL_SIMDGetAlignment")]
	public static partial nuint SDL_SIMDGetAlignment();

	[LibraryImport(LibName, EntryPoint = "SDL_LoadObject")]
	public static partial nint SDL_LoadObject(byte* sofile);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadFunction")]
	public static partial delegate* unmanaged<void> SDL_LoadFunction(nint handle, byte* name);

	[LibraryImport(LibName, EntryPoint = "SDL_UnloadObject")]
	public static partial void SDL_UnloadObject(nint handle);

	[LibraryImport(LibName, EntryPoint = "SDL_GetKeyboardFocus")]
	public static partial SDL_Window SDL_GetKeyboardFocus();

	[LibraryImport(LibName, EntryPoint = "SDL_GetKeyboardState")]
	public static partial byte* SDL_GetKeyboardState(int* numkeys);

	[LibraryImport(LibName, EntryPoint = "SDL_ResetKeyboard")]
	public static partial void SDL_ResetKeyboard();

	[LibraryImport(LibName, EntryPoint = "SDL_GetModState")]
	public static partial SDL_Keymod SDL_GetModState();

	[LibraryImport(LibName, EntryPoint = "SDL_SetModState")]
	public static partial void SDL_SetModState(SDL_Keymod modstate);

	[LibraryImport(LibName, EntryPoint = "SDL_GetKeyFromScancode")]
	public static partial SDL_KeyCode SDL_GetKeyFromScancode(SDL_Scancode scancode);

	[LibraryImport(LibName, EntryPoint = "SDL_GetScancodeFromKey")]
	public static partial SDL_Scancode SDL_GetScancodeFromKey(SDL_KeyCode key);

	[LibraryImport(LibName, EntryPoint = "SDL_GetScancodeName")]
	public static partial byte* SDL_GetScancodeName(SDL_Scancode scancode);

	[LibraryImport(LibName, EntryPoint = "SDL_GetScancodeFromName")]
	public static partial SDL_Scancode SDL_GetScancodeFromName(byte* name);

	[LibraryImport(LibName, EntryPoint = "SDL_GetKeyName")]
	public static partial byte* SDL_GetKeyName(SDL_KeyCode key);

	[LibraryImport(LibName, EntryPoint = "SDL_GetKeyFromName")]
	public static partial SDL_KeyCode SDL_GetKeyFromName(byte* name);

	[LibraryImport(LibName, EntryPoint = "SDL_StartTextInput")]
	public static partial void SDL_StartTextInput();

	[LibraryImport(LibName, EntryPoint = "SDL_TextInputActive")]
	public static partial SDL_bool SDL_TextInputActive();

	[LibraryImport(LibName, EntryPoint = "SDL_StopTextInput")]
	public static partial void SDL_StopTextInput();

	[LibraryImport(LibName, EntryPoint = "SDL_ClearComposition")]
	public static partial void SDL_ClearComposition();

	[LibraryImport(LibName, EntryPoint = "SDL_TextInputShown")]
	public static partial SDL_bool SDL_TextInputShown();

	[LibraryImport(LibName, EntryPoint = "SDL_SetTextInputRect")]
	public static partial int SDL_SetTextInputRect(Rectangle* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_HasScreenKeyboardSupport")]
	public static partial SDL_bool SDL_HasScreenKeyboardSupport();

	[LibraryImport(LibName, EntryPoint = "SDL_ScreenKeyboardShown")]
	public static partial SDL_bool SDL_ScreenKeyboardShown(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowMessageBox")]
	public static partial int SDL_ShowMessageBox(SDL_MessageBoxData* messageboxdata, int* buttonid);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowSimpleMessageBox")]
	public static partial int SDL_ShowSimpleMessageBox(uint flags, byte* title, byte* message, SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_LockJoysticks")]
	public static partial void SDL_LockJoysticks();

	[LibraryImport(LibName, EntryPoint = "SDL_UnlockJoysticks")]
	public static partial void SDL_UnlockJoysticks();

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoysticks")]
	public static partial SDL_JoystickID* SDL_GetJoysticks(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickInstanceName")]
	public static partial byte* SDL_GetJoystickInstanceName(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickInstancePath")]
	public static partial byte* SDL_GetJoystickInstancePath(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickInstancePlayerIndex")]
	public static partial int SDL_GetJoystickInstancePlayerIndex(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickInstanceGUID")]
	public static partial Guid SDL_GetJoystickInstanceGUID(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickInstanceVendor")]
	public static partial ushort SDL_GetJoystickInstanceVendor(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickInstanceProduct")]
	public static partial ushort SDL_GetJoystickInstanceProduct(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickInstanceProductVersion")]
	public static partial ushort SDL_GetJoystickInstanceProductVersion(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickInstanceType")]
	public static partial SDL_JoystickType SDL_GetJoystickInstanceType(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenJoystick")]
	public static partial SDL_Joystick SDL_OpenJoystick(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickFromInstanceID")]
	public static partial SDL_Joystick SDL_GetJoystickFromInstanceID(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickFromPlayerIndex")]
	public static partial SDL_Joystick SDL_GetJoystickFromPlayerIndex(int player_index);

	[LibraryImport(LibName, EntryPoint = "SDL_AttachVirtualJoystick")]
	public static partial SDL_JoystickID SDL_AttachVirtualJoystick(SDL_JoystickType type, int naxes, int nbuttons, int nhats);

	[LibraryImport(LibName, EntryPoint = "SDL_AttachVirtualJoystickEx")]
	public static partial SDL_JoystickID SDL_AttachVirtualJoystickEx(SDL_VirtualJoystickDesc* desc);

	[LibraryImport(LibName, EntryPoint = "SDL_DetachVirtualJoystick")]
	public static partial int SDL_DetachVirtualJoystick(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_IsJoystickVirtual")]
	public static partial SDL_bool SDL_IsJoystickVirtual(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_SetJoystickVirtualAxis")]
	public static partial int SDL_SetJoystickVirtualAxis(SDL_Joystick joystick, int axis, short value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetJoystickVirtualButton")]
	public static partial int SDL_SetJoystickVirtualButton(SDL_Joystick joystick, int button, byte value);

	[LibraryImport(LibName, EntryPoint = "SDL_SetJoystickVirtualHat")]
	public static partial int SDL_SetJoystickVirtualHat(SDL_Joystick joystick, int hat, byte value);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickProperties")]
	public static partial SDL_PropertiesID SDL_GetJoystickProperties(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickName")]
	public static partial byte* SDL_GetJoystickName(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickPath")]
	public static partial byte* SDL_GetJoystickPath(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickPlayerIndex")]
	public static partial int SDL_GetJoystickPlayerIndex(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_SetJoystickPlayerIndex")]
	public static partial int SDL_SetJoystickPlayerIndex(SDL_Joystick joystick, int player_index);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickGUID")]
	public static partial Guid SDL_GetJoystickGUID(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickVendor")]
	public static partial ushort SDL_GetJoystickVendor(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickProduct")]
	public static partial ushort SDL_GetJoystickProduct(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickProductVersion")]
	public static partial ushort SDL_GetJoystickProductVersion(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickFirmwareVersion")]
	public static partial ushort SDL_GetJoystickFirmwareVersion(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickSerial")]
	public static partial byte* SDL_GetJoystickSerial(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickType")]
	public static partial SDL_JoystickType SDL_GetJoystickType(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickGUIDString")]
	public static partial int SDL_GetJoystickGUIDString(Guid guid, byte* pszGUID, int cbGUID);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickGUIDFromString")]
	public static partial Guid SDL_GetJoystickGUIDFromString(byte* pchGUID);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickGUIDInfo")]
	public static partial void SDL_GetJoystickGUIDInfo(Guid guid, ushort* vendor, ushort* product, ushort* version, ushort* crc16);

	[LibraryImport(LibName, EntryPoint = "SDL_JoystickConnected")]
	public static partial SDL_bool SDL_JoystickConnected(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickInstanceID")]
	public static partial SDL_JoystickID SDL_GetJoystickInstanceID(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumJoystickAxes")]
	public static partial int SDL_GetNumJoystickAxes(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumJoystickHats")]
	public static partial int SDL_GetNumJoystickHats(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumJoystickButtons")]
	public static partial int SDL_GetNumJoystickButtons(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_SetJoystickEventsEnabled")]
	public static partial void SDL_SetJoystickEventsEnabled(SDL_bool enabled);

	[LibraryImport(LibName, EntryPoint = "SDL_JoystickEventsEnabled")]
	public static partial SDL_bool SDL_JoystickEventsEnabled();

	[LibraryImport(LibName, EntryPoint = "SDL_UpdateJoysticks")]
	public static partial void SDL_UpdateJoysticks();

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickAxis")]
	public static partial short SDL_GetJoystickAxis(SDL_Joystick joystick, int axis);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickAxisInitialState")]
	public static partial SDL_bool SDL_GetJoystickAxisInitialState(SDL_Joystick joystick, int axis, short* state);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickHat")]
	public static partial byte SDL_GetJoystickHat(SDL_Joystick joystick, int hat);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickButton")]
	public static partial byte SDL_GetJoystickButton(SDL_Joystick joystick, int button);

	[LibraryImport(LibName, EntryPoint = "SDL_RumbleJoystick")]
	public static partial int SDL_RumbleJoystick(SDL_Joystick joystick, ushort low_frequency_rumble, ushort high_frequency_rumble, uint duration_ms);

	[LibraryImport(LibName, EntryPoint = "SDL_RumbleJoystickTriggers")]
	public static partial int SDL_RumbleJoystickTriggers(SDL_Joystick joystick, ushort left_rumble, ushort right_rumble, uint duration_ms);

	[LibraryImport(LibName, EntryPoint = "SDL_SetJoystickLED")]
	public static partial int SDL_SetJoystickLED(SDL_Joystick joystick, byte red, byte green, byte blue);

	[LibraryImport(LibName, EntryPoint = "SDL_SendJoystickEffect")]
	public static partial int SDL_SendJoystickEffect(SDL_Joystick joystick, void* data, int size);

	[LibraryImport(LibName, EntryPoint = "SDL_CloseJoystick")]
	public static partial void SDL_CloseJoystick(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_GetJoystickPowerLevel")]
	public static partial SDL_JoystickPowerLevel SDL_GetJoystickPowerLevel(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_AddGamepadMapping")]
	public static partial int SDL_AddGamepadMapping(byte* mapping);

	[LibraryImport(LibName, EntryPoint = "SDL_AddGamepadMappingsFromRW")]
	public static partial int SDL_AddGamepadMappingsFromRW(nint src, SDL_bool freesrc);

	[LibraryImport(LibName, EntryPoint = "SDL_AddGamepadMappingsFromFile")]
	public static partial int SDL_AddGamepadMappingsFromFile(byte* file);

	[LibraryImport(LibName, EntryPoint = "SDL_ReloadGamepadMappings")]
	public static partial int SDL_ReloadGamepadMappings();

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadMappings")]
	public static partial byte** SDL_GetGamepadMappings(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadMappingForGUID")]
	public static partial byte* SDL_GetGamepadMappingForGUID(Guid guid);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadMapping")]
	public static partial byte* SDL_GetGamepadMapping(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_SetGamepadMapping")]
	public static partial int SDL_SetGamepadMapping(SDL_JoystickID instance_id, byte* mapping);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepads")]
	public static partial SDL_JoystickID* SDL_GetGamepads(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_IsGamepad")]
	public static partial SDL_bool SDL_IsGamepad(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadInstanceName")]
	public static partial byte* SDL_GetGamepadInstanceName(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadInstancePath")]
	public static partial byte* SDL_GetGamepadInstancePath(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadInstancePlayerIndex")]
	public static partial int SDL_GetGamepadInstancePlayerIndex(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadInstanceGUID")]
	public static partial Guid SDL_GetGamepadInstanceGUID(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadInstanceVendor")]
	public static partial ushort SDL_GetGamepadInstanceVendor(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadInstanceProduct")]
	public static partial ushort SDL_GetGamepadInstanceProduct(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadInstanceProductVersion")]
	public static partial ushort SDL_GetGamepadInstanceProductVersion(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadInstanceType")]
	public static partial SDL_GamepadType SDL_GetGamepadInstanceType(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRealGamepadInstanceType")]
	public static partial SDL_GamepadType SDL_GetRealGamepadInstanceType(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadInstanceMapping")]
	public static partial byte* SDL_GetGamepadInstanceMapping(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenGamepad")]
	public static partial SDL_Gamepad SDL_OpenGamepad(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadFromInstanceID")]
	public static partial SDL_Gamepad SDL_GetGamepadFromInstanceID(SDL_JoystickID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadFromPlayerIndex")]
	public static partial SDL_Gamepad SDL_GetGamepadFromPlayerIndex(int player_index);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadProperties")]
	public static partial SDL_PropertiesID SDL_GetGamepadProperties(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadInstanceID")]
	public static partial SDL_JoystickID SDL_GetGamepadInstanceID(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadName")]
	public static partial byte* SDL_GetGamepadName(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadPath")]
	public static partial byte* SDL_GetGamepadPath(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadType")]
	public static partial SDL_GamepadType SDL_GetGamepadType(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRealGamepadType")]
	public static partial SDL_GamepadType SDL_GetRealGamepadType(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadPlayerIndex")]
	public static partial int SDL_GetGamepadPlayerIndex(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_SetGamepadPlayerIndex")]
	public static partial int SDL_SetGamepadPlayerIndex(SDL_Gamepad gamepad, int player_index);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadVendor")]
	public static partial ushort SDL_GetGamepadVendor(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadProduct")]
	public static partial ushort SDL_GetGamepadProduct(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadProductVersion")]
	public static partial ushort SDL_GetGamepadProductVersion(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadFirmwareVersion")]
	public static partial ushort SDL_GetGamepadFirmwareVersion(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadSerial")]
	public static partial byte* SDL_GetGamepadSerial(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadSteamHandle")]
	public static partial ulong SDL_GetGamepadSteamHandle(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadPowerLevel")]
	public static partial SDL_JoystickPowerLevel SDL_GetGamepadPowerLevel(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GamepadConnected")]
	public static partial SDL_bool SDL_GamepadConnected(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadJoystick")]
	public static partial SDL_Joystick SDL_GetGamepadJoystick(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_SetGamepadEventsEnabled")]
	public static partial void SDL_SetGamepadEventsEnabled(SDL_bool enabled);

	[LibraryImport(LibName, EntryPoint = "SDL_GamepadEventsEnabled")]
	public static partial SDL_bool SDL_GamepadEventsEnabled();

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadBindings")]
	public static partial SDL_GamepadBinding** SDL_GetGamepadBindings(SDL_Gamepad gamepad, out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_UpdateGamepads")]
	public static partial void SDL_UpdateGamepads();

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadTypeFromString")]
	public static partial SDL_GamepadType SDL_GetGamepadTypeFromString(byte* str);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadStringForType")]
	public static partial byte* SDL_GetGamepadStringForType(SDL_GamepadType type);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadAxisFromString")]
	public static partial SDL_GamepadAxis SDL_GetGamepadAxisFromString(byte* str);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadStringForAxis")]
	public static partial byte* SDL_GetGamepadStringForAxis(SDL_GamepadAxis axis);

	[LibraryImport(LibName, EntryPoint = "SDL_GamepadHasAxis")]
	public static partial SDL_bool SDL_GamepadHasAxis(SDL_Gamepad gamepad, SDL_GamepadAxis axis);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadAxis")]
	public static partial short SDL_GetGamepadAxis(SDL_Gamepad gamepad, SDL_GamepadAxis axis);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadButtonFromString")]
	public static partial SDL_GamepadButton SDL_GetGamepadButtonFromString(byte* str);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadStringForButton")]
	public static partial byte* SDL_GetGamepadStringForButton(SDL_GamepadButton button);

	[LibraryImport(LibName, EntryPoint = "SDL_GamepadHasButton")]
	public static partial SDL_bool SDL_GamepadHasButton(SDL_Gamepad gamepad, SDL_GamepadButton button);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadButton")]
	public static partial byte SDL_GetGamepadButton(SDL_Gamepad gamepad, SDL_GamepadButton button);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadButtonLabelForType")]
	public static partial SDL_GamepadButtonLabel SDL_GetGamepadButtonLabelForType(SDL_GamepadType type, SDL_GamepadButton button);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadButtonLabel")]
	public static partial SDL_GamepadButtonLabel SDL_GetGamepadButtonLabel(SDL_Gamepad gamepad, SDL_GamepadButton button);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumGamepadTouchpads")]
	public static partial int SDL_GetNumGamepadTouchpads(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumGamepadTouchpadFingers")]
	public static partial int SDL_GetNumGamepadTouchpadFingers(SDL_Gamepad gamepad, int touchpad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadTouchpadFinger")]
	public static partial int SDL_GetGamepadTouchpadFinger(SDL_Gamepad gamepad, int touchpad, int finger, byte* state, float* x, float* y, float* pressure);

	[LibraryImport(LibName, EntryPoint = "SDL_GamepadHasSensor")]
	public static partial SDL_bool SDL_GamepadHasSensor(SDL_Gamepad gamepad, SDL_SensorType type);

	[LibraryImport(LibName, EntryPoint = "SDL_SetGamepadSensorEnabled")]
	public static partial int SDL_SetGamepadSensorEnabled(SDL_Gamepad gamepad, SDL_SensorType type, SDL_bool enabled);

	[LibraryImport(LibName, EntryPoint = "SDL_GamepadSensorEnabled")]
	public static partial SDL_bool SDL_GamepadSensorEnabled(SDL_Gamepad gamepad, SDL_SensorType type);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadSensorDataRate")]
	public static partial float SDL_GetGamepadSensorDataRate(SDL_Gamepad gamepad, SDL_SensorType type);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadSensorData")]
	public static partial int SDL_GetGamepadSensorData(SDL_Gamepad gamepad, SDL_SensorType type, float* data, int num_values);

	[LibraryImport(LibName, EntryPoint = "SDL_RumbleGamepad")]
	public static partial int SDL_RumbleGamepad(SDL_Gamepad gamepad, ushort low_frequency_rumble, ushort high_frequency_rumble, uint duration_ms);

	[LibraryImport(LibName, EntryPoint = "SDL_RumbleGamepadTriggers")]
	public static partial int SDL_RumbleGamepadTriggers(SDL_Gamepad gamepad, ushort left_rumble, ushort right_rumble, uint duration_ms);

	[LibraryImport(LibName, EntryPoint = "SDL_SetGamepadLED")]
	public static partial int SDL_SetGamepadLED(SDL_Gamepad gamepad, byte red, byte green, byte blue);

	[LibraryImport(LibName, EntryPoint = "SDL_SendGamepadEffect")]
	public static partial int SDL_SendGamepadEffect(SDL_Gamepad gamepad, void* data, int size);

	[LibraryImport(LibName, EntryPoint = "SDL_CloseGamepad")]
	public static partial void SDL_CloseGamepad(SDL_Gamepad gamepad);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForButton")]
	public static partial byte* SDL_GetGamepadAppleSFSymbolsNameForButton(SDL_Gamepad gamepad, SDL_GamepadButton button);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGamepadAppleSFSymbolsNameForAxis")]
	public static partial byte* SDL_GetGamepadAppleSFSymbolsNameForAxis(SDL_Gamepad gamepad, SDL_GamepadAxis axis);

	[LibraryImport(LibName, EntryPoint = "SDL_GetMouseFocus")]
	public static partial SDL_Window SDL_GetMouseFocus();

	[LibraryImport(LibName, EntryPoint = "SDL_GetMouseState")]
	public static partial uint SDL_GetMouseState(float* x, float* y);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGlobalMouseState")]
	public static partial uint SDL_GetGlobalMouseState(float* x, float* y);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRelativeMouseState")]
	public static partial uint SDL_GetRelativeMouseState(float* x, float* y);

	[LibraryImport(LibName, EntryPoint = "SDL_WarpMouseInWindow")]
	public static partial void SDL_WarpMouseInWindow(SDL_Window window, float x, float y);

	[LibraryImport(LibName, EntryPoint = "SDL_WarpMouseGlobal")]
	public static partial int SDL_WarpMouseGlobal(float x, float y);

	[LibraryImport(LibName, EntryPoint = "SDL_SetRelativeMouseMode")]
	public static partial int SDL_SetRelativeMouseMode(SDL_bool enabled);

	[LibraryImport(LibName, EntryPoint = "SDL_CaptureMouse")]
	public static partial int SDL_CaptureMouse(SDL_bool enabled);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRelativeMouseMode")]
	public static partial SDL_bool SDL_GetRelativeMouseMode();

	[LibraryImport(LibName, EntryPoint = "SDL_CreateCursor")]
	public static partial SDL_Cursor* SDL_CreateCursor(byte* data, byte* mask, int w, int h, int hot_x, int hot_y);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateColorCursor")]
	public static partial SDL_Cursor* SDL_CreateColorCursor(SDL_Surface* surface, int hot_x, int hot_y);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateSystemCursor")]
	public static partial SDL_Cursor* SDL_CreateSystemCursor(SDL_SystemCursor id);

	[LibraryImport(LibName, EntryPoint = "SDL_SetCursor")]
	public static partial int SDL_SetCursor(SDL_Cursor* cursor);

	[LibraryImport(LibName, EntryPoint = "SDL_GetCursor")]
	public static partial SDL_Cursor* SDL_GetCursor();

	[LibraryImport(LibName, EntryPoint = "SDL_GetDefaultCursor")]
	public static partial SDL_Cursor* SDL_GetDefaultCursor();

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyCursor")]
	public static partial void SDL_DestroyCursor(SDL_Cursor* cursor);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowCursor")]
	public static partial int SDL_ShowCursor();

	[LibraryImport(LibName, EntryPoint = "SDL_HideCursor")]
	public static partial int SDL_HideCursor();

	[LibraryImport(LibName, EntryPoint = "SDL_CursorVisible")]
	public static partial SDL_bool SDL_CursorVisible();

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowsMessageHook")]
	public static partial void SDL_SetWindowsMessageHook(SDL_WindowsMessageHook callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_Direct3D9GetAdapterIndex")]
	public static partial int SDL_Direct3D9GetAdapterIndex(SDL_DisplayID displayID);

	[LibraryImport(LibName, EntryPoint = "SDL_DXGIGetOutputInfo")]
	public static partial SDL_bool SDL_DXGIGetOutputInfo(SDL_DisplayID displayID, int* adapterIndex, int* outputIndex);

	[LibraryImport(LibName, EntryPoint = "SDL_SetX11EventHook")]
	public static partial void SDL_SetX11EventHook(SDL_X11EventHook callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_IsTablet")]
	public static partial SDL_bool SDL_IsTablet();

	[LibraryImport(LibName, EntryPoint = "SDL_OnApplicationWillTerminate")]
	public static partial void SDL_OnApplicationWillTerminate();

	[LibraryImport(LibName, EntryPoint = "SDL_OnApplicationDidReceiveMemoryWarning")]
	public static partial void SDL_OnApplicationDidReceiveMemoryWarning();

	[LibraryImport(LibName, EntryPoint = "SDL_OnApplicationWillResignActive")]
	public static partial void SDL_OnApplicationWillResignActive();

	[LibraryImport(LibName, EntryPoint = "SDL_OnApplicationDidEnterBackground")]
	public static partial void SDL_OnApplicationDidEnterBackground();

	[LibraryImport(LibName, EntryPoint = "SDL_OnApplicationWillEnterForeground")]
	public static partial void SDL_OnApplicationWillEnterForeground();

	[LibraryImport(LibName, EntryPoint = "SDL_OnApplicationDidBecomeActive")]
	public static partial void SDL_OnApplicationDidBecomeActive();

	[LibraryImport(LibName, EntryPoint = "SDL_GetTicks")]
	public static partial ulong SDL_GetTicks();

	[LibraryImport(LibName, EntryPoint = "SDL_GetTicksNS")]
	public static partial ulong SDL_GetTicksNS();

	[LibraryImport(LibName, EntryPoint = "SDL_GetPerformanceCounter")]
	public static partial ulong SDL_GetPerformanceCounter();

	[LibraryImport(LibName, EntryPoint = "SDL_GetPerformanceFrequency")]
	public static partial ulong SDL_GetPerformanceFrequency();

	[LibraryImport(LibName, EntryPoint = "SDL_Delay")]
	public static partial void SDL_Delay(uint ms);

	[LibraryImport(LibName, EntryPoint = "SDL_DelayNS")]
	public static partial void SDL_DelayNS(ulong ns);

	[LibraryImport(LibName, EntryPoint = "SDL_AddTimer")]
	public static partial SDL_TimerID SDL_AddTimer(uint interval, SDL_TimerCallback callback, nint param);

	[LibraryImport(LibName, EntryPoint = "SDL_RemoveTimer")]
	public static partial SDL_bool SDL_RemoveTimer(SDL_TimerID id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetTouchDevices")]
	public static partial SDL_TouchID* SDL_GetTouchDevices(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetTouchDeviceName")]
	public static partial byte* SDL_GetTouchDeviceName(SDL_TouchID touchID);

	[LibraryImport(LibName, EntryPoint = "SDL_GetTouchDeviceType")]
	public static partial SDL_TouchDeviceType SDL_GetTouchDeviceType(SDL_TouchID touchID);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumTouchFingers")]
	public static partial int SDL_GetNumTouchFingers(SDL_TouchID touchID);

	[LibraryImport(LibName, EntryPoint = "SDL_GetTouchFinger")]
	public static partial SDL_Finger* SDL_GetTouchFinger(SDL_TouchID touchID, int index);

	[LibraryImport(LibName, EntryPoint = "SDL_LogSetAllPriority")]
	public static partial void SDL_LogSetAllPriority(SDL_LogPriority priority);

	[LibraryImport(LibName, EntryPoint = "SDL_LogSetPriority")]
	public static partial void SDL_LogSetPriority(int category, SDL_LogPriority priority);

	[LibraryImport(LibName, EntryPoint = "SDL_LogGetPriority")]
	public static partial SDL_LogPriority SDL_LogGetPriority(int category);

	[LibraryImport(LibName, EntryPoint = "SDL_LogResetPriorities")]
	public static partial void SDL_LogResetPriorities();

	[LibraryImport(LibName, EntryPoint = "SDL_Log")]
	public static partial void SDL_Log(byte* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogVerbose")]
	public static partial void SDL_LogVerbose(int category, byte* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogDebug")]
	public static partial void SDL_LogDebug(int category, byte* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogInfo")]
	public static partial void SDL_LogInfo(int category, byte* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogWarn")]
	public static partial void SDL_LogWarn(int category, byte* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogError")]
	public static partial void SDL_LogError(int category, byte* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogCritical")]
	public static partial void SDL_LogCritical(int category, byte* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_LogMessage")]
	public static partial void SDL_LogMessage(int category, SDL_LogPriority priority, byte* fmt);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenURL")]
	public static partial int SDL_OpenURL(byte* url);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPowerInfo")]
	public static partial SDL_PowerState SDL_GetPowerInfo(int* seconds, int* percent);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSensors")]
	public static partial SDL_SensorID* SDL_GetSensors(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSensorInstanceName")]
	public static partial byte* SDL_GetSensorInstanceName(SDL_SensorID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSensorInstanceType")]
	public static partial SDL_SensorType SDL_GetSensorInstanceType(SDL_SensorID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSensorInstanceNonPortableType")]
	public static partial int SDL_GetSensorInstanceNonPortableType(SDL_SensorID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenSensor")]
	public static partial SDL_Sensor SDL_OpenSensor(SDL_SensorID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSensorFromInstanceID")]
	public static partial SDL_Sensor SDL_GetSensorFromInstanceID(SDL_SensorID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSensorProperties")]
	public static partial SDL_PropertiesID SDL_GetSensorProperties(SDL_Sensor sensor);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSensorName")]
	public static partial byte* SDL_GetSensorName(SDL_Sensor sensor);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSensorType")]
	public static partial SDL_SensorType SDL_GetSensorType(SDL_Sensor sensor);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSensorNonPortableType")]
	public static partial int SDL_GetSensorNonPortableType(SDL_Sensor sensor);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSensorInstanceID")]
	public static partial SDL_SensorID SDL_GetSensorInstanceID(SDL_Sensor sensor);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSensorData")]
	public static partial int SDL_GetSensorData(SDL_Sensor sensor, float* data, int num_values);

	[LibraryImport(LibName, EntryPoint = "SDL_CloseSensor")]
	public static partial void SDL_CloseSensor(SDL_Sensor sensor);

	[LibraryImport(LibName, EntryPoint = "SDL_UpdateSensors")]
	public static partial void SDL_UpdateSensors();

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumVideoDrivers")]
	public static partial int SDL_GetNumVideoDrivers();

	[LibraryImport(LibName, EntryPoint = "SDL_GetVideoDriver")]
	public static partial byte* SDL_GetVideoDriver(int index);

	[LibraryImport(LibName, EntryPoint = "SDL_GetCurrentVideoDriver")]
	public static partial byte* SDL_GetCurrentVideoDriver();

	[LibraryImport(LibName, EntryPoint = "SDL_GetSystemTheme")]
	public static partial SDL_SystemTheme SDL_GetSystemTheme();

	[LibraryImport(LibName, EntryPoint = "SDL_GetDisplays")]
	public static partial SDL_DisplayID* SDL_GetDisplays(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPrimaryDisplay")]
	public static partial SDL_DisplayID SDL_GetPrimaryDisplay();

	[LibraryImport(LibName, EntryPoint = "SDL_GetDisplayProperties")]
	public static partial SDL_PropertiesID SDL_GetDisplayProperties(SDL_DisplayID displayID);

	[LibraryImport(LibName, EntryPoint = "SDL_GetDisplayName")]
	public static partial byte* SDL_GetDisplayName(SDL_DisplayID displayID);

	[LibraryImport(LibName, EntryPoint = "SDL_GetDisplayBounds")]
	public static partial int SDL_GetDisplayBounds(SDL_DisplayID displayID, Rectangle* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_GetDisplayUsableBounds")]
	public static partial int SDL_GetDisplayUsableBounds(SDL_DisplayID displayID, Rectangle* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNaturalDisplayOrientation")]
	public static partial SDL_DisplayOrientation SDL_GetNaturalDisplayOrientation(SDL_DisplayID displayID);

	[LibraryImport(LibName, EntryPoint = "SDL_GetCurrentDisplayOrientation")]
	public static partial SDL_DisplayOrientation SDL_GetCurrentDisplayOrientation(SDL_DisplayID displayID);

	[LibraryImport(LibName, EntryPoint = "SDL_GetDisplayContentScale")]
	public static partial float SDL_GetDisplayContentScale(SDL_DisplayID displayID);

	[LibraryImport(LibName, EntryPoint = "SDL_GetFullscreenDisplayModes")]
	public static partial SDL_DisplayMode** SDL_GetFullscreenDisplayModes(SDL_DisplayID displayID, out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetClosestFullscreenDisplayMode")]
	public static partial SDL_DisplayMode* SDL_GetClosestFullscreenDisplayMode(SDL_DisplayID displayID, int w, int h, float refresh_rate, SDL_bool include_high_density_modes);

	[LibraryImport(LibName, EntryPoint = "SDL_GetDesktopDisplayMode")]
	public static partial SDL_DisplayMode* SDL_GetDesktopDisplayMode(SDL_DisplayID displayID);

	[LibraryImport(LibName, EntryPoint = "SDL_GetCurrentDisplayMode")]
	public static partial SDL_DisplayMode* SDL_GetCurrentDisplayMode(SDL_DisplayID displayID);

	[LibraryImport(LibName, EntryPoint = "SDL_GetDisplayForPoint")]
	public static partial SDL_DisplayID SDL_GetDisplayForPoint(Point* point);

	[LibraryImport(LibName, EntryPoint = "SDL_GetDisplayForRect")]
	public static partial SDL_DisplayID SDL_GetDisplayForRect(Rectangle* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_GetDisplayForWindow")]
	public static partial SDL_DisplayID SDL_GetDisplayForWindow(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowPixelDensity")]
	public static partial float SDL_GetWindowPixelDensity(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowDisplayScale")]
	public static partial float SDL_GetWindowDisplayScale(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowFullscreenMode")]
	public static partial int SDL_SetWindowFullscreenMode(SDL_Window window, SDL_DisplayMode* mode);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowFullscreenMode")]
	public static partial SDL_DisplayMode* SDL_GetWindowFullscreenMode(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowICCProfile")]
	public static partial nint SDL_GetWindowICCProfile(SDL_Window window, nuint* size);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowPixelFormat")]
	public static partial uint SDL_GetWindowPixelFormat(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateWindow")]
	public static partial SDL_Window SDL_CreateWindow(byte* title, int w, int h, uint flags);

	[LibraryImport(LibName, EntryPoint = "SDL_CreatePopupWindow")]
	public static partial SDL_Window SDL_CreatePopupWindow(SDL_Window parent, int offset_x, int offset_y, int w, int h, uint flags);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateWindowWithProperties")]
	public static partial SDL_Window SDL_CreateWindowWithProperties(SDL_PropertiesID props);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowID")]
	public static partial SDL_WindowID SDL_GetWindowID(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowFromID")]
	public static partial SDL_Window SDL_GetWindowFromID(SDL_WindowID id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowParent")]
	public static partial SDL_Window SDL_GetWindowParent(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowProperties")]
	public static partial SDL_PropertiesID SDL_GetWindowProperties(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowFlags")]
	public static partial uint SDL_GetWindowFlags(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowTitle")]
	public static partial int SDL_SetWindowTitle(SDL_Window window, byte* title);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowTitle")]
	public static partial byte* SDL_GetWindowTitle(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowIcon")]
	public static partial int SDL_SetWindowIcon(SDL_Window window, SDL_Surface* icon);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowPosition")]
	public static partial int SDL_SetWindowPosition(SDL_Window window, int x, int y);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowPosition")]
	public static partial int SDL_GetWindowPosition(SDL_Window window, out int x, out int y);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowSize")]
	public static partial int SDL_SetWindowSize(SDL_Window window, int w, int h);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowSize")]
	public static partial int SDL_GetWindowSize(SDL_Window window, out int w, out int h);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowBordersSize")]
	public static partial int SDL_GetWindowBordersSize(SDL_Window window, int* top, int* left, int* bottom, int* right);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowSizeInPixels")]
	public static partial int SDL_GetWindowSizeInPixels(SDL_Window window, out int w, out int h);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowMinimumSize")]
	public static partial int SDL_SetWindowMinimumSize(SDL_Window window, int min_w, int min_h);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowMinimumSize")]
	public static partial int SDL_GetWindowMinimumSize(SDL_Window window, out int w, out int h);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowMaximumSize")]
	public static partial int SDL_SetWindowMaximumSize(SDL_Window window, int max_w, int max_h);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowMaximumSize")]
	public static partial int SDL_GetWindowMaximumSize(SDL_Window window, out int w, out int h);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowBordered")]
	public static partial int SDL_SetWindowBordered(SDL_Window window, SDL_bool bordered);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowResizable")]
	public static partial int SDL_SetWindowResizable(SDL_Window window, SDL_bool resizable);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowAlwaysOnTop")]
	public static partial int SDL_SetWindowAlwaysOnTop(SDL_Window window, SDL_bool on_top);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowWindow")]
	public static partial int SDL_ShowWindow(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_HideWindow")]
	public static partial int SDL_HideWindow(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_RaiseWindow")]
	public static partial int SDL_RaiseWindow(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_MaximizeWindow")]
	public static partial int SDL_MaximizeWindow(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_MinimizeWindow")]
	public static partial int SDL_MinimizeWindow(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_RestoreWindow")]
	public static partial int SDL_RestoreWindow(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowFullscreen")]
	public static partial int SDL_SetWindowFullscreen(SDL_Window window, SDL_bool fullscreen);

	[LibraryImport(LibName, EntryPoint = "SDL_SyncWindow")]
	public static partial int SDL_SyncWindow(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_HasWindowSurface")]
	public static partial SDL_bool SDL_HasWindowSurface(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowSurface")]
	public static partial SDL_Surface* SDL_GetWindowSurface(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_UpdateWindowSurface")]
	public static partial int SDL_UpdateWindowSurface(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_UpdateWindowSurfaceRects")]
	public static partial int SDL_UpdateWindowSurfaceRects(SDL_Window window, Rectangle* rects, int numrects);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyWindowSurface")]
	public static partial int SDL_DestroyWindowSurface(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowGrab")]
	public static partial int SDL_SetWindowGrab(SDL_Window window, SDL_bool grabbed);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowKeyboardGrab")]
	public static partial int SDL_SetWindowKeyboardGrab(SDL_Window window, SDL_bool grabbed);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowMouseGrab")]
	public static partial int SDL_SetWindowMouseGrab(SDL_Window window, SDL_bool grabbed);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowGrab")]
	public static partial SDL_bool SDL_GetWindowGrab(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowKeyboardGrab")]
	public static partial SDL_bool SDL_GetWindowKeyboardGrab(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowMouseGrab")]
	public static partial SDL_bool SDL_GetWindowMouseGrab(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GetGrabbedWindow")]
	public static partial SDL_Window SDL_GetGrabbedWindow();

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowMouseRect")]
	public static partial int SDL_SetWindowMouseRect(SDL_Window window, Rectangle* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowMouseRect")]
	public static partial Rectangle* SDL_GetWindowMouseRect(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowOpacity")]
	public static partial int SDL_SetWindowOpacity(SDL_Window window, float opacity);

	[LibraryImport(LibName, EntryPoint = "SDL_GetWindowOpacity")]
	public static partial int SDL_GetWindowOpacity(SDL_Window window, float* out_opacity);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowModalFor")]
	public static partial int SDL_SetWindowModalFor(SDL_Window modal_window, SDL_Window parent_window);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowInputFocus")]
	public static partial int SDL_SetWindowInputFocus(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowFocusable")]
	public static partial int SDL_SetWindowFocusable(SDL_Window window, SDL_bool focusable);

	[LibraryImport(LibName, EntryPoint = "SDL_ShowWindowSystemMenu")]
	public static partial int SDL_ShowWindowSystemMenu(SDL_Window window, int x, int y);

	[LibraryImport(LibName, EntryPoint = "SDL_SetWindowHitTest")]
	public static partial int SDL_SetWindowHitTest(SDL_Window window, SDL_HitTest callback, nint callback_data);

	[LibraryImport(LibName, EntryPoint = "SDL_FlashWindow")]
	public static partial int SDL_FlashWindow(SDL_Window window, SDL_FlashOperation operation);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyWindow")]
	public static partial void SDL_DestroyWindow(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_ScreenSaverEnabled")]
	public static partial SDL_bool SDL_ScreenSaverEnabled();

	[LibraryImport(LibName, EntryPoint = "SDL_EnableScreenSaver")]
	public static partial int SDL_EnableScreenSaver();

	[LibraryImport(LibName, EntryPoint = "SDL_DisableScreenSaver")]
	public static partial int SDL_DisableScreenSaver();

	[LibraryImport(LibName, EntryPoint = "SDL_GL_LoadLibrary")]
	public static partial int SDL_GL_LoadLibrary(byte* path);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_GetProcAddress")]
	public static partial delegate* unmanaged<void> SDL_GL_GetProcAddress(byte* proc);

	[LibraryImport(LibName, EntryPoint = "SDL_EGL_GetProcAddress")]
	public static partial delegate* unmanaged<void> SDL_EGL_GetProcAddress(byte* proc);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_UnloadLibrary")]
	public static partial void SDL_GL_UnloadLibrary();

	[LibraryImport(LibName, EntryPoint = "SDL_GL_ExtensionSupported")]
	public static partial SDL_bool SDL_GL_ExtensionSupported(byte* extension);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_ResetAttributes")]
	public static partial void SDL_GL_ResetAttributes();

	[LibraryImport(LibName, EntryPoint = "SDL_GL_SetAttribute")]
	public static partial int SDL_GL_SetAttribute(SDL_GLattr attr, int value);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_GetAttribute")]
	public static partial int SDL_GL_GetAttribute(SDL_GLattr attr, int* value);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_CreateContext")]
	public static partial SDL_GLContext SDL_GL_CreateContext(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_MakeCurrent")]
	public static partial int SDL_GL_MakeCurrent(SDL_Window window, SDL_GLContext context);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_GetCurrentWindow")]
	public static partial SDL_Window SDL_GL_GetCurrentWindow();

	[LibraryImport(LibName, EntryPoint = "SDL_GL_GetCurrentContext")]
	public static partial SDL_GLContext SDL_GL_GetCurrentContext();

	[LibraryImport(LibName, EntryPoint = "SDL_EGL_GetCurrentEGLDisplay")]
	public static partial nint SDL_EGL_GetCurrentEGLDisplay();

	[LibraryImport(LibName, EntryPoint = "SDL_EGL_GetCurrentEGLConfig")]
	public static partial nint SDL_EGL_GetCurrentEGLConfig();

	[LibraryImport(LibName, EntryPoint = "SDL_EGL_GetWindowEGLSurface")]
	public static partial nint SDL_EGL_GetWindowEGLSurface(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_SetSwapInterval")]
	public static partial int SDL_GL_SetSwapInterval(int interval);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_GetSwapInterval")]
	public static partial int SDL_GL_GetSwapInterval(int* interval);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_SwapWindow")]
	public static partial int SDL_GL_SwapWindow(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_GL_DeleteContext")]
	public static partial int SDL_GL_DeleteContext(SDL_GLContext context);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumAudioDrivers")]
	public static partial int SDL_GetNumAudioDrivers();

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioDriver")]
	public static partial byte* SDL_GetAudioDriver(int index);

	[LibraryImport(LibName, EntryPoint = "SDL_GetCurrentAudioDriver")]
	public static partial byte* SDL_GetCurrentAudioDriver();

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioOutputDevices")]
	public static partial SDL_AudioDeviceID* SDL_GetAudioOutputDevices(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioCaptureDevices")]
	public static partial SDL_AudioDeviceID* SDL_GetAudioCaptureDevices(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioDeviceName")]
	public static partial byte* SDL_GetAudioDeviceName(SDL_AudioDeviceID devid);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioDeviceFormat")]
	public static partial int SDL_GetAudioDeviceFormat(SDL_AudioDeviceID devid, SDL_AudioSpec* spec, int* sample_frames);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenAudioDevice")]
	public static partial SDL_AudioDeviceID SDL_OpenAudioDevice(SDL_AudioDeviceID devid, SDL_AudioSpec* spec);

	[LibraryImport(LibName, EntryPoint = "SDL_PauseAudioDevice")]
	public static partial int SDL_PauseAudioDevice(SDL_AudioDeviceID dev);

	[LibraryImport(LibName, EntryPoint = "SDL_ResumeAudioDevice")]
	public static partial int SDL_ResumeAudioDevice(SDL_AudioDeviceID dev);

	[LibraryImport(LibName, EntryPoint = "SDL_AudioDevicePaused")]
	public static partial SDL_bool SDL_AudioDevicePaused(SDL_AudioDeviceID dev);

	[LibraryImport(LibName, EntryPoint = "SDL_CloseAudioDevice")]
	public static partial void SDL_CloseAudioDevice(SDL_AudioDeviceID devid);

	[LibraryImport(LibName, EntryPoint = "SDL_BindAudioStreams")]
	public static partial int SDL_BindAudioStreams(SDL_AudioDeviceID devid, SDL_AudioStream streams, int num_streams);

	[LibraryImport(LibName, EntryPoint = "SDL_BindAudioStream")]
	public static partial int SDL_BindAudioStream(SDL_AudioDeviceID devid, SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_UnbindAudioStreams")]
	public static partial void SDL_UnbindAudioStreams(SDL_AudioStream streams, int num_streams);

	[LibraryImport(LibName, EntryPoint = "SDL_UnbindAudioStream")]
	public static partial void SDL_UnbindAudioStream(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioStreamDevice")]
	public static partial SDL_AudioDeviceID SDL_GetAudioStreamDevice(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateAudioStream")]
	public static partial SDL_AudioStream SDL_CreateAudioStream(SDL_AudioSpec* src_spec, SDL_AudioSpec* dst_spec);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioStreamProperties")]
	public static partial SDL_PropertiesID SDL_GetAudioStreamProperties(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioStreamFormat")]
	public static partial int SDL_GetAudioStreamFormat(SDL_AudioStream stream, SDL_AudioSpec* src_spec, SDL_AudioSpec* dst_spec);

	[LibraryImport(LibName, EntryPoint = "SDL_SetAudioStreamFormat")]
	public static partial int SDL_SetAudioStreamFormat(SDL_AudioStream stream, SDL_AudioSpec* src_spec, SDL_AudioSpec* dst_spec);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioStreamFrequencyRatio")]
	public static partial float SDL_GetAudioStreamFrequencyRatio(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_SetAudioStreamFrequencyRatio")]
	public static partial int SDL_SetAudioStreamFrequencyRatio(SDL_AudioStream stream, float ratio);

	[LibraryImport(LibName, EntryPoint = "SDL_PutAudioStreamData")]
	public static partial int SDL_PutAudioStreamData(SDL_AudioStream stream, void* buf, int len);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioStreamData")]
	public static partial int SDL_GetAudioStreamData(SDL_AudioStream stream, nint buf, int len);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioStreamAvailable")]
	public static partial int SDL_GetAudioStreamAvailable(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_GetAudioStreamQueued")]
	public static partial int SDL_GetAudioStreamQueued(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_FlushAudioStream")]
	public static partial int SDL_FlushAudioStream(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_ClearAudioStream")]
	public static partial int SDL_ClearAudioStream(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_LockAudioStream")]
	public static partial int SDL_LockAudioStream(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_UnlockAudioStream")]
	public static partial int SDL_UnlockAudioStream(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_SetAudioStreamGetCallback")]
	public static partial int SDL_SetAudioStreamGetCallback(SDL_AudioStream stream, SDL_AudioStreamCallback callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_SetAudioStreamPutCallback")]
	public static partial int SDL_SetAudioStreamPutCallback(SDL_AudioStream stream, SDL_AudioStreamCallback callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyAudioStream")]
	public static partial void SDL_DestroyAudioStream(SDL_AudioStream stream);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenAudioDeviceStream")]
	public static partial SDL_AudioStream SDL_OpenAudioDeviceStream(SDL_AudioDeviceID devid, SDL_AudioSpec* spec, SDL_AudioStreamCallback callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_SetAudioPostmixCallback")]
	public static partial int SDL_SetAudioPostmixCallback(SDL_AudioDeviceID devid, SDL_AudioPostmixCallback callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadWAV_RW")]
	public static partial int SDL_LoadWAV_RW(nint src, SDL_bool freesrc, SDL_AudioSpec* spec, byte** audio_buf, uint* audio_len);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadWAV")]
	public static partial int SDL_LoadWAV(byte* path, SDL_AudioSpec* spec, byte** audio_buf, uint* audio_len);

	[LibraryImport(LibName, EntryPoint = "SDL_MixAudioFormat")]
	public static partial int SDL_MixAudioFormat(byte* dst, byte* src, SDL_AudioFormat format, uint len, int volume);

	[LibraryImport(LibName, EntryPoint = "SDL_ConvertAudioSamples")]
	public static partial int SDL_ConvertAudioSamples(SDL_AudioSpec* src_spec, byte* src_data, int src_len, SDL_AudioSpec* dst_spec, byte** dst_data, int* dst_len);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSilenceValueForFormat")]
	public static partial int SDL_GetSilenceValueForFormat(SDL_AudioFormat format);

	[LibraryImport(LibName, EntryPoint = "SDL_PumpEvents")]
	public static partial void SDL_PumpEvents();

	[LibraryImport(LibName, EntryPoint = "SDL_PeepEvents")]
	public static partial int SDL_PeepEvents(SDL_Event* events, int numevents, SDL_eventaction action, SDL_EventType minType, SDL_EventType maxType);

	[LibraryImport(LibName, EntryPoint = "SDL_HasEvent")]
	public static partial SDL_bool SDL_HasEvent(SDL_EventType type);

	[LibraryImport(LibName, EntryPoint = "SDL_HasEvents")]
	public static partial SDL_bool SDL_HasEvents(SDL_EventType minType, SDL_EventType maxType);

	[LibraryImport(LibName, EntryPoint = "SDL_FlushEvent")]
	public static partial void SDL_FlushEvent(SDL_EventType type);

	[LibraryImport(LibName, EntryPoint = "SDL_FlushEvents")]
	public static partial void SDL_FlushEvents(SDL_EventType minType, SDL_EventType maxType);

	[LibraryImport(LibName, EntryPoint = "SDL_PollEvent")]
	private static partial SDL_bool SDL_PollEventPrivate(SDL_Event* @event);

	[LibraryImport(LibName, EntryPoint = "SDL_WaitEvent")]
	public static partial SDL_bool SDL_WaitEvent(SDL_Event* @event);

	[LibraryImport(LibName, EntryPoint = "SDL_WaitEventTimeout")]
	public static partial SDL_bool SDL_WaitEventTimeout(SDL_Event* @event, int timeoutMS);

	[LibraryImport(LibName, EntryPoint = "SDL_PushEvent")]
	public static partial int SDL_PushEvent(SDL_Event* @event);

	[LibraryImport(LibName, EntryPoint = "SDL_SetEventFilter")]
	public static partial void SDL_SetEventFilter(SDL_EventFilter filter, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_AddEventWatch")]
	public static partial int SDL_AddEventWatch(SDL_EventFilter filter, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_DelEventWatch")]
	public static partial void SDL_DelEventWatch(SDL_EventFilter filter, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_FilterEvents")]
	public static partial void SDL_FilterEvents(SDL_EventFilter filter, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_SetEventEnabled")]
	public static partial void SDL_SetEventEnabled(SDL_EventType type, SDL_bool enabled);

	[LibraryImport(LibName, EntryPoint = "SDL_EventEnabled")]
	public static partial SDL_bool SDL_EventEnabled(SDL_EventType type);

	[LibraryImport(LibName, EntryPoint = "SDL_RegisterEvents")]
	public static partial uint SDL_RegisterEvents(int numevents);

	[LibraryImport(LibName, EntryPoint = "SDL_AllocateEventMemory")]
	public static partial nint SDL_AllocateEventMemory(nuint size);

	[LibraryImport(LibName, EntryPoint = "SDL_Vulkan_LoadLibrary")]
	public static partial int SDL_Vulkan_LoadLibrary(byte* path);

	[LibraryImport(LibName, EntryPoint = "SDL_Vulkan_GetVkGetInstanceProcAddr")]
	public static partial delegate* unmanaged<void> SDL_Vulkan_GetVkGetInstanceProcAddr();

	[LibraryImport(LibName, EntryPoint = "SDL_Vulkan_UnloadLibrary")]
	public static partial void SDL_Vulkan_UnloadLibrary();

	[LibraryImport(LibName, EntryPoint = "SDL_Metal_CreateView")]
	public static partial nint SDL_Metal_CreateView(SDL_Window window);

	[LibraryImport(LibName, EntryPoint = "SDL_Metal_DestroyView")]
	public static partial void SDL_Metal_DestroyView(nint view);

	[LibraryImport(LibName, EntryPoint = "SDL_Metal_GetLayer")]
	public static partial nint SDL_Metal_GetLayer(nint view);

	[LibraryImport(LibName, EntryPoint = "SDL_SetHintWithPriority")]
	public static partial SDL_bool SDL_SetHintWithPriority(byte* name, byte* value, SDL_HintPriority priority);

	[LibraryImport(LibName, EntryPoint = "SDL_SetHint")]
	public static partial SDL_bool SDL_SetHint(byte* name, byte* value);

	[LibraryImport(LibName, EntryPoint = "SDL_ResetHint")]
	public static partial SDL_bool SDL_ResetHint(byte* name);

	[LibraryImport(LibName, EntryPoint = "SDL_ResetHints")]
	public static partial void SDL_ResetHints();

	[LibraryImport(LibName, EntryPoint = "SDL_GetHint")]
	public static partial byte* SDL_GetHint(byte* name);

	[LibraryImport(LibName, EntryPoint = "SDL_GetHintBoolean")]
	public static partial SDL_bool SDL_GetHintBoolean(byte* name, SDL_bool default_value);

	[LibraryImport(LibName, EntryPoint = "SDL_AddHintCallback")]
	public static partial int SDL_AddHintCallback(byte* name, SDL_HintCallback callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_DelHintCallback")]
	public static partial void SDL_DelHintCallback(byte* name, SDL_HintCallback callback, nint userdata);

	[LibraryImport(LibName, EntryPoint = "SDL_ClearHints")]
	public static partial void SDL_ClearHints();

	[LibraryImport(LibName, EntryPoint = "SDL_GetHaptics")]
	public static partial SDL_HapticID* SDL_GetHaptics(out int count);

	[LibraryImport(LibName, EntryPoint = "SDL_GetHapticInstanceName")]
	public static partial byte* SDL_GetHapticInstanceName(SDL_HapticID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenHaptic")]
	public static partial SDL_Haptic SDL_OpenHaptic(SDL_HapticID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetHapticFromInstanceID")]
	public static partial SDL_Haptic SDL_GetHapticFromInstanceID(SDL_HapticID instance_id);

	[LibraryImport(LibName, EntryPoint = "SDL_GetHapticInstanceID")]
	public static partial SDL_HapticID SDL_GetHapticInstanceID(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_GetHapticName")]
	public static partial byte* SDL_GetHapticName(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_IsMouseHaptic")]
	public static partial SDL_bool SDL_IsMouseHaptic();

	[LibraryImport(LibName, EntryPoint = "SDL_OpenHapticFromMouse")]
	public static partial SDL_Haptic SDL_OpenHapticFromMouse();

	[LibraryImport(LibName, EntryPoint = "SDL_IsJoystickHaptic")]
	public static partial SDL_bool SDL_IsJoystickHaptic(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_OpenHapticFromJoystick")]
	public static partial SDL_Haptic SDL_OpenHapticFromJoystick(SDL_Joystick joystick);

	[LibraryImport(LibName, EntryPoint = "SDL_CloseHaptic")]
	public static partial void SDL_CloseHaptic(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_GetMaxHapticEffects")]
	public static partial int SDL_GetMaxHapticEffects(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_GetMaxHapticEffectsPlaying")]
	public static partial int SDL_GetMaxHapticEffectsPlaying(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_GetHapticFeatures")]
	public static partial uint SDL_GetHapticFeatures(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_GetNumHapticAxes")]
	public static partial int SDL_GetNumHapticAxes(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_HapticEffectSupported")]
	public static partial SDL_bool SDL_HapticEffectSupported(SDL_Haptic haptic, SDL_HapticEffect* effect);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateHapticEffect")]
	public static partial int SDL_CreateHapticEffect(SDL_Haptic haptic, SDL_HapticEffect* effect);

	[LibraryImport(LibName, EntryPoint = "SDL_UpdateHapticEffect")]
	public static partial int SDL_UpdateHapticEffect(SDL_Haptic haptic, int effect, SDL_HapticEffect* data);

	[LibraryImport(LibName, EntryPoint = "SDL_RunHapticEffect")]
	public static partial int SDL_RunHapticEffect(SDL_Haptic haptic, int effect, uint iterations);

	[LibraryImport(LibName, EntryPoint = "SDL_StopHapticEffect")]
	public static partial int SDL_StopHapticEffect(SDL_Haptic haptic, int effect);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyHapticEffect")]
	public static partial void SDL_DestroyHapticEffect(SDL_Haptic haptic, int effect);

	[LibraryImport(LibName, EntryPoint = "SDL_GetHapticEffectStatus")]
	public static partial int SDL_GetHapticEffectStatus(SDL_Haptic haptic, int effect);

	[LibraryImport(LibName, EntryPoint = "SDL_SetHapticGain")]
	public static partial int SDL_SetHapticGain(SDL_Haptic haptic, int gain);

	[LibraryImport(LibName, EntryPoint = "SDL_SetHapticAutocenter")]
	public static partial int SDL_SetHapticAutocenter(SDL_Haptic haptic, int autocenter);

	[LibraryImport(LibName, EntryPoint = "SDL_PauseHaptic")]
	public static partial int SDL_PauseHaptic(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_ResumeHaptic")]
	public static partial int SDL_ResumeHaptic(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_StopHapticEffects")]
	public static partial int SDL_StopHapticEffects(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_HapticRumbleSupported")]
	public static partial SDL_bool SDL_HapticRumbleSupported(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_InitHapticRumble")]
	public static partial int SDL_InitHapticRumble(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_PlayHapticRumble")]
	public static partial int SDL_PlayHapticRumble(SDL_Haptic haptic, float strength, uint length);

	[LibraryImport(LibName, EntryPoint = "SDL_StopHapticRumble")]
	public static partial int SDL_StopHapticRumble(SDL_Haptic haptic);

	[LibraryImport(LibName, EntryPoint = "SDL_ComposeCustomBlendMode")]
	public static partial SDL_BlendMode SDL_ComposeCustomBlendMode(SDL_BlendFactor srcColorFactor, SDL_BlendFactor dstColorFactor, SDL_BlendOperation colorOperation, SDL_BlendFactor srcAlphaFactor, SDL_BlendFactor dstAlphaFactor, SDL_BlendOperation alphaOperation);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPixelFormatName")]
	public static partial byte* SDL_GetPixelFormatName(uint format);

	[LibraryImport(LibName, EntryPoint = "SDL_GetMasksForPixelFormatEnum")]
	public static partial SDL_bool SDL_GetMasksForPixelFormatEnum(uint format, int* bpp, uint* Rmask, uint* Gmask, uint* Bmask, uint* Amask);

	[LibraryImport(LibName, EntryPoint = "SDL_GetPixelFormatEnumForMasks")]
	public static partial uint SDL_GetPixelFormatEnumForMasks(int bpp, uint Rmask, uint Gmask, uint Bmask, uint Amask);

	[LibraryImport(LibName, EntryPoint = "SDL_CreatePixelFormat")]
	public static partial SDL_PixelFormat* SDL_CreatePixelFormat(uint pixel_format);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyPixelFormat")]
	public static partial void SDL_DestroyPixelFormat(SDL_PixelFormat* format);

	[LibraryImport(LibName, EntryPoint = "SDL_CreatePalette")]
	public static partial SDL_Palette* SDL_CreatePalette(int ncolors);

	[LibraryImport(LibName, EntryPoint = "SDL_SetPixelFormatPalette")]
	public static partial int SDL_SetPixelFormatPalette(SDL_PixelFormat* format, SDL_Palette* palette);

	[LibraryImport(LibName, EntryPoint = "SDL_SetPaletteColors")]
	public static partial int SDL_SetPaletteColors(SDL_Palette* palette, SDL_Color* colors, int firstcolor, int ncolors);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroyPalette")]
	public static partial void SDL_DestroyPalette(SDL_Palette* palette);

	[LibraryImport(LibName, EntryPoint = "SDL_MapRGB")]
	public static partial uint SDL_MapRGB(SDL_PixelFormat* format, byte r, byte g, byte b);

	[LibraryImport(LibName, EntryPoint = "SDL_MapRGBA")]
	public static partial uint SDL_MapRGBA(SDL_PixelFormat* format, byte r, byte g, byte b, byte a);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRGB")]
	public static partial void SDL_GetRGB(uint pixel, SDL_PixelFormat* format, byte* r, byte* g, byte* b);

	[LibraryImport(LibName, EntryPoint = "SDL_GetRGBA")]
	public static partial void SDL_GetRGBA(uint pixel, SDL_PixelFormat* format, byte* r, byte* g, byte* b, byte* a);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateSurface")]
	public static partial SDL_Surface* SDL_CreateSurface(int width, int height, uint format);

	[LibraryImport(LibName, EntryPoint = "SDL_CreateSurfaceFrom")]
	public static partial SDL_Surface* SDL_CreateSurfaceFrom(nint pixels, int width, int height, int pitch, uint format);

	[LibraryImport(LibName, EntryPoint = "SDL_DestroySurface")]
	public static partial void SDL_DestroySurface(SDL_Surface* surface);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSurfaceProperties")]
	public static partial SDL_PropertiesID SDL_GetSurfaceProperties(SDL_Surface* surface);

	[LibraryImport(LibName, EntryPoint = "SDL_SetSurfacePalette")]
	public static partial int SDL_SetSurfacePalette(SDL_Surface* surface, SDL_Palette* palette);

	[LibraryImport(LibName, EntryPoint = "SDL_LockSurface")]
	public static partial int SDL_LockSurface(SDL_Surface* surface);

	[LibraryImport(LibName, EntryPoint = "SDL_UnlockSurface")]
	public static partial void SDL_UnlockSurface(SDL_Surface* surface);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadBMP_RW")]
	public static partial SDL_Surface* SDL_LoadBMP_RW(nint src, SDL_bool freesrc);

	[LibraryImport(LibName, EntryPoint = "SDL_LoadBMP")]
	public static partial SDL_Surface* SDL_LoadBMP(byte* file);

	[LibraryImport(LibName, EntryPoint = "SDL_SaveBMP_RW")]
	public static partial int SDL_SaveBMP_RW(SDL_Surface* surface, nint dst, SDL_bool freedst);

	[LibraryImport(LibName, EntryPoint = "SDL_SaveBMP")]
	public static partial int SDL_SaveBMP(SDL_Surface* surface, byte* file);

	[LibraryImport(LibName, EntryPoint = "SDL_SetSurfaceRLE")]
	public static partial int SDL_SetSurfaceRLE(SDL_Surface* surface, int flag);

	[LibraryImport(LibName, EntryPoint = "SDL_SurfaceHasRLE")]
	public static partial SDL_bool SDL_SurfaceHasRLE(SDL_Surface* surface);

	[LibraryImport(LibName, EntryPoint = "SDL_SetSurfaceColorKey")]
	public static partial int SDL_SetSurfaceColorKey(SDL_Surface* surface, int flag, uint key);

	[LibraryImport(LibName, EntryPoint = "SDL_SurfaceHasColorKey")]
	public static partial SDL_bool SDL_SurfaceHasColorKey(SDL_Surface* surface);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSurfaceColorKey")]
	public static partial int SDL_GetSurfaceColorKey(SDL_Surface* surface, uint* key);

	[LibraryImport(LibName, EntryPoint = "SDL_SetSurfaceColorMod")]
	public static partial int SDL_SetSurfaceColorMod(SDL_Surface* surface, byte r, byte g, byte b);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSurfaceColorMod")]
	public static partial int SDL_GetSurfaceColorMod(SDL_Surface* surface, byte* r, byte* g, byte* b);

	[LibraryImport(LibName, EntryPoint = "SDL_SetSurfaceAlphaMod")]
	public static partial int SDL_SetSurfaceAlphaMod(SDL_Surface* surface, byte alpha);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSurfaceAlphaMod")]
	public static partial int SDL_GetSurfaceAlphaMod(SDL_Surface* surface, byte* alpha);

	[LibraryImport(LibName, EntryPoint = "SDL_SetSurfaceBlendMode")]
	public static partial int SDL_SetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode blendMode);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSurfaceBlendMode")]
	public static partial int SDL_GetSurfaceBlendMode(SDL_Surface* surface, SDL_BlendMode* blendMode);

	[LibraryImport(LibName, EntryPoint = "SDL_SetSurfaceClipRect")]
	public static partial SDL_bool SDL_SetSurfaceClipRect(SDL_Surface* surface, Rectangle* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_GetSurfaceClipRect")]
	public static partial int SDL_GetSurfaceClipRect(SDL_Surface* surface, Rectangle* rect);

	[LibraryImport(LibName, EntryPoint = "SDL_FlipSurface")]
	public static partial int SDL_FlipSurface(SDL_Surface* surface, SDL_FlipMode flip);

	[LibraryImport(LibName, EntryPoint = "SDL_DuplicateSurface")]
	public static partial SDL_Surface* SDL_DuplicateSurface(SDL_Surface* surface);

	[LibraryImport(LibName, EntryPoint = "SDL_ConvertSurface")]
	public static partial SDL_Surface* SDL_ConvertSurface(SDL_Surface* surface, SDL_PixelFormat* format);

	[LibraryImport(LibName, EntryPoint = "SDL_ConvertSurfaceFormat")]
	public static partial SDL_Surface* SDL_ConvertSurfaceFormat(SDL_Surface* surface, uint pixel_format);

	[LibraryImport(LibName, EntryPoint = "SDL_ConvertPixels")]
	public static partial int SDL_ConvertPixels(int width, int height, uint src_format, void* src, int src_pitch, uint dst_format, nint dst, int dst_pitch);

	[LibraryImport(LibName, EntryPoint = "SDL_PremultiplyAlpha")]
	public static partial int SDL_PremultiplyAlpha(int width, int height, uint src_format, void* src, int src_pitch, uint dst_format, nint dst, int dst_pitch);

	[LibraryImport(LibName, EntryPoint = "SDL_FillSurfaceRect")]
	public static partial int SDL_FillSurfaceRect(SDL_Surface* dst, Rectangle* rect, uint color);

	[LibraryImport(LibName, EntryPoint = "SDL_FillSurfaceRects")]
	public static partial int SDL_FillSurfaceRects(SDL_Surface* dst, Rectangle* rects, int count, uint color);

	[LibraryImport(LibName, EntryPoint = "SDL_BlitSurface")]
	public static partial int SDL_BlitSurface(SDL_Surface* src, Rectangle* srcrect, SDL_Surface* dst, Rectangle* dstrect);

	[LibraryImport(LibName, EntryPoint = "SDL_BlitSurfaceUnchecked")]
	public static partial int SDL_BlitSurfaceUnchecked(SDL_Surface* src, Rectangle* srcrect, SDL_Surface* dst, Rectangle* dstrect);

	[LibraryImport(LibName, EntryPoint = "SDL_SoftStretch")]
	public static partial int SDL_SoftStretch(SDL_Surface* src, Rectangle* srcrect, SDL_Surface* dst, Rectangle* dstrect, SDL_ScaleMode scaleMode);

	[LibraryImport(LibName, EntryPoint = "SDL_BlitSurfaceScaled")]
	public static partial int SDL_BlitSurfaceScaled(SDL_Surface* src, Rectangle* srcrect, SDL_Surface* dst, Rectangle* dstrect, SDL_ScaleMode scaleMode);

	[LibraryImport(LibName, EntryPoint = "SDL_BlitSurfaceUncheckedScaled")]
	public static partial int SDL_BlitSurfaceUncheckedScaled(SDL_Surface* src, Rectangle* srcrect, SDL_Surface* dst, Rectangle* dstrect, SDL_ScaleMode scaleMode);

	[LibraryImport(LibName, EntryPoint = "SDL_ReadSurfacePixel")]
	public static partial int SDL_ReadSurfacePixel(SDL_Surface* surface, int x, int y, byte* r, byte* g, byte* b, byte* a);

	[LibraryImport(LibName, EntryPoint = "SDL_SetYUVConversionMode")]
	public static partial void SDL_SetYUVConversionMode(SDL_YUV_CONVERSION_MODE mode);

	[LibraryImport(LibName, EntryPoint = "SDL_GetYUVConversionMode")]
	public static partial SDL_YUV_CONVERSION_MODE SDL_GetYUVConversionMode();

	[LibraryImport(LibName, EntryPoint = "SDL_GetYUVConversionModeForResolution")]
	public static partial SDL_YUV_CONVERSION_MODE SDL_GetYUVConversionModeForResolution(int width, int height);

}
