// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Diagnostics.CodeAnalysis;
using System.Drawing;

#pragma warning disable CS0649
namespace SDL3;

public partial struct SDL_AtomicInt
{
	public int value;
}

public partial struct SDL_AudioSpec
{
	public SDL_AudioFormat format;
	public int channels;
	public int freq;
}

public partial struct SDL_CameraSpec
{
	public SDL_PixelFormat format;
	public SDL_Colorspace colorspace;
	public int width;
	public int height;
	public int framerate_numerator;
	public int framerate_denominator;
}

public partial struct SDL_DialogFileFilter
{
	public unsafe byte* name;
	public unsafe byte* pattern;
}

public partial struct SDL_CommonEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
}

public partial struct SDL_DisplayEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_DisplayID displayID;
	public int data1;
	public int data2;
}

public partial struct SDL_WindowEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public int data1;
	public int data2;
}

public partial struct SDL_KeyboardDeviceEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_KeyboardID which;
}

public partial struct SDL_KeyboardEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public SDL_KeyboardID which;
	public SDL_Scancode scancode;
	public SDL_Keycode key;
	public SDL_Keymod mod;
	public ushort raw;
	public byte state;
	public byte repeat;
}

public partial struct SDL_TextEditingEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public unsafe byte* text;
	public int start;
	public int length;
}

public partial struct SDL_TextEditingCandidatesEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public unsafe byte** candidates;
	public int num_candidates;
	public int selected_candidate;
	public SDL_bool horizontal;
}

public partial struct SDL_TextInputEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public unsafe byte* text;
}

public partial struct SDL_MouseDeviceEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_MouseID which;
}

public partial struct SDL_MouseMotionEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public SDL_MouseID which;
	public SDL_MouseButtonFlags state;
	public float x;
	public float y;
	public float xrel;
	public float yrel;
}

public partial struct SDL_MouseButtonEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public SDL_MouseID which;
	public byte button;
	public byte state;
	public byte clicks;
	public byte padding;
	public float x;
	public float y;
}

public partial struct SDL_MouseWheelEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public SDL_MouseID which;
	public float x;
	public float y;
	public SDL_MouseWheelDirection direction;
	public float mouse_x;
	public float mouse_y;
}

public partial struct SDL_JoyAxisEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_JoystickID which;
	public byte axis;
	public byte padding1;
	public byte padding2;
	public byte padding3;
	public short value;
	public ushort padding4;
}

public partial struct SDL_JoyBallEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_JoystickID which;
	public byte ball;
	public byte padding1;
	public byte padding2;
	public byte padding3;
	public short xrel;
	public short yrel;
}

public partial struct SDL_JoyHatEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_JoystickID which;
	public byte hat;
	public byte value;
	public byte padding1;
	public byte padding2;
}

public partial struct SDL_JoyButtonEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_JoystickID which;
	public byte button;
	public byte state;
	public byte padding1;
	public byte padding2;
}

public partial struct SDL_JoyDeviceEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_JoystickID which;
}

public partial struct SDL_JoyBatteryEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_JoystickID which;
	public SDL_PowerState state;
	public int percent;
}

public partial struct SDL_GamepadAxisEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_JoystickID which;
	public byte axis;
	public byte padding1;
	public byte padding2;
	public byte padding3;
	public short value;
	public ushort padding4;
}

public partial struct SDL_GamepadButtonEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_JoystickID which;
	public byte button;
	public byte state;
	public byte padding1;
	public byte padding2;
}

public partial struct SDL_GamepadDeviceEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_JoystickID which;
}

public partial struct SDL_GamepadTouchpadEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_JoystickID which;
	public int touchpad;
	public int finger;
	public float x;
	public float y;
	public float pressure;
}

public partial struct SDL_GamepadSensorEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_JoystickID which;
	public int sensor;
	public unsafe fixed float data[3];
	public ulong sensor_timestamp;
}

public partial struct SDL_AudioDeviceEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_AudioDeviceID which;
	public byte recording;
	public byte padding1;
	public byte padding2;
	public byte padding3;
}

public partial struct SDL_CameraDeviceEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_CameraID which;
}

public partial struct SDL_TouchFingerEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_TouchID touchID;
	public SDL_FingerID fingerID;
	public float x;
	public float y;
	public float dx;
	public float dy;
	public float pressure;
	public SDL_WindowID windowID;
}

public partial struct SDL_PenProximityEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public SDL_PenID which;
}

public partial struct SDL_PenMotionEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public SDL_PenID which;
	public SDL_PenInputFlags pen_state;
	public float x;
	public float y;
}

public partial struct SDL_PenTouchEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public SDL_PenID which;
	public SDL_PenInputFlags pen_state;
	public float x;
	public float y;
	public byte eraser;
	public byte state;
}

public partial struct SDL_PenButtonEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public SDL_PenID which;
	public SDL_PenInputFlags pen_state;
	public float x;
	public float y;
	public byte button;
	public byte state;
}

public partial struct SDL_PenAxisEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public SDL_PenID which;
	public SDL_PenInputFlags pen_state;
	public float x;
	public float y;
	public SDL_PenAxis axis;
	public float value;
}

public partial struct SDL_DropEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public float x;
	public float y;
	public unsafe byte* source;
	public unsafe byte* data;
}

public partial struct SDL_ClipboardEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
}

public partial struct SDL_SensorEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_SensorID which;
	public unsafe fixed float data[6];
	public ulong sensor_timestamp;
}

public partial struct SDL_QuitEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
}

public partial struct SDL_UserEvent
{
	public SDL_EventType type;
	public uint reserved;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public int code;
	public nint data1;
	public nint data2;
}

[StructLayout(LayoutKind.Explicit)]
public partial struct SDL_Event
{
	[FieldOffset(0)]
	public SDL_EventType type;
	[FieldOffset(0)]
	public SDL_CommonEvent common;
	[FieldOffset(0)]
	public SDL_DisplayEvent display;
	[FieldOffset(0)]
	public SDL_WindowEvent window;
	[FieldOffset(0)]
	public SDL_KeyboardDeviceEvent kdevice;
	[FieldOffset(0)]
	public SDL_KeyboardEvent key;
	[FieldOffset(0)]
	public SDL_TextEditingEvent edit;
	[FieldOffset(0)]
	public SDL_TextEditingCandidatesEvent edit_candidates;
	[FieldOffset(0)]
	public SDL_TextInputEvent text;
	[FieldOffset(0)]
	public SDL_MouseDeviceEvent mdevice;
	[FieldOffset(0)]
	public SDL_MouseMotionEvent motion;
	[FieldOffset(0)]
	public SDL_MouseButtonEvent button;
	[FieldOffset(0)]
	public SDL_MouseWheelEvent wheel;
	[FieldOffset(0)]
	public SDL_JoyDeviceEvent jdevice;
	[FieldOffset(0)]
	public SDL_JoyAxisEvent jaxis;
	[FieldOffset(0)]
	public SDL_JoyBallEvent jball;
	[FieldOffset(0)]
	public SDL_JoyHatEvent jhat;
	[FieldOffset(0)]
	public SDL_JoyButtonEvent jbutton;
	[FieldOffset(0)]
	public SDL_JoyBatteryEvent jbattery;
	[FieldOffset(0)]
	public SDL_GamepadDeviceEvent gdevice;
	[FieldOffset(0)]
	public SDL_GamepadAxisEvent gaxis;
	[FieldOffset(0)]
	public SDL_GamepadButtonEvent gbutton;
	[FieldOffset(0)]
	public SDL_GamepadTouchpadEvent gtouchpad;
	[FieldOffset(0)]
	public SDL_GamepadSensorEvent gsensor;
	[FieldOffset(0)]
	public SDL_AudioDeviceEvent adevice;
	[FieldOffset(0)]
	public SDL_CameraDeviceEvent cdevice;
	[FieldOffset(0)]
	public SDL_SensorEvent sensor;
	[FieldOffset(0)]
	public SDL_QuitEvent quit;
	[FieldOffset(0)]
	public SDL_UserEvent user;
	[FieldOffset(0)]
	public SDL_TouchFingerEvent tfinger;
	[FieldOffset(0)]
	public SDL_PenProximityEvent pproximity;
	[FieldOffset(0)]
	public SDL_PenTouchEvent ptouch;
	[FieldOffset(0)]
	public SDL_PenMotionEvent pmotion;
	[FieldOffset(0)]
	public SDL_PenButtonEvent pbutton;
	[FieldOffset(0)]
	public SDL_PenAxisEvent paxis;
	[FieldOffset(0)]
	public SDL_DropEvent drop;
	[FieldOffset(0)]
	public SDL_ClipboardEvent clipboard;
	[FieldOffset(0)]
	public unsafe fixed byte padding[128];
}

public partial struct SDL_PathInfo
{
	public SDL_PathType type;
	public ulong size;
	public long create_time;
	public long modify_time;
	public long access_time;
}

public partial struct SDL_GamepadBinding
{
	public SDL_GamepadBindingType input_type;
	public SDL_GamepadBinding_input input;
	
	[StructLayout(LayoutKind.Explicit)]
	public partial struct SDL_GamepadBinding_input
	{
		[FieldOffset(0)]
		public int button;
		[FieldOffset(0)]
		public SDL_GamepadBinding_axis axis;
		
		public partial struct SDL_GamepadBinding_axis
		{
			public int axis;
			public int axis_min;
			public int axis_max;
		}
		[FieldOffset(0)]
		public SDL_GamepadBinding_hat hat;
		
		public partial struct SDL_GamepadBinding_hat
		{
			public int hat;
			public int hat_mask;
		}
	}
	public SDL_GamepadBindingType output_type;
	public SDL_GamepadBinding_output output;
	
	[StructLayout(LayoutKind.Explicit)]
	public partial struct SDL_GamepadBinding_output
	{
		[FieldOffset(0)]
		public SDL_GamepadButton button;
		[FieldOffset(0)]
		public SDL_GamepadBinding_axis axis;
		
		public partial struct SDL_GamepadBinding_axis
		{
			public SDL_GamepadAxis axis;
			public int axis_min;
			public int axis_max;
		}
	}
}

public partial struct SDL_HapticDirection
{
	public SDL_HapticDirectionType type;
	public unsafe fixed int dir[3];
}

public partial struct SDL_HapticConstant
{
	public ushort type;
	public SDL_HapticDirection direction;
	public uint length;
	public ushort delay;
	public ushort button;
	public ushort interval;
	public short level;
	public ushort attack_length;
	public ushort attack_level;
	public ushort fade_length;
	public ushort fade_level;
}

public partial struct SDL_HapticPeriodic
{
	public ushort type;
	public SDL_HapticDirection direction;
	public uint length;
	public ushort delay;
	public ushort button;
	public ushort interval;
	public ushort period;
	public short magnitude;
	public short offset;
	public ushort phase;
	public ushort attack_length;
	public ushort attack_level;
	public ushort fade_length;
	public ushort fade_level;
}

public partial struct SDL_HapticCondition
{
	public ushort type;
	public SDL_HapticDirection direction;
	public uint length;
	public ushort delay;
	public ushort button;
	public ushort interval;
	public unsafe fixed ushort right_sat[3];
	public unsafe fixed ushort left_sat[3];
	public unsafe fixed short right_coeff[3];
	public unsafe fixed short left_coeff[3];
	public unsafe fixed ushort deadband[3];
	public unsafe fixed short center[3];
}

public partial struct SDL_HapticRamp
{
	public ushort type;
	public SDL_HapticDirection direction;
	public uint length;
	public ushort delay;
	public ushort button;
	public ushort interval;
	public short start;
	public short end;
	public ushort attack_length;
	public ushort attack_level;
	public ushort fade_length;
	public ushort fade_level;
}

public partial struct SDL_HapticLeftRight
{
	public ushort type;
	public uint length;
	public ushort large_magnitude;
	public ushort small_magnitude;
}

public partial struct SDL_HapticCustom
{
	public ushort type;
	public SDL_HapticDirection direction;
	public uint length;
	public ushort delay;
	public ushort button;
	public ushort interval;
	public byte channels;
	public ushort period;
	public ushort samples;
	public unsafe ushort* data;
	public ushort attack_length;
	public ushort attack_level;
	public ushort fade_length;
	public ushort fade_level;
}

[StructLayout(LayoutKind.Explicit)]
public partial struct SDL_HapticEffect
{
	[FieldOffset(0)]
	public SDL_HapticEffectType type;
	[FieldOffset(0)]
	public SDL_HapticConstant constant;
	[FieldOffset(0)]
	public SDL_HapticPeriodic periodic;
	[FieldOffset(0)]
	public SDL_HapticCondition condition;
	[FieldOffset(0)]
	public SDL_HapticRamp ramp;
	[FieldOffset(0)]
	public SDL_HapticLeftRight leftright;
	[FieldOffset(0)]
	public SDL_HapticCustom custom;
}

public partial struct SDL_hid_device_info
{
	public unsafe byte* path;
	public ushort vendor_id;
	public ushort product_id;
	public unsafe char* serial_number;
	public ushort release_number;
	public unsafe char* manufacturer_string;
	public unsafe char* product_string;
	public ushort usage_page;
	public ushort usage;
	public int interface_number;
	public int interface_class;
	public int interface_subclass;
	public int interface_protocol;
	public SDL_hid_bus_type bus_type;
	public unsafe SDL_hid_device_info* next;
}

public partial struct SDL_IOStreamInterface
{
	public unsafe delegate* unmanaged<nint, long> size;
	public unsafe delegate* unmanaged<nint, long, SDL_IOWhence, long> seek;
	public unsafe delegate* unmanaged<nint, nint, nuint, SDL_IOStatus*, nuint> read;
	public unsafe delegate* unmanaged<nint, nint, nuint, SDL_IOStatus*, nuint> write;
	public unsafe delegate* unmanaged<nint, SDL_bool> close;
}

public partial struct SDL_VirtualJoystickTouchpadDesc
{
	public ushort nfingers;
	public unsafe fixed ushort padding[3];
}

public partial struct SDL_VirtualJoystickSensorDesc
{
	public SDL_SensorType type;
	public float rate;
}

public partial struct SDL_VirtualJoystickDesc
{
	public ushort type;
	public ushort padding;
	public ushort vendor_id;
	public ushort product_id;
	public ushort naxes;
	public ushort nbuttons;
	public ushort nballs;
	public ushort nhats;
	public ushort ntouchpads;
	public ushort nsensors;
	public unsafe fixed ushort padding2[2];
	public uint button_mask;
	public uint axis_mask;
	public unsafe byte* name;
	public unsafe SDL_VirtualJoystickTouchpadDesc* touchpads;
	public unsafe SDL_VirtualJoystickSensorDesc* sensors;
	public nint userdata;
	public unsafe delegate* unmanaged<nint, void> Update;
	public unsafe delegate* unmanaged<nint, int, void> SetPlayerIndex;
	public unsafe delegate* unmanaged<nint, ushort, ushort, SDL_bool> Rumble;
	public unsafe delegate* unmanaged<nint, ushort, ushort, SDL_bool> RumbleTriggers;
	public unsafe delegate* unmanaged<nint, byte, byte, byte, SDL_bool> SetLED;
	public unsafe delegate* unmanaged<nint, nint, int, SDL_bool> SendEffect;
	public unsafe delegate* unmanaged<nint, SDL_bool, SDL_bool> SetSensorsEnabled;
	public unsafe delegate* unmanaged<nint, void> Cleanup;
}

public partial struct SDL_Locale
{
	public unsafe byte* language;
	public unsafe byte* country;
}

public partial struct SDL_MessageBoxButtonData
{
	public SDL_MessageBoxButtonFlags flags;
	public int buttonID;
	public unsafe byte* text;
}

public partial struct SDL_MessageBoxColor
{
	public byte r;
	public byte g;
	public byte b;
}

public partial struct SDL_MessageBoxColorScheme
{
	public colors__FixedBuffer colors;

	public unsafe struct colors__FixedBuffer
	{
		public SDL_MessageBoxColor e0;
		public SDL_MessageBoxColor e1;
		public SDL_MessageBoxColor e2;
		public SDL_MessageBoxColor e3;
		public SDL_MessageBoxColor e4;

		[UnscopedRef]
		public ref SDL_MessageBoxColor this[int index]
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return ref AsSpan()[index];
			}
		}

		[UnscopedRef]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<SDL_MessageBoxColor> AsSpan()
		{
			return MemoryMarshal.CreateSpan(ref e0, 5);
		}
	}
}

public partial struct SDL_MessageBoxData
{
	public SDL_MessageBoxFlags flags;
	public SDL_Window window;
	public unsafe byte* title;
	public unsafe byte* message;
	public int numbuttons;
	public unsafe SDL_MessageBoxButtonData* buttons;
	public unsafe SDL_MessageBoxColorScheme* colorScheme;
}

public partial struct SDL_Color
{
	public byte r;
	public byte g;
	public byte b;
	public byte a;
}

public partial struct SDL_FColor
{
	public float r;
	public float g;
	public float b;
	public float a;
}

public partial struct SDL_Palette
{
	public int ncolors;
	public unsafe SDL_Color* colors;
	public uint version;
	public int refcount;
}

public partial struct SDL_PixelFormatDetails
{
	public SDL_PixelFormat format;
	public byte bits_per_pixel;
	public byte bytes_per_pixel;
	public unsafe fixed byte padding[2];
	public uint Rmask;
	public uint Gmask;
	public uint Bmask;
	public uint Amask;
	public byte Rbits;
	public byte Gbits;
	public byte Bbits;
	public byte Abits;
	public byte Rshift;
	public byte Gshift;
	public byte Bshift;
	public byte Ashift;
}

public partial struct SDL_Point
{
	public int x;
	public int y;
}

public partial struct SDL_FPoint
{
	public float x;
	public float y;
}

public partial struct SDL_Rect
{
	public int x;
	public int y;
	public int w;
	public int h;
}

public partial struct SDL_FRect
{
	public float x;
	public float y;
	public float w;
	public float h;
}

public partial struct SDL_Vertex
{
	public PointF position;
	public SDL_FColor color;
	public PointF tex_coord;
}

public partial struct SDL_StorageInterface
{
	public unsafe delegate* unmanaged<nint, SDL_bool> close;
	public unsafe delegate* unmanaged<nint, SDL_bool> ready;
	public unsafe delegate* unmanaged<nint, byte*, delegate* unmanaged<nint, byte*, byte*, int>*, nint, SDL_bool> enumerate;
	public unsafe delegate* unmanaged<nint, byte*, SDL_PathInfo*, SDL_bool> info;
	public unsafe delegate* unmanaged<nint, byte*, nint, ulong, SDL_bool> read_file;
	public unsafe delegate* unmanaged<nint, byte*, nint, ulong, SDL_bool> write_file;
	public unsafe delegate* unmanaged<nint, byte*, SDL_bool> mkdir;
	public unsafe delegate* unmanaged<nint, byte*, SDL_bool> remove;
	public unsafe delegate* unmanaged<nint, byte*, byte*, SDL_bool> rename;
	public unsafe delegate* unmanaged<nint, byte*, byte*, SDL_bool> copy;
	public unsafe delegate* unmanaged<nint, ulong> space_remaining;
}

public partial struct SDL_Surface
{
	public SDL_SurfaceFlags flags;
	public SDL_PixelFormat format;
	public int w;
	public int h;
	public int pitch;
	public nint pixels;
	public int refcount;
	public SDL_SurfaceData @internal;
}

public partial struct SDL_DateTime
{
	public int year;
	public int month;
	public int day;
	public int hour;
	public int minute;
	public int second;
	public int nanosecond;
	public int day_of_week;
	public int utc_offset;
}

public partial struct SDL_Finger
{
	public SDL_FingerID id;
	public float x;
	public float y;
	public float pressure;
}

public partial struct SDL_DisplayMode
{
	public SDL_DisplayID displayID;
	public SDL_PixelFormat format;
	public int w;
	public int h;
	public float pixel_density;
	public float refresh_rate;
	public int refresh_rate_numerator;
	public int refresh_rate_denominator;
	public SDL_DisplayModeData @internal;
}

public partial struct SDL_GPUDepthStencilValue
{
	public float depth;
	public byte stencil;
}

public partial struct SDL_GPUViewport
{
	public float x;
	public float y;
	public float w;
	public float h;
	public float minDepth;
	public float maxDepth;
}

public partial struct SDL_GPUTextureTransferInfo
{
	public SDL_GPUTransferBuffer transferBuffer;
	public uint offset;
	public uint imagePitch;
	public uint imageHeight;
}

public partial struct SDL_GPUTransferBufferLocation
{
	public SDL_GPUTransferBuffer transferBuffer;
	public uint offset;
}

public partial struct SDL_GPUTextureLocation
{
	public SDL_GPUTexture texture;
	public uint mipLevel;
	public uint layer;
	public uint x;
	public uint y;
	public uint z;
}

public partial struct SDL_GPUTextureRegion
{
	public SDL_GPUTexture texture;
	public uint mipLevel;
	public uint layer;
	public uint x;
	public uint y;
	public uint z;
	public uint w;
	public uint h;
	public uint d;
}

public partial struct SDL_GPUBlitRegion
{
	public SDL_GPUTexture texture;
	public uint mipLevel;
	public uint layerOrDepthPlane;
	public uint x;
	public uint y;
	public uint w;
	public uint h;
}

public partial struct SDL_GPUBufferLocation
{
	public SDL_GPUBuffer buffer;
	public uint offset;
}

public partial struct SDL_GPUBufferRegion
{
	public SDL_GPUBuffer buffer;
	public uint offset;
	public uint size;
}

public partial struct SDL_GPUIndirectDrawCommand
{
	public uint vertexCount;
	public uint instanceCount;
	public uint firstVertex;
	public uint firstInstance;
}

public partial struct SDL_GPUIndexedIndirectDrawCommand
{
	public uint indexCount;
	public uint instanceCount;
	public uint firstIndex;
	public int vertexOffset;
	public uint firstInstance;
}

public partial struct SDL_GPUIndirectDispatchCommand
{
	public uint groupCountX;
	public uint groupCountY;
	public uint groupCountZ;
}

public partial struct SDL_GPUSamplerCreateInfo
{
	public SDL_GPUFilter minFilter;
	public SDL_GPUFilter magFilter;
	public SDL_GPUSamplerMipmapMode mipmapMode;
	public SDL_GPUSamplerAddressMode addressModeU;
	public SDL_GPUSamplerAddressMode addressModeV;
	public SDL_GPUSamplerAddressMode addressModeW;
	public float mipLodBias;
	public SDL_bool anisotropyEnable;
	public float maxAnisotropy;
	public SDL_bool compareEnable;
	public SDL_GPUCompareOp compareOp;
	public float minLod;
	public float maxLod;
	public SDL_PropertiesID props;
}

public partial struct SDL_GPUVertexBinding
{
	public uint binding;
	public uint stride;
	public SDL_GPUVertexInputRate inputRate;
	public uint instanceStepRate;
}

public partial struct SDL_GPUVertexAttribute
{
	public uint location;
	public uint binding;
	public SDL_GPUVertexElementFormat format;
	public uint offset;
}

public partial struct SDL_GPUVertexInputState
{
	public unsafe SDL_GPUVertexBinding* vertexBindings;
	public uint vertexBindingCount;
	public unsafe SDL_GPUVertexAttribute* vertexAttributes;
	public uint vertexAttributeCount;
}

public partial struct SDL_GPUStencilOpState
{
	public SDL_GPUStencilOp failOp;
	public SDL_GPUStencilOp passOp;
	public SDL_GPUStencilOp depthFailOp;
	public SDL_GPUCompareOp compareOp;
}

public partial struct SDL_GPUColorAttachmentBlendState
{
	public SDL_bool blendEnable;
	public SDL_GPUBlendFactor srcColorBlendFactor;
	public SDL_GPUBlendFactor dstColorBlendFactor;
	public SDL_GPUBlendOp colorBlendOp;
	public SDL_GPUBlendFactor srcAlphaBlendFactor;
	public SDL_GPUBlendFactor dstAlphaBlendFactor;
	public SDL_GPUBlendOp alphaBlendOp;
	public SDL_GPUColorComponentFlags colorWriteMask;
}

public partial struct SDL_GPUShaderCreateInfo
{
	public nuint codeSize;
	public unsafe byte* code;
	public unsafe byte* entryPointName;
	public SDL_GPUShaderFormat format;
	public SDL_GPUShaderStage stage;
	public uint samplerCount;
	public uint storageTextureCount;
	public uint storageBufferCount;
	public uint uniformBufferCount;
	public SDL_PropertiesID props;
}

public partial struct SDL_GPUTextureCreateInfo
{
	public SDL_GPUTextureType type;
	public SDL_GPUTextureFormat format;
	public SDL_GPUTextureUsageFlags usageFlags;
	public uint width;
	public uint height;
	public uint layerCountOrDepth;
	public uint levelCount;
	public SDL_GPUSampleCount sampleCount;
	public SDL_PropertiesID props;
}

public partial struct SDL_GPUBufferCreateInfo
{
	public SDL_GPUBufferUsageFlags usageFlags;
	public uint sizeInBytes;
	public SDL_PropertiesID props;
}

public partial struct SDL_GPUTransferBufferCreateInfo
{
	public SDL_GPUTransferBufferUsage usage;
	public uint sizeInBytes;
	public SDL_PropertiesID props;
}

public partial struct SDL_GPURasterizerState
{
	public SDL_GPUFillMode fillMode;
	public SDL_GPUCullMode cullMode;
	public SDL_GPUFrontFace frontFace;
	public SDL_bool depthBiasEnable;
	public float depthBiasConstantFactor;
	public float depthBiasClamp;
	public float depthBiasSlopeFactor;
}

public partial struct SDL_GPUMultisampleState
{
	public SDL_GPUSampleCount sampleCount;
	public uint sampleMask;
}

public partial struct SDL_GPUDepthStencilState
{
	public SDL_bool depthTestEnable;
	public SDL_bool depthWriteEnable;
	public SDL_GPUCompareOp compareOp;
	public SDL_bool stencilTestEnable;
	public SDL_GPUStencilOpState backStencilState;
	public SDL_GPUStencilOpState frontStencilState;
	public byte compareMask;
	public byte writeMask;
	public byte reference;
}

public partial struct SDL_GPUColorAttachmentDescription
{
	public SDL_GPUTextureFormat format;
	public SDL_GPUColorAttachmentBlendState blendState;
}

public partial struct SDL_GPUGraphicsPipelineAttachmentInfo
{
	public unsafe SDL_GPUColorAttachmentDescription* colorAttachmentDescriptions;
	public uint colorAttachmentCount;
	public SDL_bool hasDepthStencilAttachment;
	public SDL_GPUTextureFormat depthStencilFormat;
}

public partial struct SDL_GPUGraphicsPipelineCreateInfo
{
	public SDL_GPUShader vertexShader;
	public SDL_GPUShader fragmentShader;
	public SDL_GPUVertexInputState vertexInputState;
	public SDL_GPUPrimitiveType primitiveType;
	public SDL_GPURasterizerState rasterizerState;
	public SDL_GPUMultisampleState multisampleState;
	public SDL_GPUDepthStencilState depthStencilState;
	public SDL_GPUGraphicsPipelineAttachmentInfo attachmentInfo;
	public unsafe fixed float blendConstants[4];
	public SDL_PropertiesID props;
}

public partial struct SDL_GPUComputePipelineCreateInfo
{
	public nuint codeSize;
	public unsafe byte* code;
	public unsafe byte* entryPointName;
	public SDL_GPUShaderFormat format;
	public uint readOnlyStorageTextureCount;
	public uint readOnlyStorageBufferCount;
	public uint writeOnlyStorageTextureCount;
	public uint writeOnlyStorageBufferCount;
	public uint uniformBufferCount;
	public uint threadCountX;
	public uint threadCountY;
	public uint threadCountZ;
	public SDL_PropertiesID props;
}

public partial struct SDL_GPUColorAttachmentInfo
{
	public SDL_GPUTexture texture;
	public uint mipLevel;
	public uint layerOrDepthPlane;
	public SDL_FColor clearColor;
	public SDL_GPULoadOp loadOp;
	public SDL_GPUStoreOp storeOp;
	public SDL_bool cycle;
}

public partial struct SDL_GPUDepthStencilAttachmentInfo
{
	public SDL_GPUTexture texture;
	public SDL_GPUDepthStencilValue depthStencilClearValue;
	public SDL_GPULoadOp loadOp;
	public SDL_GPUStoreOp storeOp;
	public SDL_GPULoadOp stencilLoadOp;
	public SDL_GPUStoreOp stencilStoreOp;
	public SDL_bool cycle;
}

public partial struct SDL_GPUBufferBinding
{
	public SDL_GPUBuffer buffer;
	public uint offset;
}

public partial struct SDL_GPUTextureSamplerBinding
{
	public SDL_GPUTexture texture;
	public SDL_GPUSampler sampler;
}

public partial struct SDL_GPUStorageBufferWriteOnlyBinding
{
	public SDL_GPUBuffer buffer;
	public SDL_bool cycle;
}

public partial struct SDL_GPUStorageTextureWriteOnlyBinding
{
	public SDL_GPUTexture texture;
	public uint mipLevel;
	public uint layer;
	public SDL_bool cycle;
}

