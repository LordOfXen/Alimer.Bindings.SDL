// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;
using System.Diagnostics.CodeAnalysis;

#pragma warning disable CS0649
namespace SDL;

public partial struct SDL_Keysym
{
	public SDL_Scancode scancode;
	public SDL_KeyCode sym;
	public ushort mod;
	public uint unused;
}

public partial struct SDL_MessageBoxButtonData
{
	public uint flags;
	public int buttonid;
	public unsafe sbyte* text;
}

public partial struct SDL_MessageBoxColor
{
	public byte r;
	public byte g;
	public byte b;
}

public partial struct SDL_MessageBoxColorScheme
{
	public colors__FixedBuffer colors;

	public unsafe struct colors__FixedBuffer
	{
		public SDL_MessageBoxColor e0;
		public SDL_MessageBoxColor e1;
		public SDL_MessageBoxColor e2;
		public SDL_MessageBoxColor e3;
		public SDL_MessageBoxColor e4;

		[UnscopedRef]
		public ref SDL_MessageBoxColor this[int index]
		{
			[MethodImpl(MethodImplOptions.AggressiveInlining)]
			get
			{
				return ref AsSpan()[index];
			}
		}

		[UnscopedRef]
		[MethodImpl(MethodImplOptions.AggressiveInlining)]
		public Span<SDL_MessageBoxColor> AsSpan()
		{
			return MemoryMarshal.CreateSpan(ref e0, 5);
		}
	}
}

public partial struct SDL_MessageBoxData
{
	public uint flags;
	public SDL_Window window;
	public unsafe sbyte* title;
	public unsafe sbyte* message;
	public int numbuttons;
	public unsafe SDL_MessageBoxButtonData* buttons;
	public unsafe SDL_MessageBoxColorScheme* colorScheme;
}

public partial struct SDL_VirtualJoystickDesc
{
	public ushort version;
	public ushort type;
	public ushort naxes;
	public ushort nbuttons;
	public ushort nhats;
	public ushort vendor_id;
	public ushort product_id;
	public ushort padding;
	public uint button_mask;
	public uint axis_mask;
	public unsafe sbyte* name;
	public nint userdata;
	public unsafe delegate* unmanaged<nint, void> Update;
	public unsafe delegate* unmanaged<nint, int, void> SetPlayerIndex;
	public unsafe delegate* unmanaged<nint, ushort, ushort, int> Rumble;
	public unsafe delegate* unmanaged<nint, ushort, ushort, int> RumbleTriggers;
	public unsafe delegate* unmanaged<nint, byte, byte, byte, int> SetLED;
	public unsafe delegate* unmanaged<nint, void*, int, int> SendEffect;
}

public partial struct SDL_GamepadBinding
{
	public SDL_GamepadBindingType inputType;
	public SDL_GamepadBinding_input input;
	
	[StructLayout(LayoutKind.Explicit)]
	public partial struct SDL_GamepadBinding_input
	{
		[FieldOffset(0)]
		public int button;
		[FieldOffset(0)]
		public SDL_GamepadBinding_axis axis;
		
		public partial struct SDL_GamepadBinding_axis
		{
			public int axis;
			public int axis_min;
			public int axis_max;
		}
		[FieldOffset(0)]
		public SDL_GamepadBinding_hat hat;
		
		public partial struct SDL_GamepadBinding_hat
		{
			public int hat;
			public int hat_mask;
		}
	}
	public SDL_GamepadBindingType outputType;
	public SDL_GamepadBinding_output output;
	
	[StructLayout(LayoutKind.Explicit)]
	public partial struct SDL_GamepadBinding_output
	{
		[FieldOffset(0)]
		public SDL_GamepadButton button;
		[FieldOffset(0)]
		public SDL_GamepadBinding_axis axis;
		
		public partial struct SDL_GamepadBinding_axis
		{
			public SDL_GamepadAxis axis;
			public int axis_min;
			public int axis_max;
		}
	}
}

public partial struct SDL_Finger
{
	public SDL_FingerID id;
	public float x;
	public float y;
	public float pressure;
}

public partial struct SDL_DisplayMode
{
	public SDL_DisplayID displayID;
	public uint format;
	public int w;
	public int h;
	public float pixel_density;
	public float refresh_rate;
	public nint driverdata;
}

public partial struct SDL_AudioSpec
{
	public SDL_AudioFormat format;
	public int channels;
	public int freq;
}

public partial struct SDL_CommonEvent
{
	public uint type;
	public ulong timestamp;
}

public partial struct SDL_DisplayEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_DisplayID displayID;
	public int data1;
}

public partial struct SDL_WindowEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public int data1;
	public int data2;
}

public partial struct SDL_KeyboardEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public byte state;
	public byte repeat;
	public byte padding2;
	public byte padding3;
	public SDL_KeyboardEvent_keysym keysym;
	
	public partial struct SDL_KeyboardEvent_keysym
	{
		public SDL_Scancode scancode;
		public SDL_KeyCode sym;
		public ushort mod;
		public uint unused;
	}
}

public partial struct SDL_TextEditingEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public unsafe sbyte* text;
	public int start;
	public int length;
}

public partial struct SDL_TextInputEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public unsafe sbyte* text;
}

public partial struct SDL_MouseMotionEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public SDL_MouseID which;
	public uint state;
	public float x;
	public float y;
	public float xrel;
	public float yrel;
}

public partial struct SDL_MouseButtonEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public SDL_MouseID which;
	public byte button;
	public byte state;
	public byte clicks;
	public byte padding;
	public float x;
	public float y;
}

public partial struct SDL_MouseWheelEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public SDL_MouseID which;
	public float x;
	public float y;
	public uint direction;
	public float mouseX;
	public float mouseY;
}

public partial struct SDL_JoyAxisEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_JoystickID which;
	public byte axis;
	public byte padding1;
	public byte padding2;
	public byte padding3;
	public short value;
	public ushort padding4;
}

public partial struct SDL_JoyHatEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_JoystickID which;
	public byte hat;
	public byte value;
	public byte padding1;
	public byte padding2;
}

public partial struct SDL_JoyButtonEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_JoystickID which;
	public byte button;
	public byte state;
	public byte padding1;
	public byte padding2;
}

public partial struct SDL_JoyDeviceEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_JoystickID which;
}

public partial struct SDL_JoyBatteryEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_JoystickID which;
	public SDL_JoystickPowerLevel level;
}

public partial struct SDL_GamepadAxisEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_JoystickID which;
	public byte axis;
	public byte padding1;
	public byte padding2;
	public byte padding3;
	public short value;
	public ushort padding4;
}

public partial struct SDL_GamepadButtonEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_JoystickID which;
	public byte button;
	public byte state;
	public byte padding1;
	public byte padding2;
}

public partial struct SDL_GamepadDeviceEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_JoystickID which;
}

public partial struct SDL_GamepadTouchpadEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_JoystickID which;
	public int touchpad;
	public int finger;
	public float x;
	public float y;
	public float pressure;
}

public partial struct SDL_GamepadSensorEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_JoystickID which;
	public int sensor;
	public unsafe fixed float data[3];
	public ulong sensor_timestamp;
}

public partial struct SDL_AudioDeviceEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_AudioDeviceID which;
	public byte iscapture;
	public byte padding1;
	public byte padding2;
	public byte padding3;
}

public partial struct SDL_TouchFingerEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_TouchID touchId;
	public SDL_FingerID fingerId;
	public float x;
	public float y;
	public float dx;
	public float dy;
	public float pressure;
	public SDL_WindowID windowID;
}

public partial struct SDL_DropEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public float x;
	public float y;
	public unsafe sbyte* source;
	public unsafe sbyte* data;
}

public partial struct SDL_ClipboardEvent
{
	public uint type;
	public ulong timestamp;
}

public partial struct SDL_SensorEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_SensorID which;
	public unsafe fixed float data[6];
	public ulong sensor_timestamp;
}

public partial struct SDL_QuitEvent
{
	public uint type;
	public ulong timestamp;
}

public partial struct SDL_UserEvent
{
	public uint type;
	public ulong timestamp;
	public SDL_WindowID windowID;
	public int code;
	public nint data1;
	public nint data2;
}

[StructLayout(LayoutKind.Explicit)]
public partial struct SDL_Event
{
	[FieldOffset(0)]
	public SDL_EventType type;
	[FieldOffset(0)]
	public SDL_Event_common common;
	
	public partial struct SDL_Event_common
	{
		public SDL_EventType type;
		public ulong timestamp;
	}
	[FieldOffset(0)]
	public SDL_Event_display display;
	
	public partial struct SDL_Event_display
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_DisplayID displayID;
		public int data1;
	}
	[FieldOffset(0)]
	public SDL_Event_window window;
	
	public partial struct SDL_Event_window
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_WindowID windowID;
		public int data1;
		public int data2;
	}
	[FieldOffset(0)]
	public SDL_Event_key key;
	
	public partial struct SDL_Event_key
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_WindowID windowID;
		public byte state;
		public byte repeat;
		public byte padding2;
		public byte padding3;
		public SDL_KeyboardEvent_keysym keysym;
		
		public partial struct SDL_KeyboardEvent_keysym
		{
			public SDL_Scancode scancode;
			public SDL_KeyCode sym;
			public ushort mod;
			public uint unused;
		}
	}
	[FieldOffset(0)]
	public SDL_Event_edit edit;
	
	public partial struct SDL_Event_edit
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_WindowID windowID;
		public unsafe sbyte* text;
		public int start;
		public int length;
	}
	[FieldOffset(0)]
	public SDL_Event_text text;
	
	public partial struct SDL_Event_text
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_WindowID windowID;
		public unsafe sbyte* text;
	}
	[FieldOffset(0)]
	public SDL_Event_motion motion;
	
	public partial struct SDL_Event_motion
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_WindowID windowID;
		public SDL_MouseID which;
		public uint state;
		public float x;
		public float y;
		public float xrel;
		public float yrel;
	}
	[FieldOffset(0)]
	public SDL_Event_button button;
	
	public partial struct SDL_Event_button
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_WindowID windowID;
		public SDL_MouseID which;
		public byte button;
		public byte state;
		public byte clicks;
		public byte padding;
		public float x;
		public float y;
	}
	[FieldOffset(0)]
	public SDL_Event_wheel wheel;
	
	public partial struct SDL_Event_wheel
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_WindowID windowID;
		public SDL_MouseID which;
		public float x;
		public float y;
		public uint direction;
		public float mouseX;
		public float mouseY;
	}
	[FieldOffset(0)]
	public SDL_Event_jaxis jaxis;
	
	public partial struct SDL_Event_jaxis
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_JoystickID which;
		public byte axis;
		public byte padding1;
		public byte padding2;
		public byte padding3;
		public short value;
		public ushort padding4;
	}
	[FieldOffset(0)]
	public SDL_Event_jhat jhat;
	
	public partial struct SDL_Event_jhat
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_JoystickID which;
		public byte hat;
		public byte value;
		public byte padding1;
		public byte padding2;
	}
	[FieldOffset(0)]
	public SDL_Event_jbutton jbutton;
	
	public partial struct SDL_Event_jbutton
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_JoystickID which;
		public byte button;
		public byte state;
		public byte padding1;
		public byte padding2;
	}
	[FieldOffset(0)]
	public SDL_Event_jdevice jdevice;
	
	public partial struct SDL_Event_jdevice
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_JoystickID which;
	}
	[FieldOffset(0)]
	public SDL_Event_jbattery jbattery;
	
	public partial struct SDL_Event_jbattery
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_JoystickID which;
		public SDL_JoystickPowerLevel level;
	}
	[FieldOffset(0)]
	public SDL_Event_gaxis gaxis;
	
	public partial struct SDL_Event_gaxis
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_JoystickID which;
		public byte axis;
		public byte padding1;
		public byte padding2;
		public byte padding3;
		public short value;
		public ushort padding4;
	}
	[FieldOffset(0)]
	public SDL_Event_gbutton gbutton;
	
	public partial struct SDL_Event_gbutton
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_JoystickID which;
		public byte button;
		public byte state;
		public byte padding1;
		public byte padding2;
	}
	[FieldOffset(0)]
	public SDL_Event_gdevice gdevice;
	
	public partial struct SDL_Event_gdevice
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_JoystickID which;
	}
	[FieldOffset(0)]
	public SDL_Event_gtouchpad gtouchpad;
	
	public partial struct SDL_Event_gtouchpad
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_JoystickID which;
		public int touchpad;
		public int finger;
		public float x;
		public float y;
		public float pressure;
	}
	[FieldOffset(0)]
	public SDL_Event_gsensor gsensor;
	
	public partial struct SDL_Event_gsensor
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_JoystickID which;
		public int sensor;
		public unsafe fixed float data[3];
		public ulong sensor_timestamp;
	}
	[FieldOffset(0)]
	public SDL_Event_adevice adevice;
	
	public partial struct SDL_Event_adevice
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_AudioDeviceID which;
		public byte iscapture;
		public byte padding1;
		public byte padding2;
		public byte padding3;
	}
	[FieldOffset(0)]
	public SDL_Event_sensor sensor;
	
	public partial struct SDL_Event_sensor
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_SensorID which;
		public unsafe fixed float data[6];
		public ulong sensor_timestamp;
	}
	[FieldOffset(0)]
	public SDL_Event_quit quit;
	
	public partial struct SDL_Event_quit
	{
		public SDL_EventType type;
		public ulong timestamp;
	}
	[FieldOffset(0)]
	public SDL_Event_user user;
	
	public partial struct SDL_Event_user
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_WindowID windowID;
		public int code;
		public nint data1;
		public nint data2;
	}
	[FieldOffset(0)]
	public SDL_Event_tfinger tfinger;
	
	public partial struct SDL_Event_tfinger
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_TouchID touchId;
		public SDL_FingerID fingerId;
		public float x;
		public float y;
		public float dx;
		public float dy;
		public float pressure;
		public SDL_WindowID windowID;
	}
	[FieldOffset(0)]
	public SDL_Event_drop drop;
	
	public partial struct SDL_Event_drop
	{
		public SDL_EventType type;
		public ulong timestamp;
		public SDL_WindowID windowID;
		public float x;
		public float y;
		public unsafe sbyte* source;
		public unsafe sbyte* data;
	}
	[FieldOffset(0)]
	public SDL_Event_clipboard clipboard;
	
	public partial struct SDL_Event_clipboard
	{
		public SDL_EventType type;
		public ulong timestamp;
	}
	[FieldOffset(0)]
	public unsafe fixed byte padding[128];
}

public partial struct SDL_HapticDirection
{
	public SDL_HapticDirectionType type;
	public unsafe fixed int dir[3];
}

public partial struct SDL_HapticConstant
{
	public ushort type;
	public SDL_HapticConstant_direction direction;
	
	public partial struct SDL_HapticConstant_direction
	{
		public byte type;
		public unsafe fixed int dir[3];
	}
	public uint length;
	public ushort delay;
	public ushort button;
	public ushort interval;
	public short level;
	public ushort attack_length;
	public ushort attack_level;
	public ushort fade_length;
	public ushort fade_level;
}

public partial struct SDL_HapticPeriodic
{
	public ushort type;
	public SDL_HapticPeriodic_direction direction;
	
	public partial struct SDL_HapticPeriodic_direction
	{
		public byte type;
		public unsafe fixed int dir[3];
	}
	public uint length;
	public ushort delay;
	public ushort button;
	public ushort interval;
	public ushort period;
	public short magnitude;
	public short offset;
	public ushort phase;
	public ushort attack_length;
	public ushort attack_level;
	public ushort fade_length;
	public ushort fade_level;
}

public partial struct SDL_HapticCondition
{
	public ushort type;
	public SDL_HapticCondition_direction direction;
	
	public partial struct SDL_HapticCondition_direction
	{
		public byte type;
		public unsafe fixed int dir[3];
	}
	public uint length;
	public ushort delay;
	public ushort button;
	public ushort interval;
	public unsafe fixed ushort right_sat[3];
	public unsafe fixed ushort left_sat[3];
	public unsafe fixed short right_coeff[3];
	public unsafe fixed short left_coeff[3];
	public unsafe fixed ushort deadband[3];
	public unsafe fixed short center[3];
}

public partial struct SDL_HapticRamp
{
	public ushort type;
	public SDL_HapticRamp_direction direction;
	
	public partial struct SDL_HapticRamp_direction
	{
		public byte type;
		public unsafe fixed int dir[3];
	}
	public uint length;
	public ushort delay;
	public ushort button;
	public ushort interval;
	public short start;
	public short end;
	public ushort attack_length;
	public ushort attack_level;
	public ushort fade_length;
	public ushort fade_level;
}

public partial struct SDL_HapticLeftRight
{
	public ushort type;
	public uint length;
	public ushort large_magnitude;
	public ushort small_magnitude;
}

public partial struct SDL_HapticCustom
{
	public ushort type;
	public SDL_HapticCustom_direction direction;
	
	public partial struct SDL_HapticCustom_direction
	{
		public byte type;
		public unsafe fixed int dir[3];
	}
	public uint length;
	public ushort delay;
	public ushort button;
	public ushort interval;
	public byte channels;
	public ushort period;
	public ushort samples;
	public unsafe ushort* data;
	public ushort attack_length;
	public ushort attack_level;
	public ushort fade_length;
	public ushort fade_level;
}

[StructLayout(LayoutKind.Explicit)]
public partial struct SDL_HapticEffect
{
	[FieldOffset(0)]
	public SDL_HapticEffectType type;
	[FieldOffset(0)]
	public SDL_HapticEffect_constant constant;
	
	public partial struct SDL_HapticEffect_constant
	{
		public SDL_HapticEffectType type;
		public SDL_HapticConstant_direction direction;
		
		public partial struct SDL_HapticConstant_direction
		{
			public byte type;
			public unsafe fixed int dir[3];
		}
		public uint length;
		public ushort delay;
		public ushort button;
		public ushort interval;
		public short level;
		public ushort attack_length;
		public ushort attack_level;
		public ushort fade_length;
		public ushort fade_level;
	}
	[FieldOffset(0)]
	public SDL_HapticEffect_periodic periodic;
	
	public partial struct SDL_HapticEffect_periodic
	{
		public SDL_HapticEffectType type;
		public SDL_HapticPeriodic_direction direction;
		
		public partial struct SDL_HapticPeriodic_direction
		{
			public byte type;
			public unsafe fixed int dir[3];
		}
		public uint length;
		public ushort delay;
		public ushort button;
		public ushort interval;
		public ushort period;
		public short magnitude;
		public short offset;
		public ushort phase;
		public ushort attack_length;
		public ushort attack_level;
		public ushort fade_length;
		public ushort fade_level;
	}
	[FieldOffset(0)]
	public SDL_HapticEffect_condition condition;
	
	public partial struct SDL_HapticEffect_condition
	{
		public SDL_HapticEffectType type;
		public SDL_HapticCondition_direction direction;
		
		public partial struct SDL_HapticCondition_direction
		{
			public byte type;
			public unsafe fixed int dir[3];
		}
		public uint length;
		public ushort delay;
		public ushort button;
		public ushort interval;
		public unsafe fixed ushort right_sat[3];
		public unsafe fixed ushort left_sat[3];
		public unsafe fixed short right_coeff[3];
		public unsafe fixed short left_coeff[3];
		public unsafe fixed ushort deadband[3];
		public unsafe fixed short center[3];
	}
	[FieldOffset(0)]
	public SDL_HapticEffect_ramp ramp;
	
	public partial struct SDL_HapticEffect_ramp
	{
		public SDL_HapticEffectType type;
		public SDL_HapticRamp_direction direction;
		
		public partial struct SDL_HapticRamp_direction
		{
			public byte type;
			public unsafe fixed int dir[3];
		}
		public uint length;
		public ushort delay;
		public ushort button;
		public ushort interval;
		public short start;
		public short end;
		public ushort attack_length;
		public ushort attack_level;
		public ushort fade_length;
		public ushort fade_level;
	}
	[FieldOffset(0)]
	public SDL_HapticEffect_leftright leftright;
	
	public partial struct SDL_HapticEffect_leftright
	{
		public SDL_HapticEffectType type;
		public uint length;
		public ushort large_magnitude;
		public ushort small_magnitude;
	}
	[FieldOffset(0)]
	public SDL_HapticEffect_custom custom;
	
	public partial struct SDL_HapticEffect_custom
	{
		public SDL_HapticEffectType type;
		public SDL_HapticCustom_direction direction;
		
		public partial struct SDL_HapticCustom_direction
		{
			public byte type;
			public unsafe fixed int dir[3];
		}
		public uint length;
		public ushort delay;
		public ushort button;
		public ushort interval;
		public byte channels;
		public ushort period;
		public ushort samples;
		public unsafe ushort* data;
		public ushort attack_length;
		public ushort attack_level;
		public ushort fade_length;
		public ushort fade_level;
	}
}

